<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2022-2023 OI赛季</title>
    <url>/2022/08/27/2022-2023-OI%E8%B5%9B%E5%AD%A3/</url>
    <content><![CDATA[<blockquote>
<p>$\text{No more chance…}$</p>
</blockquote>
<h1 id="text-2022-年-7-sim8-月（暑假）"><a href="#text-2022-年-7-sim8-月（暑假）" class="headerlink" title="$\text{2022}$ 年 $7\sim8$ 月（暑假）"></a>$\text{2022}$ 年 $7\sim8$ 月（暑假）</h1><p>暑假集训模拟赛，相比于去年，确实有点进步。但真的就是倒数的次数少了一点，感觉我的各次比赛的方差应该是最大的，为什么会这样呢。</p>
<h1 id="text-2022-年-9-sim-10-月"><a href="#text-2022-年-9-sim-10-月" class="headerlink" title="$\text{2022}$ 年 $9\sim 10$ 月"></a>$\text{2022}$ 年 $9\sim 10$ 月</h1><p>这段时间做了一次跟去年重复的工作，就是把联赛范围内的知识都再次拿出来复习。但<strong>重复的学习不代表重复的收获</strong>，每一次学习都会加深记忆，这次我也做了一个关于一些知识点和套路的整理，<a href="https://wyy-oier.github.io/2022/07/29/OI-idea-s/">见此</a>。所以总的来说，我会更认为自己比之前更掌握了联赛范围内的知识。</p>
<h2 id="text-2022-10-15"><a href="#text-2022-10-15" class="headerlink" title="$\text{2022.10.15}$"></a>$\text{2022.10.15}$</h2><p>没记错的话这天是 $\text{CSP-S}$ 的日子，游记在<a href="https://wyy-oier.github.io/2022/09/18/NOIP2022-%E5%90%8C%E6%AD%A5%E8%B5%9B%E6%B8%B8%E8%AE%B0/">这里</a>，相关的一些问题和总结也说了，但是还是想重申一点：<strong>注重基础算法的理解和运用</strong>，当然这次做的还是很好的，问题主要是在于<strong>需要加快思考的速度</strong>，如果就连 $\text{T1,T2}$  一共都得想 $30$ 分钟，写 $70$ 分钟的话，那后面的题目必然就没有足够的时间，<strong>最后的结果还是失败</strong>。</p>
<h1 id="text-2022-年-11-sim-12-月"><a href="#text-2022-年-11-sim-12-月" class="headerlink" title="$\text{2022}$ 年 $11\sim 12$ 月"></a>$\text{2022}$ 年 $11\sim 12$ 月</h1><h2 id="text-2022-11-19-2022-11-26"><a href="#text-2022-11-19-2022-11-26" class="headerlink" title="$\text{2022.11.19~2022.11.26}$"></a>$\text{2022.11.19~2022.11.26}$</h2><p>这是 $\text{NOIP}$ 前一周停课的时间，当然因为网课，所以停课带来的 whk 进度上的问题并不大。</p>
<p>这一周内我将未整理的树的知识整理，当然这段时间有 $2$ 场模拟赛，打的效果… 还是倒数。</p>
<p>可能还是代码上的细节实现问题出现问题导致<strong>会做的题挂分</strong>，但是这一点在我这就非常玄学，感觉也并不是每场都挂，但就是有时候挂。</p>
<p><img src="https://cdnjson.com/images/2023/01/14/image.png"></p>
<p>现在来看，$\text{NOIP}$ 的取消未尝不是一件好事（当然是在春季赛还有的情况），因为今年的 $\text{T2}$ 考<strong>构造</strong>，$\text{T3}$ 考<strong>边双联通分量</strong>，而学会边双联通分量后 $\text{T3}$ 的思维难度也就是大概 $\text{NOIP2021 T2}$ 的难度，所以就是一道必得分题，但是我没学，所以我不是又直接垫底。</p>
<p>这也让我意识到新的问题，要赶快把<strong>联赛的漏洞</strong>给解决掉，并提前准备<strong>省选的知识</strong>。</p>
<p>后面这段时间教练给我们讲了一些新的没讲过的算法和省选算法，有的已经了解或学过，有的没学，但是感觉这次学习后都重新有了新的认识。</p>
<p>当然省选以上的算法我是都会去写学习笔记的，旨在帮助自己复习知识、运用知识还希望做到一些套路整合，感觉就算学会了用法，想要在场上做出一道看起来不那么显然的题就<strong>需要在平时积累这类题目的方法论</strong>，尽量在寒假完成这项工作。</p>
<h1 id="text-2023-年-1-sim-2-月（寒假）"><a href="#text-2023-年-1-sim-2-月（寒假）" class="headerlink" title="$\text{2023}$ 年 $1\sim 2$ 月（寒假）"></a>$\text{2023}$ 年 $1\sim 2$ 月（寒假）</h1><p>春季赛的最后一个准备长周期，同时春季赛过后不久就是省选联考，那么这段时间到底应该做些什么？列一个小小的计划。</p>
<p>首先关于知识点梳理的工作一定是要做好的，<strong>并不推荐题海战术</strong>，再多的题目不如能够自己通过思考总结方法，但是该做的题目数量还是需要，这里使用的是校内的题单。要撰写或修改的学习笔记和对应知识列在下面，供参考。</p>
<table>
<thead>
<tr>
<th align="center">算法知识点 $\texttt{Algorithms}$</th>
<th align="center">学习笔记链接 $\texttt{Links}$</th>
<th align="center">状态 $\texttt{Status}$</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Hash 算法</td>
<td align="center">$\texttt{——}$</td>
<td align="center">未撰写</td>
</tr>
<tr>
<td align="center">KMP&#x2F;AC 自动机</td>
<td align="center"></td>
<td align="center">已完成</td>
</tr>
<tr>
<td align="center">线段树合并</td>
<td align="center">$\texttt{——}$</td>
<td align="center">未撰写</td>
</tr>
<tr>
<td align="center">有向图强联通分量&#x2F;无向图割点割边</td>
<td align="center"></td>
<td align="center">已完成</td>
</tr>
<tr>
<td align="center">后缀数组</td>
<td align="center"></td>
<td align="center">待完善</td>
</tr>
<tr>
<td align="center">点分治</td>
<td align="center"></td>
<td align="center">待完善</td>
</tr>
<tr>
<td align="center">网络流</td>
<td align="center">$\texttt{——}$</td>
<td align="center">未撰写</td>
</tr>
</tbody></table>
<p>如果有时间的话还会再去学习一些东西。</p>
<p>接下来我想在寒假 vp 几场 Edu 比赛，不多，大概 $3$ 场，希望看看有没有用上新学知识过题的机会，毕竟这种感受还挺好的。</p>
<p>最后就是一些额外提升自己的内容，不过除了学习新算法外暂时还没有想到，有点难绷。</p>
]]></content>
  </entry>
  <entry>
    <title>Hexo 博客主题开发</title>
    <url>/2022/04/10/Hexo-%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<p>这是一项大工程。。。工程量预计 $\text{40 hours+}$ </p>
<p>目标：创建一个主要为自己 Hexo 博客的主题 $\text{hexo-theme-MeaningLessNess}$ 并记录开发过程。</p>
<p>大部分的内容看起来会比较枯燥。。。不知道能不能坚持做下去</p>
<h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><p><a href="https://hexo.io/zh-cn/docs/themes">主题 | Hexo</a></p>
<p>在创建之前，我们需要了解一个 $\text{Hexo}$ 主题 $\text{Theme}$ 文件夹的构成。</p>
<p>打开默认主题 $\text{\Blog\themes\landscape}$，找到四个文件夹和一个文件：</p>
<ul>
<li>$\text{lanauages:}$ 语言</li>
<li>$\text{layout:}$ 页面布局</li>
<li>$\text{script:}$ $\text{Hexo}$ 脚本</li>
<li>$\text{source: }$ 主题资源文件，包括页面样式，脚本，字体等</li>
<li>$\text{_config.yml:}$ 主题配置文件（由于 $\text{\Blog}$ 目录下也有一个 $\text{_config.yml}$，为了区分我们叫主题内的为主题配置文件，主目录下叫博客配置文件）</li>
</ul>
<h1 id="创建主题"><a href="#创建主题" class="headerlink" title="创建主题"></a>创建主题</h1><p>在 $\text{\Blog\themes}$ 目录下创建一个名为 $\text{hexo-theme-example}$ 的文件夹，将上述部分先加入到主题文件夹中。</p>
<p>注意，后文的主题文件夹名为 $\text{hexo-theme-MeaningLessNess}$。</p>
<p>记得将主题配置文件中的主题改为制作的主题。</p>
<img src="https://s2.loli.net/2022/04/10/NfhTMcyz4BuPGlr.png" alt="Hexo-博客主题开发-01.png" style="zoom: 67%;" />

<h1 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h1><p>学习一下 $\text{HTML},\text{CSS},\text{JavaScript}$ 等的使用，也可以边做边学。</p>
<h1 id="空白主题的基本配置"><a href="#空白主题的基本配置" class="headerlink" title="空白主题的基本配置"></a>空白主题的基本配置</h1><p>我们先来简单的布置一些主站界面。</p>
<p>我们在 $\text{\hexo-theme-MeaningLessNess\layout}$ 路径放入三个文件：</p>
<ul>
<li>$\text{post.ejs:}$ 每一篇单独文章的模板。</li>
<li>$\text{post_entry.ejs:}$ 主页上文章列表中每一项的模板。</li>
<li>$\text{index.ejs:}$ 是唯一必不可少的，是网站主页的模板。如果少了 $\text{index.ejs}$ 会报错。</li>
</ul>
<p>在 $\text{\layout\index.ejs}$ 中，放入如下代码：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content-type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0, maximum-scale<span class="token punctuation">=</span>1.0, user-scalable<span class="token punctuation">=</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello World.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
</code></pre>
<p>运行后可以得到：</p>
<img src="https://s2.loli.net/2022/04/10/uGXYKAb2QvzDx5e.png" alt="Hexo-博客主题开发-02.png" style="zoom: 33%;" />

<p>对了，这里我发现不要用记事本去编辑中文内容，可能会产生乱码，于是我采用了编程软件编辑，果然能打印中文字体了。</p>
<p>现在我们需要使用一个 <code>partial()</code> 函数包含其它文件，这样能使我们更好的组织代码。</p>
<p>我们在 $\text{\layout}$ 目录下建立 $\text{_partial}$  文件夹，用于存放一些部分的布局文件，这样我们可以在 $\text{\layout\index.ejs}$ 等文件中直接使用。</p>
<p>在 $\text{_partial}$ 文件夹中，我们可以放置如下文件：</p>
<ul>
<li>$\text{header.ejs:}$ 页首文件</li>
<li>$\text{footer.ejs:}$ 页脚文件</li>
<li>$\text{sidebar.ejs:}$ 侧边栏文件</li>
</ul>
<p>比如我在 $\text{\layout_partial\header.eps}$ 中写入：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Welcome.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
</code></pre>
<p>在 $\text{\layout\index.eps}$ 中稍作修改：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content-type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0, maximum-scale<span class="token punctuation">=</span>1.0, user-scalable<span class="token punctuation">=</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>WyyOIer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    &lt;%- partial('_partial/header') %>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>qwq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
</code></pre>
<p>即可看到主站界面变为：</p>
<img src="https://s2.loli.net/2022/04/11/ELTym8pFXNczloG.png" alt="Hexo-博客主题开发-03.png" style="zoom:33%;" />

<p>也就是在加载 $\text{indes.ejs}$ 的 <code>&lt;%- partial(&#39;_partial/header&#39;) %&gt;</code> 时，自动将 $\text{\layout_partial\header.ejs}$ 中的内容放置在代码中，对后续操作和检查十分方便，而 <code>partial()</code> 函数可以传参，具体操作和效果深入修改时再说。</p>
<h1 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h1><p>在配置主题之前，先进行一些小小的设计，让后续的编写更有目标性。</p>
<p>参考了一些官网的主题。 <a href="https://hexo.io/themes/">Themes | Hexo</a> </p>
<h1 id="正式制作"><a href="#正式制作" class="headerlink" title="正式制作"></a>正式制作</h1><h2 id="文章-text-post"><a href="#文章-text-post" class="headerlink" title="文章 $(\text{post})$"></a>文章 $(\text{post})$</h2><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>主要希望实现显示文章的一级标题、二级标题、三级标题所组成的目录表格，并且点击后能够自动跳转到相应位置。</p>
<p>由于需要用到 $\text{JavaScript}$，借鉴了一下其他人的代码，但始终无效。</p>
<p>检查后发现，代码中有这样一句话：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> labelList <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#article"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>打开浏览器的检查页面，发现了如下报错信息：</p>
<p><img src="https://s2.loli.net/2022/05/06/YZy1DqveIQdBaNb.png" alt="Hexo-博客主题开发-06.png"></p>
<p>百度发现后，需要引用 $\text{JavaScript}$ 的 $\text{jQuery}$ 库，可以从网上下载，也可直接使用在线文件。</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://code.jquery.com/jquery-3.6.0.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
</code></pre>
<p>再次刷新后发现已能正常显示。</p>
<h3 id="代码块高亮"><a href="#代码块高亮" class="headerlink" title="代码块高亮"></a>代码块高亮</h3><p>采用的是 $\text{hexo-prism-plugin}$ 插件。</p>
<p>安装方法：</p>
<pre><code>hexo i -S hexo-prism-plugin
</code></pre>
<p>然后在博客配置文件中加入：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">prism_plugin</span><span class="token punctuation">:</span>
  <span class="token key atrule">mode</span><span class="token punctuation">:</span> <span class="token string">'preprocess'</span>
  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'default'</span>
  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  <span class="token key atrule">custom_css</span><span class="token punctuation">:</span>
</code></pre>
<p>就可以实现代码块高亮，记得还要把自带的 <code>highlight</code> 和 <code>prismjs</code> 的 <code>enable</code> 设为 <code>false</code>。</p>
<p>高亮主题可以自行设计，加到 $\text{\node_modules\prismjs\themes}$ 目录下即可。</p>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>在每个链接后添加 <code>fa fa-link</code> 图标，如： <a href="/">link</a></p>
<p>我们可以使用 <code>::after</code> 伪元素为某个元素添加类似后缀的东西，注意 <code>content</code> 中不能插入图片，于是去 $\text{font-awesome.css}$ 中找到了 <code>fa fa-link</code> 的图标，用 <code>\f08e</code> 表示，故在 $\text{main.css}$  放入如下代码：</p>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#article</span> a<span class="token pseudo-element">::after</span> </span><span class="token punctuation">{</span>
   <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">' \f08e '</span><span class="token punctuation">;</span>
   <span class="token property">font-family</span><span class="token punctuation">:</span> FontAwesome<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>然后发现，不仅正常的链接被显示，所有的大标题前也都有链接，这是因为在添加标题标签时自动补充的链接。</p>
<img src="https://s2.loli.net/2022/05/11/BJSpDh8HdYX1ZLk.png" alt="Hexo-博客主题开发-10.png" style="zoom: 67%;" />

<p>我们发现每个小标题都有一个叫 <code>headerlink</code> 的 <code>class</code>，所以在 $\text{main.css}$ 中补充：</p>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#article</span> a<span class="token class">.headerlink</span><span class="token pseudo-element">::after</span> </span><span class="token punctuation">{</span>
    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>这样即可让小标题前不显示链接标记。</p>
<h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>因为图片有时不易被发现，所以希望实现在每个图片下都有一个 <code>fa fa-image</code> 加图片名称的显示。</p>
<p>这次自己实现了一个 $\text{JavaScript}$。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> labelList <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#article"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> imgList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'labellength: '</span> <span class="token operator">+</span> labelList<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>


<span class="token keyword">function</span> <span class="token function">dfs</span><span class="token punctuation">(</span>ulist<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> ulist<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ulist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span>ulist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            imgList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>node<span class="token punctuation">:</span> <span class="token function">$</span><span class="token punctuation">(</span>ulist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> alt<span class="token punctuation">:</span> ulist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>alt<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">var</span> vlist <span class="token operator">=</span> ulist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>vlist<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">dfs</span><span class="token punctuation">(</span>vlist<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token function">dfs</span><span class="token punctuation">(</span>labelList<span class="token punctuation">)</span><span class="token punctuation">;</span>

imgList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>image<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    image<span class="token punctuation">.</span>node<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token string">'&lt;p class = image-name>'</span> <span class="token operator">+</span> image<span class="token punctuation">.</span>alt <span class="token operator">+</span> <span class="token string">'&lt;/p>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'res: '</span> <span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>学过算法的应该能理解吧，这里主要说几个内置函数：</p>
<ul>
<li><code>$(name).is(&quot;elementname&quot;)</code>：可以理解为判断某个 <code>html</code> 语言是否为这个元素。</li>
<li><code>name.node.after(html)</code>：在某个元素后插入一段 <code>html</code> 语言。</li>
<li><code>console.log(...)</code>：将一些东西输出到 <code>F12</code> 的控制台。</li>
</ul>
<p>也不知道能不能这么说，完全是自己的理解。</p>
<p>这样我们就能实现图片后添加图片名称，但前提是你需要在写文章引用图片时，保留图片名。</p>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>还有一些零零碎碎的细节，不作过多介绍，请参见 <a href="/css/main.css">main.css</a> 的 $\text{post.ejs}$ 部分。</p>
<h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><p>安装插件清单：</p>
<ul>
<li>$\text{hexo-deployer-git}$</li>
<li>$\text{hexo-prism-plugin}$</li>
<li>$\text{hexo-generator-index-pin-top}$</li>
<li>$\text{hexo-blog-encrypt}$</li>
<li>$\text{hexo-hide-posts}$</li>
<li>$\text{hexo-generator-searchdb}$</li>
</ul>
<h1 id="text-More-Tips"><a href="#text-More-Tips" class="headerlink" title="$\text{More Tips}$"></a>$\text{More Tips}$</h1><ol>
<li><p>$\text{Font Awesome}$</p>
<blockquote>
<p>Font Awesome 字体为您提供可缩放矢量图标,它可以被定制大小、颜色、阴影以及任何可以用CSS的样式。</p>
</blockquote>
<p>使用方法：</p>
<p>在<a href="http://www.fontawesome.com.cn/">Font Awesome 中文网 – | 字体图标</a>中下载文件，解压出文件夹，拷出当中的 $\text{css}$ 和 $\text{font}$ 文件夹，然后放在主题文件夹中的某个位置。</p>
</li>
<li><p>$\text{Hexo}$ 部署至 $\text{github}$</p>
<p>通过 <code>hexo g -d</code> 指令部署，即可将本地文件上传至 $\text{github}$ 仓库。在传取少量主题个性图片时，可以将图片放在 $\text{\hexo-theme-MeaningLessNess\source\images}$ 中，部署后可以通过 $\text{url&#x2F;images&#x2F;name.*}$ 访问。如将我的博客网站图标以 $\text{favicon.ico}$ 存在上述路径中，则访问时可以通过 <a href="https://wyy-oier.github.io/images/favicon.ico">https://wyy-oier.github.io/images/favicon.ico</a> 访问。</p>
</li>
<li><p><code>Hexo g</code> 指令生成缺少 $\text{index.html}$ 等主要文件</p>
<p>生成文件或者部署到本地时，不包含 $\text{index.html}$ 文件，导致了博客无法正常加载。</p>
<img src="https://s2.loli.net/2022/05/05/XgLvGF7Thusjmc6.png" alt="Hexo-博客主题开发-04.png" style="zoom: 67%;" />

<p>解决方案：我采用了暴力方法，直接 <code>hexo init</code>。重新 <code>hexo g</code> 和 <code>hexo d</code>，果然就有相应的文件了。</p>
<img src="https://s2.loli.net/2022/05/05/KpsDeFY7MhTowxB.png" alt="Hexo-博客主题开发-05.png" style="zoom:67%;" />

<p>再把主题复制回去，即可修复成功。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>校内膜你赛精选题</title>
    <url>/2022/04/02/%E6%A0%A1%E5%86%85%E8%86%9C%E4%BD%A0%E8%B5%9B%E7%B2%BE%E9%80%89%E9%A2%98/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="988f9d557205e4a709566679d6b589c60c37045ce6b6836cf444e3c46b9e838a"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">在此输入密码,按回车键确定。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>NOIP2022 同步赛游记</title>
    <url>/2022/09/18/NOIP2022-%E5%90%8C%E6%AD%A5%E8%B5%9B%E6%B8%B8%E8%AE%B0/</url>
    <content><![CDATA[<p>从 $\text{CSP2022-S1}$ 至 $\text{NOIP2022}$ 的大型连载记录，部分内容与<a href="/2022/08/27/2022-2023-OI%E8%B5%9B%E5%AD%A3/">2022-2023 OI赛季</a>重合。</p>
<h1 id="text-Day-82"><a href="#text-Day-82" class="headerlink" title="$\text{Day -82}$"></a>$\text{Day -82}$</h1><p>$\text{CSP-S}$ 初赛。</p>
<p>考场上不会 $-k$ 进制转换，一道大题喜提 $-10$。</p>
<h1 id="text-Day-73"><a href="#text-Day-73" class="headerlink" title="$\text{Day -73}$"></a>$\text{Day -73}$</h1><p>出分了，$74.5$，果然垫底。</p>
<p>希望 $\text{CSP-S}$ 有好的发挥。</p>
<h1 id="text-Day-41-赛时"><a href="#text-Day-41-赛时" class="headerlink" title="$\text{Day -41}$ 赛时"></a>$\text{Day -41}$ 赛时</h1><p>$\text{CSP-S}$ 复赛。</p>
<p>考试地点在从未去过的中关村科学城四季科创中心·鲨鱼空间，考前教练给我们看了，几百台笔记本电脑，两人连在一起，中间加个隔板。</p>
<p><del>真就 NOI 迫真体验。</del></p>
<p>中午看了眼 $\text{J}$ 组题目，秒了 $\text{T4}$，感觉今年的题目要变得简单。</p>
<p>大概 $13:40$ 到了场外，与小学同学 $\text{smallfang}$ 见面，准备去这个科创中心的内部转转。<del>结果还被同学喊考场不是在下面进入。</del></p>
<p>交流了一些毒奶就进考场了。</p>
<p>进去之后，果然如教练所说，笔记本电脑的键盘手感很差，我在段考临近的压力下强制自己进入比赛状态。</p>
<p>学校教练也来监考了，居然还看到五六和初一年级在课外机构上课的信息老师。</p>
<p>$14:20$</p>
<p>发题。</p>
<p>$5$ 分钟浏览了所有题目，没读懂 $\text{T3,T4}$，回来想 $\text{T1}$，并在 $14:30$ 的时候感觉自己会了 $\text{T1}$。</p>
<p>$14:40$</p>
<p>“草，怎么要求 $4$ 个景点互不相同，****”。</p>
<p>$15:00$</p>
<p>感觉怎么算都会重复，先开 $\text{T2}$。</p>
<p>$\text{T2}$ 花 $5$ 分钟推了 $8$ 种情况，写了 $8$ 个 st 表，半个小时码完，一测样例 $1$，挂了。</p>
<p>发现其中的一种情况判错，改完之后，过了样例 $1$，再测样例 $2$，又挂了。</p>
<p>输出调试后，发现错误的是两人选择都有正有负的情况，这时答案有两种可能，应取它们的 $\max$，我取的 $\min$，赶快改了，改完过了样例 $2,3,4$。</p>
<p>$15:50$</p>
<p>回去看看 $\text{T1}$。</p>
<p>发现我可以从 $1$ 景点先向外枚举 $2$ 个点，我很容易的可以保证 $1$ 和枚举的两个点这三个点互不相同。</p>
<p>找到所有的 $1\rightarrow i\rightarrow j$ 后，我们枚举 $j_1,j_2$，然后我们尝试找到 $1\rightarrow i_1\rightarrow j_1\rightarrow j_2\rightarrow i_2\rightarrow 1$ 最大的代价。</p>
<p>发现 $1\neq i_1\neq j_1,1\neq i_2\neq j_2$，考虑记录 $mx_j$ 表示使得 $s_i+s_j$ 合法且值最大的下标 $i$。</p>
<p>发现只记最大值不够，然后再记一个次大值，所有合法情况贡献到答案，写完，开冲！</p>
<p>我一测，原来是样例 $1$ 挂了。</p>
<p>我说怎么回事？原来是 $(i,j)$ 之间的距离不超过 $k+1$ 就行而不是 $k$，改了一下，然后就挂了样例 $3$，比答案大 $2$。</p>
<p>发现点对应该有序，稍微改了一下，就过了 $3$ 个样例。</p>
<p><del>没错，上述的做法是错误的，但是到目前为止还没有发现</del></p>
<p>$16:20$</p>
<p>想了一会 $\text{T4}$，$10$ 分钟后发现不会。于是在 $\text{T4}$ 暴力和 $\text{T1}$ 对拍之间做起了抉择。</p>
<p>先去写 $\text{T1}$ 对拍。</p>
<p>造数据的时候，不知道怎么造一个连通图，于是随了远大于点数的边数的点对连边。</p>
<p>省去了一些调试部分，一拍，挂了！</p>
<p>手玩了一下 hack 数据找到问题，需要记录最大、次大和第三大，然后枚举了 $3\times3$ 的情况取最大值，就过拍了。</p>
<p>$17:10$</p>
<p>接下来再打 $\text{T4}$ 暴力。</p>
<p>先写了 $k&#x3D;1$ ，比较简单，手造了组小数据过了。</p>
<p>然后写 $\mathcal{O}(n^2)$ 动态规划，写完后大样例 $2$ 挂了，发现 $k&#x3D;3$ 有可能出链，于是加一维表示出链的距离，写这个花费了大量时间，调过后居然快 $18:00$ 了。</p>
<p>$18:00$</p>
<p>粗算了一下现在的情况：打了 $100+100+0+52$，其中 $\text{T1}$ 基本上确保正确性，$\text{T2}$ 并不确保正确性，$\text{T4}$ 也并不确保正确性，我并不想半小时速通一个连题都还没看懂的暴力（但是这题的暴力分确实很多），最后开始写很容易挂的 $\text{T2}$ 的对拍，赌一手 $\text{T1,T2}$ 挂的人比较多的可能性，用 $\text{T3}$ 的暴力分换取别人 $\text{T1,T2}$ 挂分，<del>只能说相信计算机协会数据。</del></p>
<p>$18:20$</p>
<p>$\text{T2}$ 拍上了，祈祷不要挂拍。</p>
<p>最后编译了所有提交的程序，检查了输入输出文件名以及数组大小，空间等问题，等待比赛结束。</p>
<p>$18:30$</p>
<p>$\text{T2}$ 没有挂拍。</p>
<h1 id="text-Day-41-赛后"><a href="#text-Day-41-赛后" class="headerlink" title="$\text{Day -41}$ 赛后"></a>$\text{Day -41}$ 赛后</h1><p>与 $\text{smallfang}$ 交流了一下，Ta 好像一直深受 $\text{T2}$ 困扰，调的比较久，但最后还是把 $\text{T1,T2}$ 切出来了。</p>
<p>但是最后 $\text{T1}$ 好像写挂了，悲。</p>
<p>看起来 $300+$ 的人很多？希望名次能好看一些。</p>
<p>预估得分：$100+100+0+52&#x3D;252$</p>
<p>洛谷：$100+100+0+36&#x3D;236$，$k&#x3D;3$ 的挂了。</p>
<p>最后来一个 $\text{CSP-S}$ 总结：</p>
<ul>
<li>毕竟放上来了所以自认为考的还能看。</li>
<li>$\text{T1}$ 与 $\text{T2}$ 求稳写了对拍，我认为还是一个比较正确的行为，但问题出现在了思考做法和实现的速度上，我的 $\text{T1}$ 和 $\text{T2}$ 光是在拍前所用的时间大约就已有 $100\min$，加上对拍和挂拍后的调试接近 $150\min$，而考试一共只有 $240\min$，给我 $\text{T3}$ 和 $\text{T4}$ 决策暴力的自由度降低了很多，所以接下来在联赛前就还是要提升自己的思考能力和实现速度，不要出现过长卡壳的情况。</li>
<li>语文阅读提取信息能力要加强。</li>
</ul>
<p><strong>不管怎么说，</strong>$\text{CSP-S}$ <strong>有分就行</strong>。$\text{NOIP}$ 加油。</p>
<h1 id="text-Day-39"><a href="#text-Day-39" class="headerlink" title="$\text{Day -39}$"></a>$\text{Day -39}$</h1><p>盲猜一波 $6$ 级线 $150$，$7$ 级线 $220$。</p>
<h1 id="text-Day-38"><a href="#text-Day-38" class="headerlink" title="$\text{Day -38}$"></a>$\text{Day -38}$</h1><p>今天讲了正解，才知道暴力 dp 其实可以拿 $76$。</p>
<p>特殊性质的测试点的期望复杂度为 $\mathcal{O}(n\log n)$，而给的样例 $4$ 刚好为 $k&#x3D;3$，有特殊性质的，我以为跑不动，如果跑了就能找到错误，然后就能 $36\rightarrow76$，血亏无比。</p>
<p>正解是树剖优化 dp 转移，其实就是我想的 dp 状态套矩阵乘法。</p>
<h1 id="text-Day-25"><a href="#text-Day-25" class="headerlink" title="$\text{Day -25}$"></a>$\text{Day -25}$</h1><p>出分，$100+100+0+32&#x3D;232$，真就又低于民间数据 $4$ 分。</p>
<p>我们来看看这次比赛的顶尖数据：</p>
<ul>
<li>$\text{T1}$ 不开 <code>long long</code> 可以得到 $100$ 分。</li>
<li>$\text{T1}$ 写了假算法可以得到 $100$ 分。</li>
<li>$\text{T3}$ 暴力输出 <code>NO</code> 获得 $45$ 分。</li>
<li>$\text{T3}$ 的正常暴力可以获得 $65$ 分。</li>
</ul>
<p>如果 $\text{NOIP}$ 的数据强度也是如此严格的话，那我一定要在考前加紧学模拟退火。</p>
<p>不出意外的话，$6$ 级线和 $7$ 级线大概向上平移 $30$。</p>
<h1 id="text-Day-8"><a href="#text-Day-8" class="headerlink" title="$\text{Day -8}$"></a>$\text{Day -8}$</h1><p>更新，$6$ 级线 $183$，$7$ 级线 $240$。</p>
<p>大预言家。</p>
<h1 id="text-Day-5"><a href="#text-Day-5" class="headerlink" title="$\text{Day -5}$"></a>$\text{Day -5}$</h1><p>$\text{BJ}$ 都改成了线上课，<del>有了充足的机会偷卷。</del></p>
<p>希望 $\text{NOIP}$ 不要寄。</p>
<h1 id="text-Day-2"><a href="#text-Day-2" class="headerlink" title="$\text{Day -2}$"></a>$\text{Day -2}$</h1><p>实锤了，$\text{NOIP}$（北京赛区） 取消实锤了。</p>
<p>不过这并不会影响我追随算法竞赛的脚步！我还会全力以赴地投入到学习之中，希望对于算法竞赛的热爱还能照亮我的路途。</p>
<p>标题由 “NOIP2022 游记” 改为 “NOIP2022 同步赛游记”。</p>
<p><a href="https://www.noi.cn/xw/2022-11-23/779144.shtml">https://www.noi.cn/xw/2022-11-23/779144.shtml</a></p>
<p>当然举办不了联赛的省也并不是丢掉了整个赛季的机会，我们伟大的计算机协会还有春季赛！当然这些要建立在疫情正常的情况下。</p>
<p>所以现在还不用过于悲观，不妨想些有意思的，无奖竞猜：$3$ 月的春季赛的英文名会叫啥？</p>
<p>我先来：$\text{NOIs}$！</p>
]]></content>
      <categories>
        <category>比赛游记</category>
      </categories>
  </entry>
  <entry>
    <title>OI idea(s)</title>
    <url>/2022/07/29/OI-idea-s/</url>
    <content><![CDATA[<p>想把 OI 中的方法论总结一下，包括一些常见套路和有意思的 idea，并包括深度理解。</p>
<h1 id="矩阵乘法"><a href="#矩阵乘法" class="headerlink" title="矩阵乘法"></a>矩阵乘法</h1><img src="https://s2.loli.net/2022/08/06/GPzijIWxcQq3AuN.png" alt="image.png" style="zoom:50%;" />

<p>矩阵乘法主要用于优化数列或状态的递推。设矩阵大小为 $n\times n$，那么求 $T$ 时刻的局面就是 $\mathcal{O}(n^3\log T)$。如果有 $q$ 次询问，可以预处理所有 $2$ 的整数次幂的矩阵，然后采用一维向量乘矩阵得到答案，复杂度从 $\mathcal{O}(qn^3\log T)$ 优化至 $\mathcal{O}(n^3\log T+qn^2\log T)$。</p>
<p>注意矩阵乘法优化 $dp$ 要保证<strong>每个阶段的转移形式完全相同</strong>。</p>
<h2 id="运算形式"><a href="#运算形式" class="headerlink" title="运算形式"></a>运算形式</h2><p>矩阵乘法一般是两种运算形式叠加使用，记运算符号 $mat(\times,+)$ 的转移形式为：</p>
<p>$res.num_{i,j}+&#x3D;num_{i,k}\times A.num_{j,k}$ </p>
<p>对于运算符号有如下要求：</p>
<ol>
<li>第一种运算满足交换律；</li>
<li>第一种运算满足结合律；</li>
<li>第一种对第二种运算满足分配率。</li>
</ol>
<p>下面列举几种常见符号组合。</p>
<p>$mat(\times,+)$：路径计数</p>
<p>$mat(+,\max)$：最长路</p>
<p>$mat(+,\min)$：最短路</p>
<p>$mat(\text{&amp;},|)$：判图连通</p>
<h2 id="题面形式"><a href="#题面形式" class="headerlink" title="题面形式"></a>题面形式</h2><p>状态很少 $(n-300)$，最终所求数列的项数很大 $(T-10^{18})$，每个位置的转移方式相同，比如有递推公式或<strong>对于每个阶段固定的转移方程</strong>。</p>
<p><a href="https://www.luogu.com.cn/problem/P1613">P1613 跑路</a> $n\le 50,T\le 10^{18}$ ，且每个点的转移方式相同，用 $mat(\text{&amp;},|)$ 判是否连通，然后跑 floyd。</p>
<p><a href="https://www.luogu.com.cn/problem/P6569">P6569 [NOI Online #3 提高组] 魔法值</a> $n\le100,T\le 2^{32}$，对于每个点的转移，在每一个时刻都只跟它周围点的状态有关，记 $mat_{u,v}$ 表示 $u,v$ 之间是否有边，有边为 $1$，没边为 $0$，写一个 $mat(\text{&amp;},\oplus)$ 矩阵运算再用 $2$ 的整数次幂预处理矩阵优化询问即可。</p>
<p><a href="https://www.luogu.com.cn/problem/P6772">P6772 [NOI2020] 美食家</a> 拆点构建矩阵，用 $mat(\times,\max)$ 运算，时间复杂度 $O((5n)^3\log T)$。</p>
<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><p>排序的本质：交换逆序对的过程。</p>
<p>一个位置可以被“排序”的充分必要条件：存在关于这个位置的逆序对。</p>
<p><a href="https://www.luogu.com.cn/problem/CF1136D">CF1136D Nastya Is Buying Lunch</a> 可以看作每一对 $(u,v)$ 都是一对可进行相邻交换的逆序对，找到最后一个人 $x$ 能够交换的逆序对 $(y,x)$，当且仅当 $y\sim x$ 之间的一段前缀（可以为空）是 $y$ 的逆序对，后缀（可以为空）是 $x$ 的逆序对，否则就会成为一个对 $y$ 之前的元素的一个阻碍。</p>
<p><a href="https://www.luogu.com.cn/problem/CF1187D">CF1187D Subarray Sorting</a> 考虑 $A$ 换到 $B$ 的充分必要条件。<strong>（往往这一步最难）</strong>我们去考虑排序的本质，能<strong>删</strong>逆序对，那么如果 $B$ 存在的逆序对 $A$ 中没有，那么 $A$ 就<strong>不能加</strong>逆序对到 $B$，那么这就是 <code>YES</code> 的一个必要条件。充分性的证明即我们是否能对于上述情况，能否找到一个操作保证换掉 $B$ 中没出现的逆序对。考虑一种操作方案：从后往前做，对于当前的数，做一遍冒泡排序消除所有不在 $B$ 的逆序对。</p>
<p>所以我们考虑是否会出现这样一种情况：是否在当前的数后有一个位置构成的逆序对出现在 $B$，但之后又出现了一个不出现在 $B$ 的逆序对？（也就是我必须先消除前面在 $B$ 的逆序对，才能消除后面不在 $B$ 的逆序对从而不合法，如果不存在这种情况，那么冒泡就是对的）</p>
<p>首先，不妨设当前的数为 $x$，后面那个出现在 $B$ 中的逆序对为 $y$，不出现在 $B$ 中的逆序对为 $z$，也就是如下的一种局面：</p>
<img src="https://s2.loli.net/2022/08/10/42ResEVF7XCQ8OB.jpg" alt="CF1187D Subarray Sorting-01.jpg" style="zoom:80%;" />

<p>不难发现，当且仅当 $y&lt;z&lt;x$ 时不能采用上述做法，但是最后我们要排成 $z-x-y$ 的形式，这样我们就多了一个 $(z,y)$ 逆序对，所以这种在必要的时候就被判掉了。那么我们也成功的说明了上述的必要条件有恰当的构造方法使得称为 $B$ 序列，变为了充分必要条件，至于最后的判断，属于技术问题，留作口胡。（提示：对于一个数 $x$ 维护其后面的逆序对集是否包含于这个数在 $B$ 中对应的逆序对集）</p>
<h2 id="插旗法"><a href="#插旗法" class="headerlink" title="插旗法"></a>插旗法</h2><p>可以对于一个环上顺序置换最优解问题，从 $n$ 个人到 $n$ 个位置的问题转化成了 $n$ 个旗子到 $1$ 个位置的问题。</p>
<p><a href="https://www.luogu.com.cn/problem/P1053">P1053 [NOIP2005 提高组] 篝火晚会</a> </p>
<p>由于不同的环只有 $2n$ 个，枚举每种环，考虑有多少人不在最终局面的位置上，所有取最小即可，复杂度 $\mathcal{O}(n^2)$。</p>
<p>我们不妨考虑，其实就是对于所有情况最小化初始局面和最终局面不在同一位置的人数。如果顺时针和逆时针分开考虑的话，其实就是 $n$ 个循环移位，<strong>循环移位不改变任意两点的相对位置</strong>，所以有了插旗法：首先我们找到 $1$ 的位置是对的最终局面，记为 $P$，然后看每个人从初始局面顺时针走多少步能走到最终局面的对应位置，然后我们就对这个步数的下标查一个旗，表示 $P$ 这个排列顺时针移动一定次数就会让这个插旗的人产生贡献，最后插旗最多的地方即为最优的最终局面，复杂度 $\mathcal{O}(n)$。</p>
<p><a href="https://www.luogu.com.cn/problem/U76006">U76006 环上游戏</a></p>
<p>这题还是从初始局面转移到 $2n$ 个最终局面的最优，先考虑顺时针，我们固定 $1$ 的初始位置就是最终局面的位置，记这个局面为 $P$，然后我们在 $i$ 后面 $(i-1)$ 个位置插一个旗，然后想象 $i$ 和旗子一块移动，这样达到最终局面后，所有旗子都到达了 $1$ 位置，现在我们就转化成了所有旗子到某个位置的最小总距离。（因为旗子的位置是与 $1$ 的相对位置，而 $1$ 的位置 $n$ 种任选）</p>
<p>这个有个贪心做法：枚举一个位置把圆切成两边，发现一定是把旗子都切在一边，所以就是把最长段给扔了。</p>
<p>时间复杂度 $\mathcal{O}(n)$。</p>
<h2 id="置换排序模型"><a href="#置换排序模型" class="headerlink" title="置换排序模型"></a>置换排序模型</h2><p>对于一个置换 $p$，以 $i\rightarrow p_i$ 连边，那么就是 $n$ 点 $n$ 边，且每点入度出度均为 $1$，也就是由若干个环组成的图。</p>
<p>考虑对于一个置换，最终的有序状态是 $n$ 个自环，而一次交换可以从一个环拿出一个数使其变为自环，那么操作数即为  $\sum\limits_{i&#x3D;1}^m sz_i-1&#x3D;n-m$，$m$ 为环的个数。</p>
<p><a href="https://www.luogu.com.cn/problem/P2127">P2127 序列排序</a> 加权的给置换排序的模型，对一个环拆成自环的时候，考虑两种决策：</p>
<ul>
<li>把全局最小先加入这个环中，然后把其它数给拿出去；</li>
<li>直接用环中的最小数把其它数拿出去。</li>
</ul>
<p>考虑环与环之间的决策互不影响，所以两种决策取最优即可。</p>
<p><a href="https://ac.nowcoder.com/acm/contest/5671">2020牛客暑期多校训练营（第六场）A</a></p>
<p><a href="https://www.luogu.com.cn/blog/BeWild/post-2020-niu-ke-shu-ji-duo-xiao-xun-lian-ying-di-liu-chang-post">https://www.luogu.com.cn/blog/BeWild/post-2020-niu-ke-shu-ji-duo-xiao-xun-lian-ying-di-liu-chang-post</a></p>
<h2 id="中位数"><a href="#中位数" class="headerlink" title="中位数"></a>中位数</h2><h3 id="山区建小学模型"><a href="#山区建小学模型" class="headerlink" title="山区建小学模型"></a>山区建小学模型</h3><p> $\sum\limits_{i&#x3D;1}^n|x-p_i|$ 或 $\sum\limits_{i&#x3D;1}^n|p_x-p_i|$ 的一般最值问题。取其中位数，可能会用不同的算法维护。</p>
<p><a href="https://www.luogu.com.cn/problem/P3644">P3644 [APIO2015] 八邻旁之桥</a> </p>
<p>一座桥就是朴素的山区建小学问题，把 $s$ 和 $t$ 都扔到数轴上取中位数算即可。</p>
<p>考虑如果有两座桥。每一个人有两个决策，选 $A$ 桥还是选 $B$ 桥。以桥为分界划分为三部分：</p>
<p><img src="https://s2.loli.net/2022/08/10/yF7AYwzLPfXvd5T.jpg" alt="P3644 _APIO2015_ 八邻旁之桥-01.jpg" style="zoom:67%;" />考虑如果某个人的起点在 $I$ 区或 $III$ 区，那么对于这个人，一定可以选靠近这个人起点 的桥，因为远离的桥不优。那么只需考虑如果一个人的起点和终点都在 $II$ 区的情况。</p>
<p>设两座桥的位置为 $x,y$ 且 $x&lt;y$，起点的位置为 $s$，终点的位置为 $t$。</p>
<img src="https://s2.loli.net/2022/08/10/oF2AZsRnB5tHIav.jpg" alt="P3644 _APIO2015_ 八邻旁之桥-02.jpg" style="zoom:67%;" />

<p>那么走 $A$ 桥优于 $B$ 桥，当且仅当：</p>
<p>$(s-x)+(t-x)&lt;(y-s)+(y-t)$</p>
<p>$\Rightarrow s+t&lt;x+y$</p>
<p>也就是对于所有 $s+t&lt;x+y$ 的人，都走 $A$ 桥，反之都走 $B$ 桥。也就是我们去枚举所有的断点 $s+t$，这样两边就是 $k&#x3D;1$ 的朴素山区建小学，我们动态维护两边的中位数，时间复杂度为 $\mathcal{O}(n\log n)$。</p>
<p><strong>（思考）</strong>在推出 $s+t&lt;x+y$，一直陷入一个误区：当我们枚举 $s+t$ 也就确定了 $x+y$，但可能两边所划分的中位数，也就是两座桥的具体位置不能为 $x+y$ 该如何解决？</p>
<p><strong>（解答）</strong>经过教练的指导，发现这个式子的意义是，我们找到了一种排序方式（按 $s+t$ 排序）使得对于小于 $x+y$ 的 $A$ 桥，大于 $x+y$ 的一定走 $B$ 桥，<strong>那么我们不再关心桥的具体位置，而是最优解的形式一定为以 $s+t$ 排序的前缀走 $A$ 桥，$s+t$ 的后缀走 $B$ 桥</strong>，这样两边山区建小学一定<strong>不会丢失最优解</strong>。</p>
<p><strong>（思想）</strong>对于一个要求较强的结论，考虑退而求其次是否更容易地使用。</p>
<h1 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h1><h2 id="冰红茶模型-x2F-排队模型"><a href="#冰红茶模型-x2F-排队模型" class="headerlink" title="冰红茶模型&#x2F;排队模型"></a>冰红茶模型&#x2F;排队模型</h2><p>在一个集合中进行若干次决策，对于每一次决策所选中的点，又会补充一个劣于当前解的后继（重点），这样每次必然是选择最优解，然后更新新后继，用优先队列维护。</p>
<p><a href="https://www.luogu.com.cn/problem/U130967">U130967 冰红茶(tea)</a> 冰红茶模型模板题。</p>
<p><a href="https://www.luogu.com.cn/problem/P1315">P1315 [NOIP2011 提高组] 观光公交</a> </p>
<p>考虑对第 $i$ 站使用加速器，影响了一段从第 $i$ 站开始，到之后的一站之间<strong>下车</strong>的人，记为 $p_i$。</p>
<p>如果使用加速器，一定会导致 $p_i$ 减小（到达 $p_i$ 站的时间更短），所以下次再选 $i$ 时答案变劣，所以冰红茶即可。</p>
<p>本题仍有用线段树优化贪心使复杂度变为 $\mathcal{O}(n\log n)$ 的做法，具体可见代码。</p>
<p><a href="https://www.luogu.com.cn/problem/P5283">P5283 [十二省联考 2019] 异或粽子</a> $n$ 个班排队模型的例题，省选也是有考这些基础算法的题的。</p>
<h2 id="相邻交换法"><a href="#相邻交换法" class="headerlink" title="相邻交换法"></a>相邻交换法</h2><p>相邻交换 yyds</p>
<p>使用相邻交换法的前提是推一个<strong>具有传递性</strong> $(a&lt;b,b&lt;c\Rightarrow a&lt;c)$ 的比较关系，排好序后即能轻易的得出一系列最优决策。</p>
<h3 id="拆-max-min-法"><a href="#拆-max-min-法" class="headerlink" title="拆 $\max,\min$ 法"></a>拆 $\max,\min$ 法</h3><p>$a&gt;\max(b,c)\Leftrightarrow a&gt;b\text{ and }a&gt;c$</p>
<p>$\max(b,c)&gt;a\Leftrightarrow b&gt;a\text{ or } c&gt;a$</p>
<p>$a&gt;\min(b,c)\Leftrightarrow a&gt;b\text{ or }a&gt;c$</p>
<p>$min(b,c)&gt;a\Leftrightarrow b&gt;a\text{ and }c&gt;a$</p>
<p><a href="https://www.luogu.com.cn/problem/P1080">P1080 [NOIP2012 提高组] 国王游戏</a></p>
<p>设前缀积 $mu_i&#x3D;\prod\limits_{j&#x3D;1}^i a_i$，那么每个人的金币数为 $\lfloor\dfrac{mu_{i-1}}{b_i}\rfloor$。</p>
<p>我们取出一个二元组 $(i,j)$，其中 $i&lt;j$，本题中并不能得出越靠后的大臣获得的金币越多的结论。</p>
<p>我们设 $1\sim i-1$  大臣左手的数的积为 $mu_1$，$i+1\sim j-1$ 大臣左手的数的积为 $mu_2$。</p>
<p>在 $i,j$ 交换前，$i$ 获得的金币数 $\lfloor\dfrac{mu_1}{b_i}\rfloor$，$j$ 获得的金币数 $\lfloor\dfrac{mu_1\cdot a_i\cdot mu_2}{b_j}\rfloor$。</p>
<p>在 $i,j$ 交换后，$i$ 获得的金币数 $\lfloor\dfrac{mu_1\cdot a_j\cdot mu_2}{b_i}\rfloor$，$j$ 获得的金币数 $\lfloor\dfrac{mu_1}{b_j}\rfloor$。</p>
<p>相邻交换法的常见套路，不妨设交换前的答案优于交换后的答案。</p>
<p>则有 $\max(\lfloor\dfrac{mu_1}{b_i}\rfloor, \lfloor\dfrac{mu_1\cdot a_i\cdot mu_2}{b_j}\rfloor)&lt;\max(\lfloor\dfrac{mu_1\cdot a_j\cdot mu_2}{b_i}\rfloor, \lfloor\dfrac{mu_1}{b_j}\rfloor)$。</p>
<p>其中下取整不影响答案，去掉后变为 $\max(\dfrac{mu_1}{b_i}, \dfrac{mu_1\cdot a_i\cdot mu_2}{b_j})&lt;\max(\dfrac{mu_1\cdot a_j\cdot mu_2}{b_i}, \dfrac{mu_1}{b_j})$。</p>
<p>用拆 $\max$ 法，$\Leftrightarrow \max(\dfrac{mu_1}{b_i}, \dfrac{mu_1\cdot a_i\cdot mu_2}{b_j})&lt;\dfrac{mu_1\cdot a_j\cdot mu_2}{b_i}\text{ or }\max(\dfrac{mu_1}{b_i}, \dfrac{mu_1\cdot a_i\cdot mu_2}{b_j})&lt;\dfrac{mu_1}{b_j}$</p>
<p>$\Leftrightarrow (①\dfrac{mu_1}{b_i}&lt;\dfrac{mu_1\cdot a_j\cdot mu_2}{b_i}\text{ and }②\dfrac{mu_1\cdot a_i\cdot mu_2}{b_j}&lt;\dfrac{mu_1\cdot a_j\cdot mu_2}{b_i})\text{ or }(③\dfrac{mu_1}{b_i}&lt;\dfrac{mu_1}{b_j}\text{ and }④\dfrac{mu_1\cdot a_i\cdot mu_2}{b_j}&lt;\dfrac{mu_1}{b_j})$</p>
<p>现在我们就把 $\max$ 拆成了两两的元素比较和逻辑运算，接下来我们来看看有没有显然成立或不成立的逻辑式。</p>
<p>不难发现，①式显然成立，④式显然不成立，这样我们神奇的发现：</p>
<p>$\Leftrightarrow ②\dfrac{mu_1\cdot a_i\cdot mu_2}{b_j}&lt;\dfrac{mu_1\cdot a_j\cdot mu_2}{b_i}$</p>
<p>$\Leftrightarrow a_i\cdot b_i&lt;a_j\cdot b_j$</p>
<p>没错，我们的得到了一个简单的式子，并且此式满足传递性，于是排序后得到的即为我们所求的最优解。</p>
<p><a href="https://www.luogu.com.cn/problem/P2123">P2123 皇后游戏</a></p>
<p>国王游戏的加强版，一个更难推的相邻交换。</p>
<p>本题可以得出越靠后的大臣奖金越多的结论。</p>
<p>这次我们用相邻两个人 $(i,j)$ 比较，其中 $j&#x3D;i+1$，设 $\sum\limits_{i&#x3D;1}^{i-1} a_i$ 为 $s$，那么在交换前 $c_j&gt;c_i$，$c_i&#x3D;\max(c_{i-1},s+a_i)+b_i$，$c_j&#x3D;\max(\max(c_{i-1},s+a_i)+b_i,s+a_i+a_j)+b_j$ ，交换后 $c_j&lt;c_i$，$c_j&#x3D;\max(c_{i-1},s+a_j)+b_j$，$c_i&#x3D;\max(\max(c_{i-1},s+a_j)+b_j,s+a_j+a_i)+b_i$。</p>
<p>不妨设交换前的答案不劣于交换后的答案，则有：</p>
<p>$\max(\max(c_{i-1},s+a_i)+b_i,s+a_i+a_j)+b_j\le\max(\max(c_{i-1},s+a_j)+b_j,s+a_j+a_i)+b_i$</p>
<p>$\Leftrightarrow \max(\max(c_{i-1},s+a_i)+b_i+b_j,s+a_i+a_j+b_j)\le\max(\max(c_{i-1},s+a_j)+b_j+b_i,s+a_j+a_i+b_i)$</p>
<p>$\Leftrightarrow \max(c_{i-1}+b_i+b_j,s+a_i+b_i+b_j,s+a_i+a_j+b_j)\le\max(c_{i-1}+b_i+b_j,s+a_j+b_i+b_j,s+a_i+a_j+b_i)$</p>
<p>两边的 $\max$ 中各有三个元素，拆起来麻烦怎么办？</p>
<p>考虑两边有相同的元素 $c_{i-1}+b_i+b_j$，那么证明一个结论：$\max(a,b)\le\max(a,c)\Rightarrow b\le c$。</p>
<ul>
<li>如果 $b\le c$，则已经满足条件；</li>
<li>如果 $b&gt;c$，那么 $b\le a$，交换后同样满足。</li>
</ul>
<p>综上可知结论成立。那么进行一步简化：</p>
<p>$\Rightarrow \max(s+a_i+b_i+b_j,s+a_i+a_j+b_j)\le\max(s+a_j+b_i+b_j,s+a_i+a_j+b_i)$</p>
<p>然后就可以进行愉快的拆 $\max$ 环节了！</p>
<p>$\Leftrightarrow \max(s+a_i+b_i+b_j,s+a_i+a_j+b_j)\le s+a_j+b_i+b_j\text{ or }\max(s+a_i+b_i+b_j,s+a_i+a_j+b_j)\le s+a_i+a_j+b_i$</p>
<p>$\Leftrightarrow (s+a_i+b_i+b_j\le s+a_j+b_i+b_j\text{ and }s+a_i+a_j+b_j\le s+a_j+b_i+b_j)\text{ or }(s+a_i+b_i+b_j\le s+a_i+a_j+b_i\text{ and }s+a_i+a_j+b_j\le s+a_i+a_j+b_i)$</p>
<p>$\Leftrightarrow (a_i\le a_j\text{ and }a_i\le b_i)\text{ or }(b_j\le a_j\text{ and }b_j\le b_i)$</p>
<p>上述条件并不满足传递性，所以我们尝试转化排序方式，使得 $\forall i,j\in [1,n],i&lt;j$，都能满足上述条件。</p>
<p>观察到 $\text{or}$ 的两边都有一个 $a$ 和 $b$ 一起的比较，那么我们尝试先按此分组。</p>
<p>如果 $a_i&lt;b_i$，分到 $1$ 组；</p>
<p>如果 $a_i&#x3D;b_i$，分到 $2$ 组；</p>
<p>如果 $a_i&gt;b_i$，分到 $3$ 组。</p>
<p>在 $1$ 组中的数，可以同时再去满足 $a_i&lt;a_j$，按 $a$ 升序排序，在 $2$ 组中的数，不满足上述条件，可以随意排序，在 $3$ 组中的数，可以同时再去满足 $b_j&lt;b_i$，按 $b$ 降序排序。</p>
<p>那么关键的问题是组与组之间的排序。这里给出排序方式：按 $1,2,3$ 组排序即可。</p>
<p>证明一下：如果想要证明上述排序方法成立，只需保证按此方法排序后 $\forall i,j\in [1,n],i&lt;j$，都能满足上述条件，由于组内已经满足，只需考虑组间。</p>
<p>考虑 $1$ 组和 $2$ 组，则有，$a_i\le b_i,a_j&#x3D;b_j$。假设可以交换，即不满足上述条件。若不满足条件，则 $a_i\le a_j$ 不能成立，即 $a_i&gt;a_j$，$b_j\le b_i$ 也不能成立，即 $b_j&gt; b_i$，整理条件可得矛盾。</p>
<p>其它情况同理，最终可以保证排序的正确性。</p>
<h2 id="贪心反悔"><a href="#贪心反悔" class="headerlink" title="贪心反悔"></a>贪心反悔</h2><p>一大常用的贪心套路。大体流程是优先满足时间较早的决策，在不能满足当前决策的情况下，在已选的决策集合中找到最不优的，然后替换。在正确性下，我们保证：每一次反悔操作不会使答案变劣。</p>
<p>解决的题目一般满足如下性质：</p>
<ul>
<li>题目有最优子结构性质（即无后效性）</li>
<li>容易维护决策的集合的性质（即可以方便的反悔）</li>
</ul>
<p><a href="https://www.luogu.com.cn/problem/P2209">P2209 [USACO13OPEN]Fuel Economy S</a></p>
<p>经典反悔贪心，因为每个加油站都可加无限多的油，想象油箱中每种价格的油是分层的，那么在到达每一个加油站的时候，用此加油站的油替换掉所有在油箱中价钱高于当前加油站价格的油，并把油箱加满，此过程即为反悔。在行走的过程中，优先消耗便宜的油，这样我们就维护了整个过程，到达终点后要把多的油退掉。</p>
<p>时间复杂度为 $\mathcal{O}(n\log n)$。</p>
<p>本题还有一个加强版，请见<a href="https://www.luogu.com.cn/problem/CF1238G">CF1238G</a>，此题中每一站的供应存在限制。</p>
<p><a href="https://www.luogu.com.cn/problem/CF865D">CF865D Buy Low Sell High</a></p>
<p>对于一个股票，在买入的时候我们可以看作无代价买入，只有卖出的时候才获得收益。</p>
<p>例如我们已经购入了价格为 $x$ 的股票，现在以 $y$ 的价格卖出，此时我们的收益获得了 $y-x$。</p>
<p>考虑我们如何进行反悔操作。对于价格为 $x$ 的股票，我们要将 $y$ 的价格卖出修改为以 $z$ 的价格卖出，即收益从 $y-x$ 变为 $z-x$，变化了 $z-y$。基于此，我们维护一个小根堆，对于当天的价格 $p$，我们首先将 $p$ 插入，代表原物品，如果 $p$ 还能大于堆中的最小值的话，那么我们就可以先获得 $p-q.top()$ 的代价，然后再次插入 $p$ 这个价格，代表可用作被反悔的物品，这样每次的购买就既有可能是对于原价买入物品的卖出，也有可能是已经被卖出物品的反悔操作。</p>
<p>一个问题：插入两次物品会不会出现不合法的情况，能不能只插入一次。</p>
<p>插入两次同一个物品的目标无非就是两个物品都有可能会用到，我们不妨分析两个物品都用到的情况。</p>
<p>对于一个股票在 $p_i$ 买入，在 $p_j$ 卖出，那么此时堆里存有两个 $p_j$，分别代表 “在 $p_i$ 买入，在 $p_j$ 卖出的决策”和“我有一个价值为 $p_j$ 的股票已经买入”，那么如果在 $p_k$ 的时候堆顶为 $p_j$（如果堆顶被弹出，下一个堆顶也是 $p_j$），我们首先拿出”在 $p_i$ 买入，在 $p_j$ 卖出的决策”，改为”在 $p_i$ 买入，在 $p_k$ 卖出的决策”，经此修改后，$p_j$ 就成为了一个既没有买也没有卖的元素，那么在下一次 $p_l$ 取出 $p_j$ 的时候，即为”在 $p_j$ 买入，在 $p_l$ 卖出的决策”，这样插入两次物品不仅能够保证合法，还是保留最优解的充分条件。</p>
<h2 id="超级钢琴模型"><a href="#超级钢琴模型" class="headerlink" title="超级钢琴模型"></a>超级钢琴模型</h2><p>超级钢琴其实类似冰红茶，最基础的情况，两两点之间有一个代价，求代价的最大值。一个点 $i$ 我们对应若干个决策区间，先预处理出区间中的与 $i$ 所得代价的最大值并记录位置 $p$，那么在选择这个之后，将当前的决策区间 $[l,r]$ 拆成 $[l,p-1]$ 与 $[p+1,r]$，因为 $p$ 是 $[l,r]$ 中的最大值，所以分成 $[l,p-1]$ 和 $[p+1,r]$ 后的答案一定要劣于 $p$，这就是一个冰红茶的过程。</p>
<p>此类题所有的特定条件：</p>
<ul>
<li>求一定点所构成的代价的最值</li>
<li>容易维护决策区间的最大值</li>
</ul>
<p>超级钢琴模型的运用灵活，作者见过的题不多，希望以后遇到后还能认真总结。</p>
<p><a href="https://www.luogu.com.cn/problem/P2048">P2048 [NOI2010] 超级钢琴</a></p>
<p><a href="https://www.luogu.com.cn/problem/U125195">U125195 大战杀马特(smart)</a></p>
<h2 id="时光倒流"><a href="#时光倒流" class="headerlink" title="时光倒流"></a>时光倒流</h2><p>时光倒流其实是一类经典的思想，具体是如果按正向时间不好维护决策的时候，看看倒序解决能不能有事半功倍的效果。</p>
<p>例如正序的删点维护连通性，我们可以改为倒序加点，这样就可以轻易的维护。</p>
<p>在贪心上，时光倒流有时也可以起到奇效。</p>
<p>适用的题为<strong>正序没有最优子结构性质但倒序有最优子结构性质</strong>的题目。</p>
<p><a href="https://www.luogu.com.cn/problem/P1954">P1954 [NOI2010] 航空管制</a></p>
<p>考虑按时间正序做需要维护删除操作，但显然删除并不好维护，那么考虑时光倒流变成加点，再将第二类限制反过来，用拓扑随便贪心做一下即可，复杂度 $\mathcal{O}(nm)$。</p>
<p><a href="https://www.luogu.com.cn/problem/P3826">P3826 [NOI2017] 蔬菜</a></p>
<p>正序我们同样需要维护讨厌的删除操作，如果改为倒序，“每天少 $x_i$ 单位蔬菜”就变成了“蔬菜从 $app_i$ 天开始每天多 $x_i$ 单位蔬菜”，然后我们就可以在每天贪心的取最大的 $m$ 个。</p>
<p>考虑现在求的答案是所有天数的答案，即 $ans_{100000}$，那么如何求其它天数 $1\sim 99999$。</p>
<p>不难发现，选择了售卖的菜之后，我可以随意的安排这些菜的售卖顺序，因为越往后菜越多，所以在前面的天数这些菜并不会消失，所以从第 $j$ 天推到第 $j-1$ 天时我们只要去掉最便宜的 $m$ 个菜就行。</p>
<p>注意可能在倒序做的时候有的天数可能卖不到 $m$ 个菜，但正序的时候由于这些售卖操作都可以理解为在前 $j$ 天的紧凑操作（即每天卖菜数不存在浪费），所以当且仅当 $m\times j$ 小于现在卖过的菜的总量，我们才需要去删除多余的菜。</p>
<h2 id="双序列匹配"><a href="#双序列匹配" class="headerlink" title="双序列匹配"></a>双序列匹配</h2><p>给两个序列 $a$ 和 $b$，在改变 $a,b$ 的顺序后使得一个计算代价的函数 $f(a,b)$ 得到最值，这种一般可以用贪心的匹配得到答案。</p>
<p><a href="https://www.luogu.com.cn/problem/P1966">P1966 [NOIP2013 提高组] 火柴排队</a></p>
<p>给定序列 $a,b$，任意改变 $a,b$ 的顺序，求 $\sum(a_i-b_i)^2$ 的最小值。</p>
<p>最基础的双序列匹配问题，不考虑交换次数的话，将 $a,b$ 都按升序排列得到的即为最小值。交换次数最小我们只需将 $b$ 数组映射到 $a$ 数组，然后求逆序对即可。</p>
<p><a href="https://www.luogu.com.cn/problem/P1084">P1084 [NOIP2012 提高组] 疫情控制</a></p>
<p>这应该算是一个贪心双序列匹配的经典好题了，首先我们不妨二分出一个时间，代表花费的最长时间，那么我们首先可以将所有军队向上跳，显然如果军队能向上跳，那么向上跳肯定不劣。</p>
<p>在所有的军队都向上跳完后，有的叶子肯定没有被军队挡住，我们把这些叶子对应的根的儿子的子树标记，代表这个子树需要被帮助，找到了所有需要帮助的子树后，我们要去用已经到达根的儿子的点的一些军队且还有空余时间走到其它的树来帮助别的子树。（注意当这个在根的儿子的军队去帮助别的子树的时候，它自己这棵子树可能就有拦不住疫情了）</p>
<p>考虑如果一个在根的儿子的军队走到根了之后却不能原路返回再走回自己，且当这个军队走了之后这个子树会失控，那么这个军队应不应该去帮助别人？</p>
<p>如果这个子树帮助别人，那么一定还需要另一个子树上的军队来帮助它，那么我们不如让这个子树的军队不动，这样我们用了更小代价去防控了一个更难防控的子树，这样会更优一些。</p>
<p>最后我们就找到了所有能动的军队和需要被帮助的子树，把距离处理出来，然后双序列贪心匹配，看能不能将帮助所有子树。</p>
<p>时间复杂度 $\mathcal{O}(n\log n\log w)$。</p>
<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><p>同样是<strong>极其重要</strong>的一类问题，整理基本模型，拓展模型和有意思的想法。</p>
<h2 id="背包"><a href="#背包" class="headerlink" title="背包"></a>背包</h2><p>背包的形式也很多样，记几个不常见的类型。</p>
<h3 id="删除背包"><a href="#删除背包" class="headerlink" title="删除背包"></a>删除背包</h3><p>删除背包当且仅当仅当背包的运算方式可逆时能用，例如加减可逆，但取 $\max$ 和 $\text{or}$ 都不行。</p>
<p>例如我们要01背包求方案数，每来一个物品，转移如下：</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> M<span class="token punctuation">;</span>i <span class="token operator">>=</span> w<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> w<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>那么如果要删除一个物品，其实也很简单：</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> w<span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> M<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> w<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>可行性背包可以通过<strong>转化成求方案数</strong>使用删除背包。<a href="https://www.luogu.com.cn/problem/U76029">U76029 货币系统</a></p>
<h3 id="text-bitset-优化可行性背包"><a href="#text-bitset-优化可行性背包" class="headerlink" title="$\text{bitset}$ 优化可行性背包"></a>$\text{bitset}$ 优化可行性背包</h3><p>只是一个小优化，但只能用来优化可行性背包。在这里记录一下用法：</p>
<ul>
<li>定义一个大小为 $N$ 的 $\text{bitset}$</li>
</ul>
<pre class=" language-cpp"><code class="language-cpp">bitset<span class="token operator">&lt;</span>N<span class="token operator">></span> f<span class="token punctuation">;</span>
</code></pre>
<ul>
<li>访问 $\text{bitset}$ 的第 $i$ 位</li>
</ul>
<pre class=" language-cpp"><code class="language-cpp">f<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
</code></pre>
<ul>
<li>查询 $\text{bitset}$ 中 $1$ 的数量</li>
</ul>
<pre class=" language-cpp"><code class="language-cpp">f<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<ul>
<li>将所有位设为 $0$</li>
</ul>
<pre class=" language-cpp"><code class="language-cpp">f<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<ul>
<li>可行性背包中新来一个物品后</li>
</ul>
<pre class=" language-cpp"><code class="language-cpp">f <span class="token operator">=</span> f <span class="token operator">|</span> <span class="token punctuation">(</span>f <span class="token operator">&lt;&lt;</span> w<span class="token punctuation">)</span>
</code></pre>
<p>其它操作见 <a href="https://oi-wiki.org/lang/csl/bitset/">bitset - OI Wiki</a>，使用 $bitset$ 后会使原复杂度乘上一个 $\dfrac{1}{w}$ 的常数，$w$ 为计算机的位数32&#x2F;64。</p>
<p><a href="https://www.luogu.com.cn/problem/P6567">P6567 [NOI Online #3 入门组] 买表</a> 注意此题的正解是单调队列优化多重背包，但由于是可行性背包，二进制分组加 $\text{bitset}$ 优化可以吊打单调队列。</p>
<h3 id="P5289-十二省联考-2019-皮配"><a href="#P5289-十二省联考-2019-皮配" class="headerlink" title="P5289 [十二省联考 2019] 皮配"></a><a href="https://www.luogu.com.cn/problem/P5289">P5289 [十二省联考 2019] 皮配</a></h3><p>一道复杂背包的问题。</p>
<blockquote>
<p>我认为背包唯一要讲的就是皮配，讲了这题你其它背包就都会了。——教练</p>
</blockquote>
<p>作为一道省选题，我们以考场视角来思考这道题目。在读了一会儿题面后，我们总结出了如下的形式化题面：</p>
<p>一共有 $n$ 个物品， $c$ 种类别，每个物品还有一个重量。</p>
<p>现在你将 $n$ 个物品放置在一个 $2\times 2$ 的网格中，要求：</p>
<ul>
<li>第 $1$ 行重量和 $\le C_0$，第 $2$ 行重量和 $\le C_1$，第 $1$ 列重量和 $\le D_0$，第 $2$ 列重量和 $\le D_1$；</li>
<li>同类的物品只能在同一行中放置；</li>
<li>每个物品还有一个限制，代表 $4$ 个格子中有一个不能放，或者无限制。</li>
</ul>
<p>现在求 $n$ 个物品全部放入 $2\times 2$ 的不同方案数，对 $998244353$ 取模。</p>
<p>你的第一天已经有了很稳的分数，所以第二天继续求稳，我们当然是从暴力分想起。</p>
<p>先来看朴素暴力：对于每一类物品，将其视作一个阶段，我们解决当前阶段的问题。</p>
<p>设 $dp_{i,j}$ 表示在当前这一类做之前，第 $1$ 行的总重量为 $i$，第 $2$ 行的总重量为 $j$ 的方案数。第 $2$ 行和第 $2$ 列当前重量可以减一下得到。</p>
<p>对于当前城市的贡献，记一个 $f0_j,f1_j$ 表示都放入第 $1$ 行，第 $1$ 列重量为 $j$ 的方案数和都放入第 $2$ 行，第 $1$ 列重量为 $j$ 的方案数。</p>
<p>那么我们直接看每个物品取哪个位置，然后更新 $f_0,f_1$。最后更新即为：</p>
<p>$dp_{i,j}+f0_k\rightarrow dp_{i+k,j+k},dp_{i,j}+f1_k\rightarrow dp_{i,j+k}$。</p>
<p>计算 $f$ 的总复杂度为 $\mathcal{O}(nM)$，$f$ 合并到 $dp$ 的总复杂度为 $\mathcal{O}(nM^3)$，得分 $40$。</p>
<p>这是一个好想加好写的做法，你不难推测大部分人都会这个做法，让我们向着更高的目标前进！</p>
<p>接下来我们考虑一个优化：<strong>平衡转移和合并的复杂度</strong>。</p>
<p>我们能否将合并的复杂度分一个 $M$ 给转移，使其平衡至 $\mathcal{O}(nM^2)$。</p>
<p>不难发现可行，给 $f0$ 和 $f1$ 加上一维，表示<strong>此类物品加上之前类的第</strong> $1$ <strong>行已有的重量</strong>，原先的一维也变为了<strong>此类物品加上之前类的第</strong> $1$ <strong>列已有的重量</strong>。</p>
<p>在转移每一类物品前，复制 $dp$ 至 $f0,f1$，决策这一类的所有物品后，将 $f0_{i,j}+f1_{i,j}$ 更新至 $dp_{i,j}$，由于当前类的物品在第 $1$ 行还是第 $2$ 行是两种选择，可使用加法原理。</p>
<p>现在你获得了 $50$ 分，于是你开始决定拼特殊情况。</p>
<p>当 $k&#x3D;0$，即没有带限制的物品该怎么做？</p>
<p>你发现此时决策物品的行与列不会再受到限制，<strong>行列可看作互相独立的问题</strong>，那么我们记 $g_i$ 表示第 $1$ 行重量为 $i$ 的方案数，$h_j$ 表示第 $1$ 列重量为 $j$ 的方案数，把每一类的重量绑在一起做行，每个单独的物品做列，最后行列使用乘法原理乘起来即可。</p>
<p>$\sum\limits_{i,j}[i\le C_0][W-i\le C_1][j\le D_0][W-j\le D_1]g_i\cdot h_j$</p>
<p>$W$ 表示所有物品的总重量。</p>
<p>这个做法是 $\mathcal{O}(nM)$ 的，加上之前的做法有了 $70$ 分。如果你受到了这个<strong>行列独立</strong>的启发后，不妨再思考一下。</p>
<p>注意下列的状态全部重新命名，可能和上面有重合。</p>
<p>将 $n$ 个物品分为 $3$ 种类型：</p>
<ul>
<li>$\text{A}$ 类：所在类的所有物品全部无限制。</li>
<li>$\text{B}$ 类：自己无限制，但所在类有物品有限制。</li>
<li>$\text{C}$ 类：自己有限制。</li>
</ul>
<p>分成这 $3$ 类后，我们先考虑 $\text{A}$ 类。$\text{A}$ 直接用 $k&#x3D;0$ 的转移就行了，我们存入 $f_i$ 与 $g_j$ 中。时间复杂度 $\mathcal{O}(nM)$</p>
<p>接下来我们考虑 $\text{B}$ 类，$\text{B}$ 可以理解为行的选择存在一定限制，但列还是完全没有限制，因为它在它自己的类中决策了行之后，它自身是可以随便选第 $1$ 列和第 $2$ 列的，于是我们把列的信息一块记到 $g$ 中代表了<strong>列的决策独立</strong>，而对于行的信息，其实就是在转移 $\text{C}$ 类点后增加了这一类中 $\text{B}$ 类点的总重量，那我们设 $h_{i,j}$  表示 $\text{B}$ 的行与 $\text{C}$ 的行和列的第 $1$ 行重量为 $i$，只算 $C$ 的重量时第 $1$ 列重量为 $j$ 的方案数，做 $\text{C}$ 的时候按上面的 $\mathcal{O}(nM^2)$ 转移，最后加上一个当前类的 $\text{B}$ 的总重量决策是第 $1$ 行还是第 $2$ 行即可。</p>
<p>$\text{C}$ 存在限制，但 $k\le30$，即我们使用暴力的转移复杂度实际上是 $\mathcal{O}(kM^2)$ 的，但你发现 $s_i\le 10$，即任意物品的重量不超过 $10$，那么 $h$ 的第二维大小只有 $30\times10&#x3D;300$，复杂度可再次降至 $\mathcal{O}(300M)$，可以接受。</p>
<p>这样我们对于每类点的行列信息都存在了如下的数组中：</p>
<table>
<thead>
<tr>
<th></th>
<th>行</th>
<th>列</th>
</tr>
</thead>
<tbody><tr>
<td>$\text{A}$</td>
<td>$f$</td>
<td>$g$</td>
</tr>
<tr>
<td>$\text{B}$</td>
<td>$h$</td>
<td>$g$</td>
</tr>
<tr>
<td>$\text{C}$</td>
<td>$h$</td>
<td>$h$</td>
</tr>
</tbody></table>
<p>最后，如何计算出总方案数？</p>
<p>我们考虑 $f,g,h$ 是不是互相独立的，我们首先用 $h$ 确定了 $\text{C}$ 的行列和 $\text{B}$ 的行信息，此时我们对 $\text{B}$ 的列和 $\text{A}$ 的行列的选择并没有产生影响，然后用 $f$ 确定了 $\text{A}$ 的行信息，由于 $\text{A,B}$ 点一定不是在同一类中（$\text{A}$ 的定义：所在类的所有物品全部无限制），那么我们对 $\text{A,B}$ 的列也没有产生影响，也就是 $g$ 的方案数。由此可见 $f,g,h$ 各自的选择<strong>都不会影响到其它的选择</strong>，所以我们枚举 $f,g,h$ 所有可能状态，运用<strong>乘法原理</strong>求出每一种组合的答案，在实现上，对 $f,g$ 做前缀和，然后枚举 $h$ 的状态，$f,g$ 的选取是一个区间，这样复杂度是 $\mathcal{O}(300M)$  的。这样我们就愉快地通过了这道题。</p>
<p>最后，我们可以总结一下这道题所用到的一些 dp 思想：</p>
<ul>
<li>对于状态的设计：对于每一类物品，将其视作一个阶段，解决完当前阶段合并至之前的答案形成新的答案继续转移，无论是暴力还是正解都没有脱离这个前提。</li>
<li>转移与合并的平衡：在转移和合并复杂度差距较大时，观察到其中的特点，例如此题在转移的时加了一维状态来辅助合并，优化了整体复杂度。</li>
<li>若干独立情况的整合：我认为这是本道题的精华所在。在做 $k&#x3D;0$ 的时候就已经有<strong>行列独立</strong>的美妙性质，正解对若干个情况独立的分别解决的思路也是登峰造极。这题的数据范围对于这种想法也有提示，如 $k\le30,s_i\le10$，观察到这些是否可以想到有限制的物品和无限制的物品分开做呢？</li>
</ul>
<h2 id="计数-dp"><a href="#计数-dp" class="headerlink" title="计数 dp"></a>计数 dp</h2><h3 id="容斥"><a href="#容斥" class="headerlink" title="容斥"></a>容斥</h3><p><a href="https://www.luogu.com.cn/problem/P5664">P5664 [CSP-S2019] Emiya 家今天的饭</a></p>
<p>考虑如果没有主要食材在一半的菜的条件求方案，用乘法原理求求方案。</p>
<p>那么如何求出不合法的方案数？考虑到<strong>最多只有一种主要食材会超过一半</strong>，那么我们枚举哪个食材超了，然后 $dp_{i,j}$ 表示前 $i$ 行，钦定的食材数量的选择数比其它选择的食材数量多 $j$ 的方案数。</p>
<p>转移就是当前这行不选&#x2F;选钦定食材&#x2F;选其它食材三种转移，然后 $j\in [-n,n]$，答案的取值范为 $dp_{n,j},j\in[1,n]$，当然要先平移一下内存存储。</p>
<p>时间复杂度 $\mathcal{O}(mn^2)$。</p>
<p>优化思想：</p>
<p>合法方案不方便求，但是总方案非常好求，而不合法方案<strong>在本题的限制下也变得非常好求</strong>，所以采用了容斥的思想。</p>
<h2 id="双调巡游"><a href="#双调巡游" class="headerlink" title="双调巡游"></a>双调巡游</h2><p>双调巡游，即为求出选择 $2$ <strong>条方向单调且点互不相交路径</strong>的一类问题。</p>
<p>如：给定一个 $n$ 个点 $m$ 条边的带边权有向图，问选择两条点不相交的最短路径的方案数是多少。</p>
<p>首先把最短路 DAG 求出来，那么路径方向就是单调的，可以使用双调巡游。</p>
<p>如果我们按 $1\rightarrow u$ 的路径长度大小给所有点重新标号，那么<strong>每拓展一次最短路编号一定越来越大</strong>。</p>
<p>设 $dp_{x,y}$ 表示一条路径走到了 $x$，另一条路径走到了 $y$ 的方案数，初值 $dp_{1,1}&#x3D;1$，最终答案为 $dp_{n,n}$。</p>
<p>对于 $dp_{x,y}$ ，其中 $dis_x\le dis_y$，那么我们去转移所有 $x$ 在最短路上的出边更新状态即可，复杂度 $\mathcal{O}(nm)$。</p>
<h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><p>一些基本的树概念就不写了。</p>
<h2 id="树的直径-text-diameter"><a href="#树的直径-text-diameter" class="headerlink" title="树的直径 $\text{(diameter)}$"></a>树的直径 $\text{(diameter)}$</h2><p>形式化的定义树的直径，对于直径 $(x,y)$，$\forall (u,v),dist(u,v)\le dist(x,y)$，也就是直径是树上任意两点最长距离的点对。</p>
<p>树的直径的求法一般为两遍 dfs，或者树形 dp，复杂度 $\mathcal{O}(n)$。</p>
<p>直径常规套路为把直径拉起来，子树挂在直径的链上，进行一系列相关操作。</p>
<p><a href="https://www.luogu.com.cn/problem/P2491">P2491 [SDOI2011] 消防</a> 把直径拉出来后，首先可以证明选的路径一定在直径上，那么选择的部分就是一个滑动窗口，拿单调队列去优化，当然这题用带 log 的倍增也行，复杂度 $\mathcal{O}(n\log n)&#x2F;\mathcal{O}(n)$。</p>
<p><a href="https://www.luogu.com.cn/problem/U119268">U119268 搞搞新意思（gao）</a></p>
<p>同样是将直径拉出来，首先可以明确一点，如果不修改直径，直径不会变小，但是如果根本就不修改，直径一定不変。那么每次修改仅有可能在直径上修改。也就是我们在看直径上的所有边被修改后，直径会不会变小，不会取原直径即可。那么现在有一个 $\mathcal{O}(qn^2)$ 的暴力做法：每次询问枚举哪条边修改，然后暴力计算修改后的直径。</p>
<p>考虑优化，记录 $dist$ 为直径长度，$dep_u$ 表示以直径上的点 $u$ 为根的子树到子树内最深点的距离，$pre_u$ 表示直径上 $u$ 节点到 $u$ 之前所有位置的最长距离，$suf_u$ 表示直径上 $u$ 节点到 $u$ 之后所有位置的最长距离，$pre_u$ 和 $suf_u$ 可以通过递推求出。</p>
<p>假设我们要修改直径上的一条边 $(u,v)$，从 $w0$ 改成 $w$，那么新的直径一定是：</p>
<p>$\max(pre_u, suf_v, dist-w0+w)$</p>
<p>观察这个式子，除了 $dist-w0+w$ 这一项随着询问不同的权值改变，而前两项只跟这条边的位置有关。那么设 $Val_u&#x3D;max(pre_u, suf_v)$，那么当 $Val_u\ge dist-w0+w$ 时，取前者，否则取后者。整理可得 $w\le Val_u-dist+w0$，那么我们以 $Val_u-dist+w0$ 升序排序，那么满足一段前缀，取得的最大值为 $Val_u$，后缀的最大值为 $dist-0+w$，二分查一下再次维护一个前后缀答案的 $\max$ 即能通过。复杂度 $\mathcal{O }(n\log n)$。</p>
<h2 id="最近公共祖先-text-Lowest-Common-Ancestor"><a href="#最近公共祖先-text-Lowest-Common-Ancestor" class="headerlink" title="最近公共祖先 $\text{(Lowest Common Ancestor)}$"></a>最近公共祖先 $\text{(Lowest Common Ancestor)}$</h2><p>树的重要知识，很多题都需要求 lca 辅助做题。</p>
<p>lca 的求法一般掌握两种求法即可，一个是在线倍增做法 $\mathcal{O}(n\log n)-\mathcal{O}(\log n)$，一个是离线 tarjan 做法 $\mathcal{O}(n\alpha)-\mathcal{O}(1)$。不会有人想学 $\mathcal{O}(n)-\mathcal{O}(1)$ 的 $\text{Method of Four Russians}$ 吧。</p>
<h3 id="lca-相关性质："><a href="#lca-相关性质：" class="headerlink" title="lca 相关性质："></a>lca 相关性质：</h3><ol>
<li>$\text{LCA}(u)&#x3D;u$</li>
<li>$u$ 是 $v$ 的祖先，当且仅当 $\text{LCA}(u,v)&#x3D;u$</li>
<li>前序遍历（根左右）中，$\text{LCA}(S)$ 出现在 $S$ 点集所有点之前；后序遍历（左右根）中，$\text{LCA}(S)$ 出现在 $S$ 点集所有点之后。</li>
<li><strong>两点集并的最近公共祖先为两点集分别的最近公共祖先的最近公共祖先</strong>，即 $\text{LCA}(A,B)&#x3D;\text{LCA(LCA(A), LCA(B))}$。</li>
<li>$dist(u,v)&#x3D;dep_u+dep_v-2dep_{lca}$。</li>
<li>$\text{LCA}(l\sim r)&#x3D;\text{LCA}(x,y)$，$x$ 和 $y$ 分别是 $l\sim r$ 中 dfn 序最小和最大的节点。</li>
</ol>
<h3 id="树上距离问题"><a href="#树上距离问题" class="headerlink" title="树上距离问题"></a>树上距离问题</h3><ol>
<li>点 $x$ 到路径 $(u,v)$ 距离：$\dfrac{dist(x,u)+dist(x,v)-dist(u,v)}{2}$</li>
<li>点 $x$ 是否在路径 $(u,v)$ 上，利用上式判是否等于 $0$。</li>
<li>两条直径 $(u_1,v_1)(u_2,v_2)$ 是否点相交：判断 $lca_1$ 和 $lca_2$ 是否分别在路径 $(u_2,v_2)$ 和 $(u_1,v_1)$ 上。</li>
<li>两条路径边相交的长度：$\dfrac{|dist(u_1,v_2)+dist(u_2,v_1)-dist(u_1,v_1)-dist(u_2,v_2)|}{2}$，顺便可判边相交。<a href="https://www.luogu.com.cn/user/62948">Crabby_Maskiv</a></li>
<li>两条路径之间的距离： $\dfrac{dist(u_1,v_2)+dist(u_2,v_1)-dist(u_1,v_1)-dist(u_2,v_2)}{2}$，若路径点相交为 $0$。</li>
</ol>
<h2 id="树上差分"><a href="#树上差分" class="headerlink" title="树上差分"></a>树上差分</h2><p>树上差分定义：$d_u&#x3D;a_u-\sum\limits_{v\in son_u}a_v$，最后利用差分求回原值：$a_u&#x3D;\sum\limits_{v\in tree_u,v\neq u}d_v$。</p>
<p>经典问题</p>
<ul>
<li>子树修改，子树查询：线段树 dfn 序 $\rightarrow$ 区间修改，区间查询。</li>
<li>单点修改，路径查询：路径查询转为根到节点的路径长度，那么单点修改就变成了子树查询。</li>
<li>路径修改，单点查询：用树状数组实现单点修改&#x2F;子树查询。</li>
<li>路径修改，子树查询：记录 $\sum d_u$ 和 $\sum d_u\times dep_u$ 的权值，开两个树状数组维护。</li>
<li><del>路径修改，路径查询：树剖。</del></li>
</ul>
<h2 id="重心-text-centriod"><a href="#重心-text-centriod" class="headerlink" title="重心 $\text{(centriod)}$"></a>重心 $\text{(centriod)}$</h2><p>定义：</p>
<ul>
<li>如果以重心为根，每个子树的大小不超过 $\lfloor \dfrac{n}{2}\rfloor$。</li>
<li>树上山区建一所小学应该建在重心。（其它点的距离到重心的距离最短）</li>
<li>在一棵树上添加或删除一个叶子，那么重心最多只移动一条边的距离。（同时可以尝试拓展到添删一棵子树）</li>
<li>以 $u$ 为根的子树的重心必定在以 $u$ 为 $top$ 的重链上。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>格线游走/反射容斥</title>
    <url>/2023/03/19/%E6%A0%BC%E7%BA%BF%E6%B8%B8%E8%B5%B0-%E5%8F%8D%E5%B0%84%E5%AE%B9%E6%96%A5/</url>
    <content><![CDATA[<h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>请思考如下的经典问题：从原点 $(0,0)$ 开始，每一步只能向右或向上走，问走到 $A(n,m)$ 的方案数有多少？</p>
<img src="https://cdnjson.com/images/2023/03/20/1.png" alt="图1.png" style="zoom: 80%;" />

<p>相信大家都能一眼得出方案数为 ${n+m\choose n}$，组合意义也十分显然：将向右和向上看作 $01$ 操作，那么就是求由 $n$ 个 $0$、$m$ 个 $1$ 组成的不同 $01$ 序列数量。</p>
<p>这种问题就被称为格线游走的最基本形式，在这个上面有很多种拓展方法，如在其中加入障碍后询问方案数之类的，今天我们讨论其中一种拓展。</p>
<h1 id="伟大的思想"><a href="#伟大的思想" class="headerlink" title="伟大的思想"></a>伟大的思想</h1><img src="https://cdnjson.com/images/2023/03/20/2.png" alt="图2.png" style="zoom: 67%;" />

<p>如图，我们增添了一条直线 $y&#x3D;x+b$，我们不希望碰到这条直线，那么现在的方案数是多少？</p>
<p>对此，我们想办法减掉<strong>经过直线后再到达终点的方案</strong>，我们可以得到点 $(n,m)$ 关于 $y&#x3D;x+b$ 对称得到的点坐标为 $(m-b,n+b)$，那么我们说，每一个从 $(0,0)$ 到 $(m-b,n+b)$ 的方案都<strong>唯一对应</strong>了一个从 $(0,0)$ 先经过直线再到达终点的方案。</p>
<p>构造唯一对应的方法为，当<strong>第一次</strong>碰到直线时，将后面的路径对称得到原方案，显然方案之间两两不同。</p>
<img src="https://cdnjson.com/images/2023/03/20/356341859adf62d5b.png" alt="图3.png" style="zoom:67%;" />

<p>记 $p(n,m)&#x3D;{n+m\choose n}$，表示 $(0,0)$ 到 $(n,m)$ 的路径数量，那么此时的答案就为 $p(n,m)-p(m-b,n+b)$。</p>
<h1 id="两条直线"><a href="#两条直线" class="headerlink" title="两条直线"></a>两条直线</h1><p>接下来我们考虑两条直线的情况：$y&#x3D;x+b$ 与 $y&#x3D;x+c$（$b&gt;c$）</p>
<p>如果两条直线都在起点和终点的同一侧，即 $\min(m-n,0)&gt;\max(b,c)$ 或 $\max(m-n,0)&lt;\min(b,c)$，此时退化成了一条直线的情况。</p>
<p>我们考虑两条直线把起点和终点卡在中间的情况，即下图。</p>
<img src="https://cdnjson.com/images/2023/03/20/4.png" alt="图4.png" style="zoom: 50%;" />

<p>那么我们还是利用容斥的思想：总方案数 $&#x3D;$ 原方案数 $-$ 只经过 $y&#x3D;x+b$ 的方案数 $-$ 只经过 $y&#x3D;x+c$ 的方案数 $+$ 两条直线都经过的方案数。</p>
<p>这个式子是对的吗？是对的。但是想想怎么求两条直线都经过的方案数？</p>
<p>我们还是考虑通过翻折使之一一映射一个方案，对于一个先经过 $y&#x3D;x+b$ 再经过 $y&#x3D;x+c$ 再到达终点的方案：</p>
<img src="https://cdnjson.com/images/2023/03/20/5.png" alt="图5.png" style="zoom:50%;" />

<p>我们在第一次经过 $y&#x3D;x+b$ 时翻折，再对第一次经过 $y&#x3D;x+c$ 时按 $y&#x3D;x+c$ 关于 $y&#x3D;x+b$ 对称后的直线（也就是 $y&#x3D;x+(2b-c)$）翻折：</p>
<img src="https://cdnjson.com/images/2023/03/20/6.png" alt="图6.png" style="zoom:50%;" />

<p>可以说明此时从 $(0,0)$ 走到翻折后最终的点 $(n’,m’)$ 的方案一一对应了一个先走到 $y&#x3D;x+b$ 再走到 $y&#x3D;x+c$ 的方案。</p>
<p>然而还有先经过 $y&#x3D;x+c$ 再经过 $y&#x3D;x+b$ 的方案，先经过 $y&#x3D;x+b$ 再经过 $y&#x3D;x+c$ 再经过 $y&#x3D;x+b$ 的路线……问题变的棘手。</p>
<h1 id="反射容斥"><a href="#反射容斥" class="headerlink" title="反射容斥"></a>反射容斥</h1><p>我们需要对所有的经过直线顺序的情况进行容斥。记反射序列形如 $bcb…$ 表示格线游走依次按顺序经过直线 $y&#x3D;x+b,y&#x3D;x+c,y&#x3D;x+b,…$ 的方案，考虑我们怎么对这种依次经过直线的方案容斥的。</p>
<p>每当我们第一次到达直线时，将所对应的点和直线翻折，类比下来，那么我们可以依次对经过的直线顺序翻折，最终翻折所得到终点的方案数就是以反射序列到达原终点的方案数。</p>
<p>我们观察反射序列的形式，<strong>发现一定是由</strong> $b,c$ <strong>依次交替组成的</strong>，因为我们只在碰到 $b$ 后的下一次碰到 $c$ 才翻折，或碰到 $c$ 的下一次碰到 $b$ 后才翻折，如果连续经过了 $b$ 或 $c$，可以发现我们没有对于这种情况翻折。 </p>
<p>综上，我们可以把最终答案以容斥写成了这样一个形式：总方案 $-b-c+bc+cb-bcb-cbc+…$</p>
<p>我们考虑这样的项一共有多少个。由于每次反射后都有偏移，且因为 $b,c$ 交替反射，所以终点总是在往负半轴跑，当跑到非第一象限的区域时方案数为 $0$，因此之后就不用计算，最终时间复杂度为 $\mathcal{O}(\dfrac{n+m}{b-c})$。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>我们可以将所有反射序列看作两组：$bcbc…$ 与 $cbcb…$，我们可以同时维护这两组。</p>
<p>我们考虑需要实时维护什么：两条直线的截距，反射后的终点位置，那么我们可以记录 $b,c$ 分别表示两条直线截距，$(x,y)$ 表示终点坐标。</p>
<p>枚举反射次数，我们就能知道当前轮是 $b$ 关于 $c$ 对称还是 $c$ 关于 $b$ 对称，终点关于 $b$ 对称还是关于 $c$ 对称，然后就能求出下一轮。</p>
]]></content>
  </entry>
  <entry>
    <title>博弈论</title>
    <url>/2023/03/09/%E5%8D%9A%E5%BC%88%E8%AE%BA/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>斯特林数</title>
    <url>/2023/03/07/stirling/</url>
    <content><![CDATA[<h1 id="第一类斯特林数-texttt-Fisrt-Stirling"><a href="#第一类斯特林数-texttt-Fisrt-Stirling" class="headerlink" title="第一类斯特林数 $\texttt{(Fisrt Stirling)}$"></a>第一类斯特林数 $\texttt{(Fisrt Stirling)}$</h1><p>记 $\operatorname{stir_1}(n,k)$ 或 ${n \brack k}$ 表示 $n$ 个不同小球放在 $k$ 个置换环中的方案数。其中环之间的小球编号不同或置换顺序不同均算作不同的方案。</p>
<p>递推：${n \brack k}&#x3D;{n-1 \brack k-1}+(n-1)\cdot {n-1 \brack k}$</p>
<p>*<strong>组合意义</strong>：对于第 $n$ 个球，一种选择是新开一个未放过任何小球的环，另一种选择是放在之前的环中，因为小球互不相同且<strong>置换不同算作不同方案</strong>，那么放在任意已经放过的小球之后都是不同的方案，因此有 $(n-1)$ 种选择。</p>
<p>边界：${0 \brack 0}&#x3D;1,{n \brack 0}&#x3D;0(n&gt;0),{n\brack k}&#x3D;0(n&lt;k)$</p>
<h2 id="代码实现-mathcal-O-nk"><a href="#代码实现-mathcal-O-nk" class="headerlink" title="代码实现 $\mathcal{O}(nk)$"></a>代码实现 $\mathcal{O}(nk)$</h2><pre class=" language-cpp"><code class="language-cpp">stir1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token function">min</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        stir1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>stir1<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span>stir1<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="不知道有什么用的性质"><a href="#不知道有什么用的性质" class="headerlink" title="不知道有什么用的性质"></a>不知道有什么用的性质</h2><ul>
<li>${n \brack 1}&#x3D;(n-1)!$</li>
<li>${n \brack 2}&#x3D;(n-1)!\sum\limits_{i&#x3D;1}^{n-1}\dfrac{1}{i}$</li>
<li>$n!&#x3D;\sum\limits_{k&#x3D;0}^n{n \brack k}$</li>
</ul>
<h1 id="上升幂"><a href="#上升幂" class="headerlink" title="上升幂"></a>上升幂</h1><p>记 $x$ 的 $n$ 阶上升幂为 $x^{\overline{n}}$ ，其值为 $\prod\limits_{i&#x3D;x}^{n+x-1}i$。特殊地，记 $x^{\overline{0}}&#x3D;1$。</p>
<p>不难看出 $x^{\overline{n}}$ 是一个关于 $x$ 的 $n$ 次多项式，具体来说，有 $x^{\overline{n}}&#x3D;\sum\limits_{k&#x3D;0}^{n}{n \brack k}x^k$。</p>
<p>*<strong>组合意义：</strong>对于将 $n$ 个小球放在 $k$ 个置换环中，再对环染 $[1,x]$ 中的某种颜色。等式左边含义为对于当前的球，要么新开一个环染 $[1,x]$ 的颜色，要么放在任意一个之前的球之后并继承颜色；等式右边含义为枚举环的数量 $k$，用第一类斯特林数求出 $n$ 个球放 $k$ 个环的方案数后每个环染 $[1,x]$ 的颜色。</p>
<h1 id="第二类斯特林数-texttt-Second-Stirling"><a href="#第二类斯特林数-texttt-Second-Stirling" class="headerlink" title="第二类斯特林数 $\texttt{(Second Stirling)}$"></a>第二类斯特林数 $\texttt{(Second Stirling)}$</h1><p>记 $\operatorname{stir_2}(n,k)$ 或 ${n \brace k}$ 表示 $n$ 个不同小球放在 $k$ 个集合中的方案数。其中集合之间的小球编号不同视作不同的方案。</p>
<p>递推：${n \brace k}&#x3D;{n-1 \brace k-1}+k\cdot {n-1 \brace k}$</p>
<p>*<strong>组合意义：</strong>对于第 $n$ 个球，一种选择是新开一个未放过任何小球的集合，另一种选择是放在之前的集合中，有 $(k-1)$ 种可选择的集合。</p>
<p>边界：${0 \brace 0}&#x3D;1$</p>
<h2 id="代码实现-mathcal-O-nk-1"><a href="#代码实现-mathcal-O-nk-1" class="headerlink" title="代码实现 $\mathcal{O}(nk)$"></a>代码实现 $\mathcal{O}(nk)$</h2><pre class=" language-cpp"><code class="language-cpp">stir2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token function">min</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        stir2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>stir2<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span>stir2<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> j <span class="token operator">%</span> Mod<span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="容斥（通项公式）"><a href="#容斥（通项公式）" class="headerlink" title="容斥（通项公式）"></a>容斥（通项公式）</h2><p>${n \brace k}&#x3D;\dfrac{1}{k!}\sum\limits_{i&#x3D;0}^k(-1)^i\cdot {k \choose i}\cdot (k-i)^n$</p>
<p>组合意义：考虑 $n$ 个球，放进 $k$ 个不同集合，<strong>可以有空盒子的方案数</strong>。</p>
<h1 id="下降幂"><a href="#下降幂" class="headerlink" title="下降幂"></a>下降幂</h1><p>记 $x$ 的 $n$ 阶下升幂为 $x^{\underline{n}}$ ，其值为 $\prod\limits_{i&#x3D;x}^{x-n+1}i$。特殊地，记 $x^{\underline{0}}&#x3D;1$。</p>
<p>下降幂与 $n$ 次幂的关系：$x^n&#x3D;\sum\limits_{k&#x3D;0}^n{n \brace k}x^{\underline{k}}$</p>
<p>*<strong>组合意义：</strong>对于将 $n$ 个小球染 $[1,x]$ 的某种颜色。等式左边为一般乘法原理；等式右边为先枚举不同的颜色数 $k$，然后将 $n$ 个小球分成 $k$ 个集合后依次染色，后面染的跟前面不重复，因此是下降幂。</p>
<p>下降幂的转化：$i^{\underline{j}}&#x3D;{i \choose j}j!$</p>
<h1 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h1><h2 id="CF1342E-Placing-Rooks"><a href="#CF1342E-Placing-Rooks" class="headerlink" title="CF1342E Placing Rooks"></a><a href="https://www.luogu.com.cn/problem/CF1342E">CF1342E Placing Rooks</a></h2><p>注意到一共仅有 $n$ 个车，那么当且仅当<strong>每行恰好有一个车或每列恰好有一个车</strong>。</p>
<p>不妨考虑每行有一个车的情况，行上显然没有可以互相攻击的车，那么考虑列的贡献。设最终有 $m$ 列存在车，那么首先先用 $m$ 个车填满这 $m$ 列，而后每增加一个车都恰好添加一对相互攻击的车，因此最终互相共计的车的对数为 $n-m&#x3D;k$，解得 $m&#x3D;n-k$。</p>
<p>那么最终的答案为：${n \choose n-k}{n \brace n-k}(n-k)!$，对于填列的情况恰好一一对应一种填行的情况，只需将答案乘 $2$ 即可。</p>
<h2 id="P4609-FJOI2016-建筑师"><a href="#P4609-FJOI2016-建筑师" class="headerlink" title="P4609 [FJOI2016] 建筑师"></a><a href="https://www.luogu.com.cn/problem/P4609">P4609 [FJOI2016] 建筑师</a></h2><p>题意转化：长度为 $n$ 的排列，前缀单调栈长度为 $A$ 且后缀单调栈长度为 $B$ 的排列数量。</p>
<p>由于 $n$ 一定在两边都能被看到，所以单调栈长度先减 $1$。</p>
<p>考虑单调栈中的每个数一定挡住了它后面的一些数，我们把每个单调栈中的数和它挡住的数一块考虑，当我们选定了这些数后，我们要把最大的数放在最前面，因此是一个置换环的形式，方案为第一类斯特林数。</p>
<p>最后答案即为 ${n-1 \brack A+B-2}{A+B-2 \choose A-1}$。</p>
<h2 id="CF932E-Team-Work"><a href="#CF932E-Team-Work" class="headerlink" title="CF932E Team Work"></a><a href="https://www.luogu.com.cn/problem/CF932E">CF932E Team Work</a></h2><p>推式子题。</p>
<p>$\sum\limits_{i&#x3D;1}^n{n \choose i}\times i^k$ （首先拆 $i^k$ 为下降幂）</p>
<p>$&#x3D;\sum\limits_{i&#x3D;1}^n{n\choose i}\sum\limits_{j&#x3D;0}^k{k \brace j}i^{\underline{j}}$（把 $i^{\underline{j}}$ 拆一下）</p>
<p>$&#x3D;\sum\limits_{i&#x3D;1}^n{n\choose i}\sum\limits_{j&#x3D;0}^k{k \brace j}{i \choose j}j!$（换序求和）</p>
<p>$&#x3D;\sum\limits_{j&#x3D;0}^k{k \brace j}j!\sum\limits_{i&#x3D;1}^n{n\choose i}{i \choose j}$（调整一下后面的组合数形式）</p>
<p>$&#x3D;\sum\limits_{j&#x3D;0}^k{k \brace j}j!\sum\limits_{i&#x3D;j}^n{n\choose j}{n-j \choose i-j}$（观察到 $\sum\limits_{i&#x3D;j}^n{n-j \choose i-j}&#x3D;2^{n-j}$）</p>
<p>$&#x3D;\sum\limits_{j&#x3D;0}^k{k \brace j}j!{n\choose j}2^{n-j}$</p>
<p>$\mathcal{O}(k^2)$ 预处理第二类斯特林数，$\mathcal{O}(k)$ 组合数按列递推，$\mathcal{O}(k\log n)$ 求答案，总时间复杂度 $\mathcal{O(k^2+k\log n)}$。</p>
<h2 id="CF1278F-Cards"><a href="#CF1278F-Cards" class="headerlink" title="CF1278F Cards"></a><a href="https://www.luogu.com.cn/problem/CF1278F">CF1278F Cards</a></h2><p>又是推式子题。</p>
<p>对于每次洗牌，有 $\dfrac{1}{m}$ 的概率第一张是王牌，有 $\dfrac{m-1}{m}$ 的概率第一张不是王牌，每次洗牌是独立的，枚举 $x$ 后则有：</p>
<p>$\sum\limits_{x&#x3D;0}^n x^k{n\choose x}(\dfrac{1}{m})^x(\dfrac{m-1}{m})^{n-x}$</p>
<p>为方便起见，设 $\dfrac{1}{m}&#x3D;p$。</p>
<p>$&#x3D;\sum\limits_{x&#x3D;0}^n x^k{n\choose x}p^x(1-p)^{n-x}$（拆 $x^k$）</p>
<p>$&#x3D;\sum\limits_{x&#x3D;0}^n\sum\limits_{j&#x3D;0}^k {k \brace j}x^{\underline{j}}{n \choose x}p^x(1-p)^{n-x}$（拆 $x^{\underline{j}}$）</p>
<p>$&#x3D;\sum\limits_{x&#x3D;0}^n\sum\limits_{j&#x3D;0}^k {k \brace j}{x \choose j}j!{n \choose x}p^x(1-p)^{n-x}$（换序求和 + 调整组合数形式）</p>
<p>$&#x3D;\sum\limits_{j&#x3D;0}^k {k\brace j}j!\sum\limits_{x&#x3D;j}^n{n\choose j}{n-j \choose x-j}p^x(1-p)^{n-x}$</p>
<p>将 $p^x(1-p)^{n-x}$ 看作 $p^{x-j}(1-p)^{n-x}\cdot p^j$ 后，利用二项式定理化简：</p>
<p>$&#x3D;\sum\limits_{j&#x3D;0}^k {k \brace j}j!{n\choose j}p^j$</p>
<p>$&#x3D;\sum\limits_{j&#x3D;0}^k {k \brace j}n^{\underline{j}}p^j$</p>
<p>易知求解此式的复杂度为 $\mathcal{O}(k^2)$。</p>
<h2 id="P6620-省选联考-2020-A-卷-组合数问题"><a href="#P6620-省选联考-2020-A-卷-组合数问题" class="headerlink" title="P6620 [省选联考 2020 A 卷] 组合数问题"></a><a href="https://www.luogu.com.cn/problem/P6620">P6620 [省选联考 2020 A 卷] 组合数问题</a></h2><p>双是推式子题。</p>
<p>我们不妨修改题面中式子的枚举变量 $k$ 为 $i$，以下均与 $i$ 为准。</p>
<p>首先把原式的 $f(i)$ 打开：</p>
<p>$&#x3D;\sum\limits_{i&#x3D;0}^n \sum\limits_{j&#x3D;0}^m a_j i^j\times x^i\times {n \choose i}$</p>
<p>观察到又有形如 $i^j\times {n\choose i}$ 的美妙形式，因为上两题已经推导，这里我们直接得出：</p>
<p>$&#x3D;\sum\limits_{i&#x3D;0}^n\sum\limits_{j&#x3D;0}^m a_j\times x^i\times \sum\limits_{k&#x3D;0}^j {j \brace k}k!{n \choose k}{n-k \choose i-k}$（换序求和）</p>
<p>$&#x3D;\sum\limits_{j&#x3D;0}^m a_j\sum\limits_{k&#x3D;0}^j {j \brace k}k!{n \choose k}\sum\limits_{i&#x3D;k}^n{n-k \choose i-k}x^i$（二项式定理）</p>
<p>$&#x3D;\sum\limits_{j&#x3D;0}^m a_j\sum\limits_{k&#x3D;0}^j {j \brace k}k!{n \choose k}x^k(x+1)^{n-k}$</p>
<p>$&#x3D;\sum\limits_{j&#x3D;0}^m a_j\sum\limits_{k&#x3D;0}^j {j \brace k}n^{\underline{k}}x^k(x+1)^{n-k}$</p>
<p>然后我们在 $\mathcal{O}(m^2 \log m)$ 的时间复杂度解决问题即可。</p>
<h2 id="U117299-染色（容斥-斯特林数）"><a href="#U117299-染色（容斥-斯特林数）" class="headerlink" title="U117299 染色（容斥+斯特林数）"></a><a href="https://www.luogu.com.cn/problem/U117299">U117299 染色（容斥+斯特林数）</a></h2><p>考虑首先只满足 “不存在颜色相同的 $2$ 列” 这一条件。记 $f_i$ 表示染 $i$ 行，不存在颜色相同的 $2$ 列的方案数。</p>
<p>显然是从 $A^i$ 种方案中排列 $m$ 个，则 $f_i&#x3D;(A^i)^{\underline{m}}$。</p>
<p>那么接下来我们想办法把行的限制也加进去，<strong>考虑将这些情况容斥掉</strong>，记 $g_i$ 表示染 $i$ 行，不存在颜色相同的 $2$ 行也不存在颜色相同的 $2$ 列。</p>
<p>我们可以通过<strong>枚举不同</strong>的行的数量来变成一个小规模子问题，假设不同的行有 $j$ 个，搞出 $j$ 行的方案数为 $g_j$，然后我们要做的问题就是 “将 $i$ 个不同的小球放入 $j$ 个集合，集合非空的方案数”，用第二类斯特林数，因此总转移方程为：$g_i&#x3D;f_i-\sum\limits_{j&#x3D;1}^{i-1}g_j{i \brace j}$。</p>
<p>时间复杂度 $\mathcal{O}(nm)$。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>对于斯特林数的相关题目，一般有如下标志&#x2F;转化&#x2F;思路：</p>
<ul>
<li><p>出现次数很多 $(10^9)$ 的幂次项</p>
</li>
<li><p>$i^j\times {n\choose i}$</p>
</li>
<li><p>容斥 &amp; 组合意义</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>总结</title>
    <url>/2023/03/03/%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="模拟赛-amp-赛后遇到的一些问题总结："><a href="#模拟赛-amp-赛后遇到的一些问题总结：" class="headerlink" title="模拟赛 &amp; 赛后遇到的一些问题总结："></a>模拟赛 &amp; 赛后遇到的一些问题总结：</h1><ul>
<li>线段树合并叶子的贡献也包括 $pre$ 和 $suf$。</li>
<li>数组尽量要定义到一起，不然急了之后可能就忘了修改。</li>
<li>有关 $\operatorname{mex}$ 的题目，线段树维护 $Seg_r$ 表示 $r$ 为右端点时满足条件最大的左断点 $l$ 使之 $\operatorname{mex}(l,r)&#x3D;x$，当 $x\rightarrow x+1$ 时，$Seg$ <strong>整体不增</strong>，且 $Seg$ 从 $1\sim n$ <strong>单调不降</strong>。</li>
<li>求多起点网格最短路，将所有起点扔进队列 <code>bfs()</code> 即可。</li>
<li>*当需求出近似答案区间在 $[0.5ans,2ans]$ 时，二进制倍增可能方便的得到 $[0.5ans,1ans]$ 的答案。</li>
<li>*对于维护楼梯数字（每一位数字都大于前一位数字的数），考虑用 $1111\cdots111,111\cdots111,\cdots,111,11,1$ 相加得到，采用分阶段 dp 维护相关性质。</li>
<li>当树上从祖先走一条<strong>固定路径</strong>到后代，但<strong>路径不好直接维护时</strong>，考虑转换为后代 $\rightarrow$ 祖先，再去判断路径是否匹配。</li>
<li>维护<strong>集合是否相同</strong>采用设定 $key$ 值 $Hash$ 维护。</li>
<li>考虑字符串变换时<strong>如果操作有互逆性</strong>，将字符串操作为<strong>字典序最小的字符串</strong>，然后比较 $x$ 和 $y$ 操作的最小字典序字符串 $x’$ 和 $y’$ 是否相同。</li>
<li>对于关于斜率为 $k$ 的直线，每个坐标转化为 $(x_i-x_i\cdot k,y_i)$ 变成比较斜率为 $0$ 的直线。</li>
<li>如果某一题目中动态规划的状态可以**分成两个独立的条件 $X$ 和 $Y$**，将其分成 $f_X$ 和 $g_Y$ 分别计算，最后将其合并。</li>
<li>不要忘记线段树维护矩阵乘法。</li>
<li>关于树上直径的期望，考虑枚举直径的最长长度，然后在这个长度下做 dp，设 $f_{u,j}$ 表示子树 $u$ 内<strong>最长直径为 $j$</strong> 的概率，枚举 $f_{u, j}+f_{v,k}\rightarrow f’_{u,j+k+w}$。</li>
<li>在 DAG 上删 $k$ 个点，可以<strong>以这 $k$ 个点跑拓扑排序算贡献</strong>。</li>
<li><strong>特殊最优化化问题</strong>可以使用 $\texttt{Simulated Annealint}$。</li>
<li>做 $\texttt{Hash}$ 问题时注意随机权值的大小，<strong>一般情况下越大越好</strong>。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>线段树合并</title>
    <url>/2023/02/19/segment-merging/</url>
    <content><![CDATA[<h1 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h1><p>线段树合并是动态开点线段树使用的进阶技巧，实现的操作即为合并两棵线段树上的对应节点的信息，注意此信息应该具有可合并的性质。 </p>
<p>具体的做法为：从两棵线段树的根节点开始向左右儿子递归，记录 <code>merge(p1, p2)</code> 表示两棵线段树分别走到了 $p_1$ 和 $p_2$ 节点，此时两棵树的节点<strong>对应着同一区间</strong> $[L,R]$ <strong>的合并</strong>。 </p>
<p>分两种终止情况： </p>
<ul>
<li><p>$p_1&#x3D;0 \lor p_2&#x3D;0$，表示一边产生了空节点。 </p>
</li>
<li><p>$L&#x3D;R$，表示已经到达叶子节点。</p>
</li>
</ul>
<p>其余情况递归 <code>merge(ls(p1), ls(p2))</code> 与 <code>merge(rs(p1), rs(p2))</code> 即可。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 以维护加法合并为例</span>
<span class="token keyword">int</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> p1<span class="token punctuation">,</span> <span class="token keyword">int</span> p2<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>p1 <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> p2 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> p1 <span class="token operator">+</span> p2<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tree<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">.</span>d <span class="token operator">+</span><span class="token operator">=</span> tree<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">;</span>
        <span class="token keyword">return</span> p1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>
    tree<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token function">ls</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ls</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    tree<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token function">rs</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rs</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pushup</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> p1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h2><p>对于一次递归，我们将两个线段树节点合并为一个线段树节点，因此每次递归总节点数改变量 $\mathcal{O}(1)$。不妨设合并前所有线段树节点数量为 $\mathcal{O}(n\log n)$，而合并后线段树节点数量仍为 $\mathcal{O}(n\log n)$，因此线段树节点改变数量为 $\mathcal{O}(n\log n)$，因此递归次数的时间复杂度仍为 $\mathcal{O}(n\log n)$。</p>
<p>但注意<strong>单次合并的复杂度并不是平均</strong> $\mathcal{O}(\log n)$，而只有 $n$ 次合并的总时间复杂度为 $\mathcal{O}(n\log n)$ 的性质。</p>
<h1 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h1><h2 id="P1456-Monkey-King"><a href="#P1456-Monkey-King" class="headerlink" title="P1456 Monkey King"></a><a href="https://www.luogu.com.cn/problem/P1456">P1456 Monkey King</a></h2><p>考虑对每一只猴子与其朋友我们维护出一个集合，那么考虑一次决斗，就是在两只猴子所对应的集合中挑选最大强壮值的猴子，并将两个集合合并，这是左偏树模板题，现在我们尝试用线段树合并解决。</p>
<p>那么我们先用并查集维护猴子朋友的集合，在用值域线段树维护强壮值，最后线段树上二分找到最大强壮值即可，合并时需要使用线段树合并。</p>
<p>时间复杂度 $\mathcal{O}(n\log n)$。</p>
<h2 id="P4556-Vani有约会-雨天的尾巴-x2F-【模板】线段树合并"><a href="#P4556-Vani有约会-雨天的尾巴-x2F-【模板】线段树合并" class="headerlink" title="P4556 [Vani有约会]雨天的尾巴 &#x2F;【模板】线段树合并"></a><a href="https://www.luogu.com.cn/problem/P4556">P4556 [Vani有约会]雨天的尾巴 &#x2F;【模板】线段树合并</a></h2><p>我们尝试对树上每个节点维护一个值域线段树来统计每种颜色的数量，需要先对路径进行差分使修改次数降至 $\mathcal{O}(m)$，从而使总结点数保证在 $\mathcal{O}(m\log n)$。</p>
<p>最后在树上做线段树合并，找线段树上最大值即可。</p>
<p>时间复杂度 $\mathcal{O}(m\log n)$。</p>
<h2 id="P1552-APIO2012-派遣"><a href="#P1552-APIO2012-派遣" class="headerlink" title="P1552 [APIO2012] 派遣"></a><a href="https://www.luogu.com.cn/problem/P1552">P1552 [APIO2012] 派遣</a></h2><p>首先我们钦定领导为 $u$，那么 $c_u$ 确定之后，每个忍者的贡献相同，我们所做的只是贪心的选择花费最小的忍者，那么在线段树上二分可以求出最多选出的忍者数。</p>
<p>最后我们按照 dfs 序钦定领导并线段树合并维护，时间复杂度 $\mathcal{O}(n\log n)$。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> M<span class="token punctuation">;</span>
<span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> l<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> rt<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> node<span class="token punctuation">;</span>

<span class="token keyword">struct</span> SegMent <span class="token punctuation">{</span>
    <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> cnt<span class="token punctuation">;</span>
    ll sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>tree<span class="token punctuation">[</span><span class="token number">3200005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

ll ans<span class="token punctuation">;</span>

<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">ls</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">rs</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span><span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">pushup</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt <span class="token operator">=</span> tree<span class="token punctuation">[</span><span class="token function">ls</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cnt <span class="token operator">+</span> tree<span class="token punctuation">[</span><span class="token function">rs</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cnt<span class="token punctuation">;</span>
    tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> tree<span class="token punctuation">[</span><span class="token function">ls</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">+</span> tree<span class="token punctuation">[</span><span class="token function">rs</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span> 

<span class="token keyword">int</span> <span class="token function">ins</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        p <span class="token operator">=</span> <span class="token operator">++</span>node<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span>
        tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">+</span><span class="token operator">=</span> l<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">=</span> <span class="token function">ins</span><span class="token punctuation">(</span><span class="token function">ls</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">=</span> <span class="token function">ins</span><span class="token punctuation">(</span><span class="token function">rs</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">pushup</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> p1<span class="token punctuation">,</span> <span class="token keyword">int</span> p2<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>p1 <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> p2 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> p1 <span class="token operator">+</span> p2<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tree<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt <span class="token operator">+</span><span class="token operator">=</span> tree<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt<span class="token punctuation">;</span>
        tree<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">+</span><span class="token operator">=</span> tree<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>
        tree<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token function">ls</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ls</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        tree<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token function">rs</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rs</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">pushup</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> p1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">que</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">&lt;=</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>  
    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> k <span class="token operator">/</span> l<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span><span class="token function">ls</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">></span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">que</span><span class="token punctuation">(</span><span class="token function">ls</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> tree<span class="token punctuation">[</span><span class="token function">ls</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cnt <span class="token operator">+</span> <span class="token function">que</span><span class="token punctuation">(</span><span class="token function">rs</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> k <span class="token operator">-</span> tree<span class="token punctuation">[</span><span class="token function">ls</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    cin <span class="token operator">>></span> n <span class="token operator">>></span> M<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cin <span class="token operator">>></span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span>i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        rt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">ins</span><span class="token punctuation">(</span>rt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1e9</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token function">que</span><span class="token punctuation">(</span>rt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1e9</span><span class="token punctuation">,</span> M<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token number">1ll</span> <span class="token operator">*</span> num <span class="token operator">*</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        rt<span class="token punctuation">[</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>rt<span class="token punctuation">[</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1e9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    
    cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P3521-POI2011-ROT-Tree-Rotations"><a href="#P3521-POI2011-ROT-Tree-Rotations" class="headerlink" title="P3521 [POI2011]ROT-Tree Rotations"></a><a href="https://www.luogu.com.cn/problem/P3521">P3521 [POI2011]ROT-Tree Rotations</a></h2><p>考虑对于一个节点 $u$ 的左右儿子，如果逆序对数量 $&gt;$ 正序对显然交换，且不会对后续其它交换造成影响，因此我们只需统计节点 $u$ 产生的正序对 $sum_0$ 与逆序对 $sum_1$，那么对答案的贡献就为 $\min(sum_0,sum_1)$。</p>
<p>现在考虑计算 $sum_0$ 和 $sum_1$。不妨设左子树 $p_1$，右子树 $p_2$，当我们在线段树合并的时候走到 $[L,R]$ 区间时，可以很自然地维护出 $p_2$ 中值域 $[1,L-1]$ 的数的数量 $pre$ 和值域 $[R+1,n]$ 的数的数量 $suf$。</p>
<p>维护方式很简单，当我们从 $[L,R]\rightarrow [L,mid]$ 时，加入 $p_2$ 中 $[mid+1,R]$ 至 $suf$；从 $[L,R]\rightarrow [mid+1,R]$ 时，加入 $p_2$ 中 $[L,mid]$ 至 $pre$，这样我们维护的信息永远是当前线段树合并的区间 $[L,R]$ 之外的信息。</p>
<p>统计信息只在合并终止情况时计算：</p>
<ul>
<li>$p_1\neq 0\land p_2&#x3D;0$，此时任意一个 $p_1$ 中的值域在 $[L,R]$ 中的数均与 $p_2$ 中的值域在 $[1,L-1]$ 的数形成逆序对，在 $[R+1,n]$ 形成正序对，那么使用乘法原理就是相应的对数。</li>
<li>$L&#x3D;R$，本题中由于每个节点的权值互不相同，因此不会有两棵树同时走到叶子节点的情况，因此不用考虑。</li>
</ul>
<p>最后重复执行合并流程，统计答案即可。</p>
<p>时间复杂度 $\mathcal{O}(n\log n)$。</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> lson<span class="token punctuation">[</span><span class="token number">400005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rson<span class="token punctuation">[</span><span class="token number">400005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span><span class="token number">400005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> RT<span class="token punctuation">;</span>
ll ans<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>u <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        u <span class="token operator">=</span> <span class="token operator">++</span>cnt<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cin <span class="token operator">>></span> v<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        lson<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>lson<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rson<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>rson<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> u<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> rt<span class="token punctuation">[</span><span class="token number">400005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> node<span class="token punctuation">;</span>

<span class="token keyword">struct</span> SegMent <span class="token punctuation">{</span>
    <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> cnt<span class="token punctuation">;</span>
<span class="token punctuation">}</span>tree<span class="token punctuation">[</span><span class="token number">4000005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">ls</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">rs</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span><span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">pushup</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt <span class="token operator">=</span> tree<span class="token punctuation">[</span><span class="token function">ls</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cnt <span class="token operator">+</span> tree<span class="token punctuation">[</span><span class="token function">rs</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cnt<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">ins</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        p <span class="token operator">=</span> <span class="token operator">++</span>node<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">=</span> <span class="token function">ins</span><span class="token punctuation">(</span><span class="token function">ls</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">=</span> <span class="token function">ins</span><span class="token punctuation">(</span><span class="token function">rs</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> 
        <span class="token function">pushup</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll sum0<span class="token punctuation">,</span> sum1<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> p1<span class="token punctuation">,</span> <span class="token keyword">int</span> p2<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> pre<span class="token punctuation">,</span> <span class="token keyword">int</span> suf<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>p2 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sum0 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1ll</span> <span class="token operator">*</span> suf <span class="token operator">*</span> tree<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt<span class="token punctuation">;</span>
        sum1 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1ll</span> <span class="token operator">*</span> pre <span class="token operator">*</span> tree<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt<span class="token punctuation">;</span>
        <span class="token keyword">return</span> p1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>p1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> p2<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> tmp <span class="token operator">=</span> tree<span class="token punctuation">[</span><span class="token function">ls</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cnt<span class="token punctuation">;</span>
    tree<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token function">ls</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ls</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> pre<span class="token punctuation">,</span> suf <span class="token operator">+</span> tree<span class="token punctuation">[</span><span class="token function">rs</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    tree<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token function">rs</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rs</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> pre <span class="token operator">+</span> tmp<span class="token punctuation">,</span> suf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pushup</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> p1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        rt<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">ins</span><span class="token punctuation">(</span>rt<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2e5</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>lson<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">dfs</span><span class="token punctuation">(</span>rson<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sum0 <span class="token operator">=</span> sum1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        rt<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> rt<span class="token punctuation">[</span>lson<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        rt<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>rt<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> rt<span class="token punctuation">[</span>rson<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2e5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>sum0<span class="token punctuation">,</span> sum1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>
    RT <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>RT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>RT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    
    cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
  </entry>
  <entry>
    <title>Hash 算法</title>
    <url>/2023/01/16/hash-algorithm/</url>
    <content><![CDATA[<h1 id="引入（摘自-OI-wiki）"><a href="#引入（摘自-OI-wiki）" class="headerlink" title="引入（摘自 OI-wiki）"></a>引入（摘自 OI-wiki）</h1><p>哈希表又称散列表，一种以「key-value」形式存储数据的数据结构。所谓以「key-value」形式存储数据，是指任意的键值 key 都唯一对应到内存中的某个位置。只需要输入查找的键值，就可以快速地找到其对应的 value。可以把哈希表理解为一种高级的数组，这种数组的下标可以是很大的整数，浮点数，字符串甚至结构体。</p>
<p>简单来说，对于<strong>任意类型（字符串，结构体也包含在内）</strong>的键值，向其<strong>唯一映射</strong>一个<strong>整型值</strong>，这样我们在不方便比较键值的情况下，能方便的通过对应的 value 比较。</p>
<p>注意 hash 只能比较是否相同而不能比大小。</p>
<h1 id="哈希冲突"><a href="#哈希冲突" class="headerlink" title="哈希冲突"></a>哈希冲突</h1><p>哈希算法的好坏取决于<strong>哈希函数</strong> $f(S)$ 的设定，其中哈希函数的定义为：给定一个元素 $S$，通过哈希函数 $f(S)$ 得到一个整型数值，即建立 $S$ 到 $f(S)$ 的映射。</p>
<p>那么什么样的哈希函数是优秀的？即我们尽量保证 $S$ 和 $f(S)$ 是<strong>一一映射的</strong>，即不希望出现 $S_1\neq S_2,f(S_1)&#x3D;f(S_2)$，如果出现这种情况，我们称之为<strong>哈希冲突</strong>。</p>
<h1 id="开散列法"><a href="#开散列法" class="headerlink" title="开散列法"></a>开散列法</h1><p>对于开散列法，我们在哈希表上的每个位置开一个链表，那么每次我们将 $S$ 存在 $f(S)$ 对应的 vector 中。</p>
<p>如果在一个大小为 $M$ 的哈希表向其中<strong>均匀的</strong>放入 $n$ 个元素，那么插入&#x2F;查询的复杂度为 $\mathcal{O}(\dfrac{n}{M})$。</p>
<p>通过合理的设定哈希函数，可使复杂度达到期望 $\mathcal{O}(\dfrac{n}{M})$。</p>
<p>当 $M$ 略大于 $n$ 时，我们可以认定哈希算法的复杂度为 $\mathcal{O}(1)$。</p>
<h1 id="闭散列法"><a href="#闭散列法" class="headerlink" title="闭散列法"></a>闭散列法</h1><p>这种写法不常用，只作介绍。</p>
<p>闭散列方法把所有记录直接存储在散列表中，如果发生冲突则根据某种方式继续进行探查。此时哈希表上的一个位置只存储一个元素。</p>
<p>常见的探查法如线性探查，如果在哈希表的 $p$ 位置产生冲突，就继续探查 $p+1,p+2,\cdots$ 直到找到空位，将其填入。</p>
<p>插入&#x2F;查询的复杂度在探查策略设计的合理时也是期望 $\mathcal{O}(\dfrac{n}{M})$。</p>
<h1 id="texttt-unordered-map-Hash-Table"><a href="#texttt-unordered-map-Hash-Table" class="headerlink" title="$\texttt{unordered map - Hash Table}$"></a>$\texttt{unordered map - Hash Table}$</h1><p>$\texttt{c++11}$ 中提供了一个哈希表 STL，$\texttt{unordered map}$，引入头文件 <code>#include &lt;unordered_map&gt;</code> 后即能使用，方法同 $\texttt{map}$。</p>
<p>但此哈希表在某些情况下的表现并不优秀，甚至比复杂度 $\mathcal{O}(\log n)$ 的 $\texttt{map}$ 还慢，于是我们应该自己手写一个真正可用的 $\texttt{Hash Table}$！</p>
<p>一个合格的哈希表，我们希望实现如下操作：</p>
<ul>
<li><p>（前置）设计哈希函数 <code>f()</code>，复杂度 $\mathcal{O}(1)$；</p>
</li>
<li><p>插入操作 <code>Insert()</code>，复杂度 $\mathcal{O}(1)$；</p>
</li>
<li><p>查询操作 <code>Query()</code>，复杂度 $\mathcal{O}(1)$；</p>
</li>
<li><p>修改操作 <code>Modify()</code>，复杂度 $\mathcal{O}(1)$；</p>
</li>
<li><p>清空操作 <code>Clear()</code>，复杂度 $\mathcal{O}(size)$。</p>
</li>
</ul>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>据此我们给出如下代码。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> Mod <span class="token operator">=</span> <span class="token number">998244353</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> M <span class="token operator">=</span> <span class="token punctuation">,</span> SIZE <span class="token operator">=</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 自行设定 M 和 SIZE 的大小</span>

<span class="token keyword">struct</span> HashTable <span class="token punctuation">{</span>
    
    <span class="token keyword">struct</span> Node <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 邻接表</span>
        ull nxt<span class="token punctuation">,</span> val<span class="token punctuation">,</span> key<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> data<span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
    
    <span class="token keyword">int</span> head<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> size<span class="token punctuation">;</span>
    
    <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span>ull key<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 哈希函数 O(1)</span>
        <span class="token keyword">return</span> key <span class="token operator">*</span> key <span class="token operator">*</span> key <span class="token operator">%</span> M<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 清空函数 O(size)</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            head<span class="token punctuation">[</span><span class="token function">f</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">int</span> <span class="token function">que</span><span class="token punctuation">(</span>ull key<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 查询函数 O(1)</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span><span class="token function">f</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">void</span> <span class="token function">modify</span><span class="token punctuation">(</span>ull key<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 修改函数 O(1)</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span><span class="token function">f</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">void</span> <span class="token function">ins</span><span class="token punctuation">(</span>ull key<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 插入函数 O(1)</span>
        data<span class="token punctuation">[</span><span class="token operator">++</span>size<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt <span class="token operator">=</span> head<span class="token punctuation">[</span><span class="token function">f</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">,</span> data<span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>
        head<span class="token punctuation">[</span><span class="token function">f</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> size<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>其中哈希函数可根据具体题目作微调，哈希表的大小为 $SIZE$，其中 $M$ 是一个略小于 $SIZE$ 的质数，是为了在哈希函数中使用。</p>
<h1 id="树哈希"><a href="#树哈希" class="headerlink" title="树哈希"></a>树哈希</h1><p>树哈希通过对树的结构进行哈希，来判断树之间是否同构。</p>
<p>一种可行的树哈希方法：子树按 hash 值排序后，以括号序字符串拼接。</p>
<p>注意这种做法也可能产生冲突，但冲突在于对括号序字符串的哈希，而不同的树一定对应一个不同的括号串。</p>
<h1 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h1><p>记几道比较典型的 Hash 题目。</p>
<h2 id="红蔷薇白玫瑰（rose）"><a href="#红蔷薇白玫瑰（rose）" class="headerlink" title="红蔷薇白玫瑰（rose）"></a>红蔷薇白玫瑰（rose）</h2><p>借用了学长的题目，可能会视情况保护隐私在文章中撤掉此题。</p>
<p>给⼀个 01-trie 和⼀个长为 $m$ 的 01 串 $S$，对于每个节点，如果按照 $S$ 能走到⼀个节点则输出该节点，否则输出 $0$。</p>
<p>解释一下题意：给定一棵有限节点的 01-trie，还有一个给定的长度为 $m$ 的 01 字符串，对于每一个结点 $u$，我们从 $u$ 开始，按照 01 字符串，如果是 0 往 0 儿子走，1 就往 1 儿子走，最后可能会走出 trie 或未走出 trie，如果未走出 trie，输出这个点最终到达的节点。</p>
<p>考场上确实被诈骗到 20min，开始的思路自然是想办法直接维护每个点到底能往下走到哪个点上，但很显然，多方向道路很难快速维护出全部答案。</p>
<p>那么接下来就是考虑<strong>什么情况下能走出一条唯一的路径</strong>，换句话说，一个节点的儿子可能不止一个，<strong>但每个节点的父亲当且仅当有</strong> $1$ <strong>个</strong>。那么我们转化成如下问题：对于节点 $u$，向上跳 $m$ 步走到 $fa$，问 $fa\rightarrow u$ 上的路径构成的 01 串是否匹配给定串。</p>
<p>那么这就是一个哈希可以解决的事情了，最终时间复杂度 $\mathcal{O}(n\log n)&#x2F;\mathcal{O}(n)$。</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> base <span class="token operator">=</span> <span class="token number">131</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span> adj<span class="token punctuation">[</span><span class="token number">300005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> str<span class="token punctuation">[</span><span class="token number">300005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
ull Pow<span class="token punctuation">[</span><span class="token number">300005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ha<span class="token punctuation">[</span><span class="token number">300005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ke<span class="token punctuation">;</span>
<span class="token keyword">int</span> anc<span class="token punctuation">[</span><span class="token number">300005</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> lg2<span class="token punctuation">[</span><span class="token number">300005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dep<span class="token punctuation">[</span><span class="token number">300005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> ans<span class="token punctuation">[</span><span class="token number">300005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">,</span> ull now<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> dep<span class="token punctuation">[</span>fa<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> anc<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> fa<span class="token punctuation">;</span>
    ha<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> now<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        anc<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> anc<span class="token punctuation">[</span>anc<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> e<span class="token operator">:</span> adj<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>first <span class="token operator">==</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>first<span class="token punctuation">,</span> u<span class="token punctuation">,</span> now <span class="token operator">*</span> base <span class="token operator">+</span> e<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">jump</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> lim<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> cur <span class="token operator">=</span> u<span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> lg2<span class="token punctuation">[</span>dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>anc<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> sum <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> lim<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sum <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> cur <span class="token operator">=</span> anc<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> lim<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> cur<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

ull <span class="token function">getha</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> ha<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">-</span> ha<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">*</span> Pow<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>

    Pow<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    lg2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Pow<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Pow<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> base<span class="token punctuation">;</span>
        lg2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> lg2<span class="token punctuation">[</span>i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> t<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> u <span class="token operator">>></span> v <span class="token operator">>></span> t<span class="token punctuation">;</span>
        adj<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> adj<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin <span class="token operator">>></span> m<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cin <span class="token operator">>></span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        ke <span class="token operator">=</span> ke <span class="token operator">*</span> base <span class="token operator">+</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token function">jump</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">getha</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> ke<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ans<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

    cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="矩阵（matrix）"><a href="#矩阵（matrix）" class="headerlink" title="矩阵（matrix）"></a>矩阵（matrix）</h2><p>借用了模拟赛的题目，可能会视情况保护隐私在文章中撤掉此题。</p>
<p>总司令小 M 给你了一个由小写字母构成的长度为 $n$ 字符串。</p>
<p>你可以用如下的方法生成一个字符矩阵：对于某个长度 $d\in[1,n]$ ，把字符串划分成不交的 $\lfloor\dfrac{n}{d}\rfloor$ 个长度为 $d$ 的连续子串，以及一个长度为 $n \text{ mod } d$ 的连续子串。我们取出所有长度为 $d$ 的子串，然后以任意顺序排列这些子串，每行放一个子串，形成一个 $\lfloor\dfrac{n}{d}\rfloor$ 行 $d$ 列的矩阵。</p>
<p>请你求能通过这样的方式形成的不同的矩阵的个数，对 $998244353$ 取模。</p>
<p>两个矩阵不同，当且仅当矩阵的行数或列数不同，或者存在某个位置使两个矩阵对应的字符不同。</p>
<p>本题中我们可以枚举 $d$，根据调和级数可知这一部分复杂度为 $\mathcal{O}(n\log n)$。</p>
<p>不同 $d$ 之间对应的矩阵必定不同，因此我们统计每个 $d$ 的取值有多少本质不同的矩阵。</p>
<p>我们枚举所有从 $n$ 个矩阵选出 $\lfloor\dfrac{n}{d}{\rfloor}$ 个字符串的情况，我们可以统计字符串出现次数，然后很轻易的用组合计数统计矩阵答案，那么我们接下来需要解决的问题：如果<strong>两种不同的划分方案对应同样的字符串集合，那么此时会算重</strong>，此时就需要想到对集合进行哈希的办法了，具体来说，我们先字符串哈希将字符串转为一个数，然后对于一个字符串集合，我们定义集合的哈希值为<strong>字符串哈希值之和的三次方并对</strong> $M$ 取模，那么我们用这个集合哈希值来盘集合是否相等就可以了，是不是十分的巧妙？</p>
<p>由于 $\texttt{map}$ 和 $\texttt{unordered_map}$ 均被卡掉，最终手写 $\texttt{Hash Table}$ 通过，时间复杂度 $\mathcal{O}(n\log n)$。</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> base <span class="token operator">=</span> <span class="token number">131</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> M <span class="token operator">=</span> <span class="token number">1999969</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> SIZE <span class="token operator">=</span> <span class="token number">2000005</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> Mod <span class="token operator">=</span> <span class="token number">998244353</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">;</span>
<span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">500005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> frac<span class="token punctuation">[</span><span class="token number">500005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> inv<span class="token punctuation">[</span><span class="token number">500005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
ull ha<span class="token punctuation">[</span><span class="token number">500005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Pow<span class="token punctuation">[</span><span class="token number">500005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sum<span class="token punctuation">;</span>
<span class="token keyword">int</span> tot<span class="token punctuation">;</span>
<span class="token keyword">int</span> ans<span class="token punctuation">;</span>

<span class="token keyword">struct</span> HashTable <span class="token punctuation">{</span>
    
    <span class="token keyword">struct</span> Node <span class="token punctuation">{</span>
        ull nxt<span class="token punctuation">,</span> val<span class="token punctuation">,</span> key<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> data<span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
    
    <span class="token keyword">int</span> head<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> size<span class="token punctuation">;</span>
    
    <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span>ull key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> key <span class="token operator">*</span> key <span class="token operator">*</span> key <span class="token operator">%</span> M<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            head<span class="token punctuation">[</span><span class="token function">f</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">int</span> <span class="token function">que</span><span class="token punctuation">(</span>ull key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span><span class="token function">f</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">void</span> <span class="token function">modify</span><span class="token punctuation">(</span>ull key<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span><span class="token function">f</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">void</span> <span class="token function">ins</span><span class="token punctuation">(</span>ull key<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        data<span class="token punctuation">[</span><span class="token operator">++</span>size<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt <span class="token operator">=</span> head<span class="token punctuation">[</span><span class="token function">f</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">,</span> data<span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>
        head<span class="token punctuation">[</span><span class="token function">f</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> size<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> umap<span class="token punctuation">,</span> vis<span class="token punctuation">;</span>

ll <span class="token function">qpow</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ll base <span class="token operator">=</span> a<span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> res <span class="token operator">=</span> res <span class="token operator">*</span> base <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
        b <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        base <span class="token operator">=</span> base <span class="token operator">*</span> base <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span> 

<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    a <span class="token operator">+</span><span class="token operator">=</span> b<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">>=</span> Mod<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a <span class="token operator">-</span><span class="token operator">=</span> Mod<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ll c <span class="token operator">=</span> <span class="token number">1ll</span> <span class="token operator">*</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">>=</span> Mod<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        c <span class="token operator">%</span><span class="token operator">=</span> Mod<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    a <span class="token operator">=</span> c<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">calc</span><span class="token punctuation">(</span>ull H<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> q <span class="token operator">=</span> umap<span class="token punctuation">.</span><span class="token function">que</span><span class="token punctuation">(</span>H<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>q <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        umap<span class="token punctuation">.</span><span class="token function">ins</span><span class="token punctuation">(</span>H<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        q <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">mul</span><span class="token punctuation">(</span>tot<span class="token punctuation">,</span> frac<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">mul</span><span class="token punctuation">(</span>tot<span class="token punctuation">,</span> inv<span class="token punctuation">[</span>q <span class="token operator">+</span> v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    umap<span class="token punctuation">.</span><span class="token function">modify</span><span class="token punctuation">(</span>H<span class="token punctuation">,</span> q <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">inline</span> ull <span class="token function">getha</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> ha<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">-</span> ha<span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> Pow<span class="token punctuation">[</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">isprime</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">*</span> i <span class="token operator">&lt;=</span> x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    
    cin <span class="token operator">>></span> <span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    n <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Pow<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> frac<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Pow<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Pow<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> base<span class="token punctuation">;</span>
        frac<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1ll</span> <span class="token operator">*</span> frac<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> i <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    inv<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">qpow</span><span class="token punctuation">(</span>frac<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span> Mod <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        inv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1ll</span> <span class="token operator">*</span> inv<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ha<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> ha<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> base <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>d <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>d<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> r <span class="token operator">=</span> n <span class="token operator">%</span> d<span class="token punctuation">,</span> q <span class="token operator">=</span> n <span class="token operator">/</span> d<span class="token punctuation">;</span>
        tot <span class="token operator">=</span> frac<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">;</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        umap<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        vis<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">*</span> d <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> L <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> d <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> R <span class="token operator">=</span> i <span class="token operator">*</span> d<span class="token punctuation">;</span>
            <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">getha</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> R<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            sum <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">getha</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> R<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">getha</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> R<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">getha</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> R<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> 
        <span class="token function">add</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> tot<span class="token punctuation">)</span><span class="token punctuation">;</span>
        vis<span class="token punctuation">.</span><span class="token function">ins</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">*</span> d <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> L <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token punctuation">(</span>i <span class="token operator">*</span> d<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> R <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> d <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> L0 <span class="token operator">=</span> <span class="token punctuation">(</span>q <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">*</span> d <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> R0 <span class="token operator">=</span> <span class="token punctuation">(</span>q <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> d<span class="token punctuation">;</span>
                <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">getha</span><span class="token punctuation">(</span>L0<span class="token punctuation">,</span> R0<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">getha</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> R<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                sum <span class="token operator">-</span><span class="token operator">=</span> <span class="token function">getha</span><span class="token punctuation">(</span>L0<span class="token punctuation">,</span> R0<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">getha</span><span class="token punctuation">(</span>L0<span class="token punctuation">,</span> R0<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">getha</span><span class="token punctuation">(</span>L0<span class="token punctuation">,</span> R0<span class="token punctuation">)</span><span class="token punctuation">;</span>
                sum <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">getha</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> R<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">getha</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> R<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">getha</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> R<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">.</span><span class="token function">que</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">add</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> tot<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    vis<span class="token punctuation">.</span><span class="token function">ins</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> 
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> d <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>d <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>d<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">getha</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">getha</span><span class="token punctuation">(</span>n <span class="token operator">-</span> d <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">add</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">add</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    
    cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P8499-NOI2022-挑战-NPC-Ⅱ"><a href="#P8499-NOI2022-挑战-NPC-Ⅱ" class="headerlink" title="P8499 [NOI2022] 挑战 NPC Ⅱ"></a><a href="https://www.luogu.com.cn/problem/P8499">P8499 [NOI2022] 挑战 NPC Ⅱ</a></h2><p>个人认为本题是整场 NOI 中<strong>代码难度和思维难度</strong>都是最低的一题。<del>时间复杂度其实可能会被诈骗到。</del></p>
<p>本题中出现了树同构，再根据下方提示给出的信息，不难想到此题与树哈希有关。</p>
<p>观察数据，$k\leq 5$，再根据题目名称，猜想此题是一个跟 $k$ 有关的非多项式算法。</p>
<p>定义 <code>match(uG, uH, lim)</code> 表示 $G$ 子树 $uG$ 和 $H$ 子树 $uH$ 是否能在删除 $lim$ 个节点后同构，这么定义的原因是：如果对于 $uG$ 和 $uH$，它们所对应的所有儿子均能同构，那么就同时会有 $uG$ 和 $uH$ 同构，也就是说，我们向下逐一去递归判断是否可行即可。</p>
<p>那么由于 $k\leq 5$，所以如果多于 $5&#x2F;lim$  棵子树未同构，则显然可以直接判为 <code>false</code>，但是<strong>所有已经能够匹配上的子树我们直接匹配是否是可行</strong>？</p>
<p>容易证明命题：如果存在已经匹配的子树，我们匹配后对答案是<strong>不劣的</strong>。</p>
<p>记 $G$ 的两棵子树为 $G_A$ 和 $G_B$，$H$ 的两棵子树为 $H_A$ 和 $H_B$，不妨设 $G_B$ 和 $H_B$ 同构，那么来比较 $G_A\rightarrow H_A$ 配对方案和 $G_A\rightarrow H_B,G_B\rightarrow H_A$ 配对方案：在删除的次数上看，$G_A\rightarrow H_A$ 删除的节点数为 $|G_A|-|H_A|$，$G_A\rightarrow H_B,G_B\rightarrow H_A$ 删除的节点数为 $|G_A|-|H_B|+|G_B|-|H_A|&#x3D;|G_A|-|H_A|$，两种决策等价。</p>
<p>从可行性上看，如果 $G_A\rightarrow H_B,G_B\rightarrow H_A$ 有合法方案，那么 $G_A\rightarrow H_A$ 也一定有合法方案。（包含关系有传递性）</p>
<p>综上可知，我们认为两种决策是等价的，因此优先匹配是可以的。</p>
<p>最终在实现上，由上述的性质我们可以把已经匹配的子树扔掉，只看未匹配成功的子树，如果最终有解，那么必须保证当前层未匹配的子树数量不超过当前层可支持删除最多的节点数 $lim$，我们暴力分配 $lim$ 在子树中的选择并递归检查就行。</p>
<p>理论复杂度上界为 $\mathcal{O}(\sum n_1\cdot \prod\limits_{i&#x3D;1}^k i!)$，经过合理的剪枝后可以通过。</p>
<p>由于当时写的代码中树哈希方法是错的，改为正确的树哈希后再放上来。</p>
<h2 id="P8819-CSP-S-2022-星战"><a href="#P8819-CSP-S-2022-星战" class="headerlink" title="P8819 [CSP-S 2022] 星战"></a><a href="https://www.luogu.com.cn/problem/P8819">P8819 [CSP-S 2022] 星战</a></h2><p><del>作为 Hash 题，它是有质量的；作为 CSP T3，它是没质量的。</del></p>
<p>本题要先使用语文阅读理解技巧，不会的请自行练习语文阅读水平，总结题意：实时修改&#x2F;查询当前状态是否是<strong>内向基环森林</strong>。</p>
<p>内向基环森林所满足的性质：每一个节点的出度均为一，也就是如果将 $u\rightarrow v$ 的权值看作 $v$，则内向基环森林出现的条件就是边集权值的集合<strong>恰好是</strong> $[1,n]$ <strong>的集合</strong>。</p>
<p>那么我们使用 Sum Hashing 维护集合即可，具体来说：对每个点随机权值 $val_i$，将边 $u\rightarrow v$ 的边权记录为 $val_v$，那么一次查询就是判断当前边权和是否等于 $\sum\limits_{i&#x3D;1}^n val_i$。这样你发现修改也是十分易于维护的。</p>
<p>总时间复杂度线性，为了求稳你可以随机多关键字哈希。</p>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">const</span> ll Mod <span class="token operator">=</span> <span class="token number">410347163957</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 随机一个用来哈希的质数</span>

mt19937 <span class="token function">engine</span><span class="token punctuation">(</span>chrono<span class="token operator">::</span>steady_clock<span class="token operator">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">time_since_epoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

ll <span class="token function">rand</span><span class="token punctuation">(</span>ll l<span class="token punctuation">,</span> ll r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    uniform_int_distribution<span class="token operator">&lt;</span>ll<span class="token operator">></span> <span class="token function">dist</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">dist</span><span class="token punctuation">(</span>engine<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> q<span class="token punctuation">,</span> lim <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
ll val<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">500005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> node<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">500005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sum<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">500005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tot<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> chk<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">bool</span> <span class="token function">isprime</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>ll i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">*</span> i <span class="token operator">&lt;=</span> x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">upd</span><span class="token punctuation">(</span>ll <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> ll b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    a <span class="token operator">+</span><span class="token operator">=</span> b<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">>=</span> Mod<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a <span class="token operator">-</span><span class="token operator">=</span> Mod<span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a <span class="token operator">+</span><span class="token operator">=</span> Mod<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> 

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
<span class="token comment" spellcheck="true">//	ll Mod = rand(1e11, 1e12);</span>
<span class="token comment" spellcheck="true">//	while(isprime(Mod) == false) {</span>
<span class="token comment" spellcheck="true">//		Mod = rand(1e11, 1e12);</span>
<span class="token comment" spellcheck="true">//	}</span>
<span class="token comment" spellcheck="true">//	cout &lt;&lt; Mod &lt;&lt; '\n';</span>
    
    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> lim<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            val<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> Mod <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">upd</span><span class="token punctuation">(</span>chk<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> val<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> u <span class="token operator">>></span> v<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> lim<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">upd</span><span class="token punctuation">(</span>tot<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> val<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">upd</span><span class="token punctuation">(</span>sum<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span> val<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">upd</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span> val<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    cin <span class="token operator">>></span> q<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> op<span class="token punctuation">,</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> op<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cin <span class="token operator">>></span> u <span class="token operator">>></span> v<span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> lim<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">upd</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span>val<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">upd</span><span class="token punctuation">(</span>tot<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span>val<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cin <span class="token operator">>></span> u<span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> lim<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">upd</span><span class="token punctuation">(</span>tot<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span>node<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                node<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cin <span class="token operator">>></span> u <span class="token operator">>></span> v<span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> lim<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">upd</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span> val<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">upd</span><span class="token punctuation">(</span>tot<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> val<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            cin <span class="token operator">>></span> u<span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> lim<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">upd</span><span class="token punctuation">(</span>tot<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> sum<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">-</span> node<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                node<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">bool</span> ok <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> lim<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>tot<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> chk<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ok <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"YES\n"</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"NO\n"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>哈希这类题目其实实现难度不难，难就难在看出它是 Hash Algorithm，还是努力提高自己的水平吧。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title>有向图强联通分量/无向图割点割边</title>
    <url>/2022/12/24/%E6%9C%89%E5%90%91%E5%9B%BE%E5%BC%BA%E8%81%94%E9%80%9A%E5%88%86%E9%87%8F-%E6%97%A0%E5%90%91%E5%9B%BE%E5%89%B2%E7%82%B9%E5%89%B2%E8%BE%B9/</url>
    <content><![CDATA[<h1 id="有向图强联通分量"><a href="#有向图强联通分量" class="headerlink" title="有向图强联通分量"></a>有向图强联通分量</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="强联通分量-text-Strongly-Connected-Component-SCC"><a href="#强联通分量-text-Strongly-Connected-Component-SCC" class="headerlink" title="强联通分量 $\text{(Strongly Connected Component, SCC)}$"></a>强联通分量 $\text{(Strongly Connected Component, SCC)}$</h3><p>如果<strong>有向图</strong>中任意两点都有相互可达的路径，则称此图为强联通图。</p>
<p>一个极大的强联通子图称为图的<strong>强联通分量</strong>。</p>
<img src="https://cdnjson.com/images/2023/01/10/7f829333a5cedc9b821b884ebfd4c794.png" alt="强连通分量.png" style="zoom:50%;" />

<h2 id="边的分类"><a href="#边的分类" class="headerlink" title="边的分类"></a>边的分类</h2><p>有向图中将边分为如下几类：</p>
<ul>
<li>树边：图上 dfs 树上的边。</li>
<li>后向边：dfs 树上后代指向祖先的边。</li>
<li>前向边：dfs 树上祖先指向后代的边但不包括树边。</li>
<li>交叉边：其它边，边的两个节点没有祖先后代关系。</li>
</ul>
<h2 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h2><p>那么我们如何求出一个图的所有强联通分量？</p>
<p>我们定义 $dfn_u$ 为通过树边走到 $u$ 节点的时间戳，$low_u$ 表示从 $u$ 子树节点出发，走<strong>一条</strong>交叉边或后向边可以到达 $v$ 的 $dfn_v$ 最小值，且 $v$ 可通过若干条边到达 $u$。</p>
<p>当我们 dfs 走到 $u$ 时，令 $dfn_u&#x3D;low_u$，并遍历边 $(u,v)$：</p>
<ul>
<li>后向边：我们通过一条后向边走到 $v$，且 $v$ 可到达 $u$，那么更新 $low_u&#x3D;\min(low_u,dfn_v)$。</li>
<li>交叉边：如果 $v$ 能够到达 $u$，则可以更新 $low_u&#x3D;\min(low_u,dfn_v)$。</li>
<li>树边：子树内的所有点都可作为 $u$ 的贡献，因此更新为 $low_u&#x3D;\min(low_u,low_v)$。</li>
<li>前向边：不会存在前向边。</li>
</ul>
<p>为了判断交叉边的 $v$ 是否能到达 $u$，我们用栈记录在 $u$ 之前遍历的点，那么栈内中存在的点即为所有能够到达 $u$ 的点。</p>
<p>如果最终 $dfn_u&#x3D;low_u$，那么 $u$ 无法回到比它时间戳小的节点，那么它就是一个强联通分量的根，此时将栈顶依次弹出，直到 $u$ 为止，这就是原图中的一个强连通分量。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> adj<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> scc<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> color<span class="token punctuation">;</span>
<span class="token keyword">int</span> stac<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> top<span class="token punctuation">;</span>
<span class="token keyword">bool</span> inst<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 记录节点是否在栈内</span>
<span class="token keyword">int</span> dfn<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> node<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">tarjan</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>node<span class="token punctuation">;</span>
    stac<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span> inst<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token operator">:</span> adj<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 树边</span>
            <span class="token function">tarjan</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
            low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>inst<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 后向边或交叉边</span>
            low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">==</span> low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">++</span>color<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> v <span class="token operator">=</span> stac<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span> top<span class="token operator">--</span><span class="token punctuation">;</span>
            inst<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            scc<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> color<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 标记强联通分量</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>v <span class="token operator">==</span> u<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h2><ol>
<li>将原有向图按强联通分量<strong>缩点</strong>（即将强联通分量中的所有节点看作一个点）后，原图形成了一个有向无环图。</li>
<li>缩点后的 DAG 中<strong>唯一出度为</strong> $0$ <strong>的点</strong>，则从任意点出发均可到达这个强连通分量对应的点。</li>
<li>缩点后的 DAG 所有入度不为 $0$ 的点，一定可以由某个入度为 $0$ 的点出发可达。</li>
</ol>
<h1 id="无向图割点割边"><a href="#无向图割点割边" class="headerlink" title="无向图割点割边"></a>无向图割点割边</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><h3 id="割点-text-Cut-Vertex"><a href="#割点-text-Cut-Vertex" class="headerlink" title="割点 $\text{(Cut Vertex)}$"></a>割点 $\text{(Cut Vertex)}$</h3><p>在无向联通图中，如果删除某点后，图变成不联通，称该点为割点。</p>
<h3 id="割边-text-Cut-Edge-Bridge"><a href="#割边-text-Cut-Edge-Bridge" class="headerlink" title="割边 $\text{(Cut Edge, Bridge)}$"></a>割边 $\text{(Cut Edge, Bridge)}$</h3><p>在无向联通图中，如果删除某边后，图变成不联通，称该边为割边。</p>
<h2 id="算法流程-1"><a href="#算法流程-1" class="headerlink" title="算法流程"></a>算法流程</h2><p>由于无向图中不存在前向边和交叉边，那么此时的 $low_u$ 重定义为 $u$ 子树节点出发通过<strong>一条后向边</strong>走到的 $v$ 的 $dfn_v$ 最小值。</p>
<p>那么割点和割边如何判断。</p>
<p>对于割点来说，当且仅当满足下列条件中的一个：</p>
<ul>
<li>$u$ 是 dfs 树的根节点，求 $u$ 有多于一个子树。（注意不是有多条边而是多条树边）</li>
<li>$dfn_u\leq low_v$，那么删去 $u$ 后，$v$ 及其子树无法回到 $u$ 以上的节点，则原图变为不联通。</li>
</ul>
<p>对于割边来说，需要满足 $dfn_u&lt;low_v$，即删去边 $(u,v)$ 后，$v$ 及其子树无法回到 $u$ 以及 $u$ 以上的节点，则原图不联通，注意 $dfn_u$ 不可以等于 $low_v$，如果等于则删去 $(u,v)$ 后 $v$ 还可以通过后向边回到 $u$，则原图仍然联通。</p>
<p>因此也可以看出<strong>割边一定是树边</strong>，若图中有重边，则这条边也不会是割边，注意判断。</p>
<img src="https://cdnjson.com/images/2023/01/10/11a1870a08407d18c23f9436eb6a4c0e.png" alt="割点割边.png" style="zoom: 80%;" />

<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> adj<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> edge<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 若有重边需要使用 map 判断</span>
<span class="token keyword">int</span> father<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 记录树边的 father</span>
<span class="token keyword">int</span> dfn<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> node<span class="token punctuation">;</span>
<span class="token keyword">bool</span> cv<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// cut vertex 割点</span>
<span class="token keyword">bool</span> ce<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// cut edge 割边   </span>
<span class="token comment" spellcheck="true">// 由于必须是树边，则此时 ce[i] 表示的是 (i, father[i]) 是否为割边</span>

<span class="token keyword">void</span> <span class="token function">tarjan</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    father<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> fa<span class="token punctuation">;</span>
    dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>node<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token operator">:</span> adj<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 树边</span>
            <span class="token function">tarjan</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>
            low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">&lt;</span> low<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> edge<span class="token punctuation">[</span><span class="token function">make_pair</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> edge<span class="token punctuation">[</span><span class="token function">make_pair</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                ce<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// (v, u) 为割边</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                cv<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>v <span class="token operator">!=</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 非树边</span>
            low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/*   main() 函数中关于割点割边的预处理   */</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> u <span class="token operator">>></span> v<span class="token punctuation">;</span>
        adj<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        adj<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
        edge<span class="token punctuation">[</span><span class="token function">make_pair</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
        edge<span class="token punctuation">[</span><span class="token function">make_pair</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">tarjan</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token operator">:</span> adj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>father<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    cnt<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            cv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>cnt <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h1 id="点双联通分量-x2F-边双联通分量"><a href="#点双联通分量-x2F-边双联通分量" class="headerlink" title="点双联通分量&#x2F;边双联通分量"></a>点双联通分量&#x2F;边双联通分量</h1><h2 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h2><h3 id="点双联通分量-text-Biconnected-Components-vcc"><a href="#点双联通分量-text-Biconnected-Components-vcc" class="headerlink" title="点双联通分量 $\text{(Biconnected Components, vcc)}$"></a>点双联通分量 $\text{(Biconnected Components, vcc)}$</h3><p>一个极大的不存在割点的分量，称为点双联通分量。</p>
<p>每条边属于一个点双。</p>
<img src="https://cdnjson.com/images/2023/01/10/92cf1240909f8a732ef9a9abae7c525a.png" alt="点双联通分量.png" style="zoom:80%;" />

<h3 id="边双联通分量-text-2-Edge-Connected-Components-ecc"><a href="#边双联通分量-text-2-Edge-Connected-Components-ecc" class="headerlink" title="边双联通分量 $\text{(2-Edge-Connected Components, ecc)}$"></a>边双联通分量 $\text{(2-Edge-Connected Components, ecc)}$</h3><p>一个极大的不存在割边的分量，称为边双联通分量。</p>
<p>每个点属于一个边双。</p>
<img src="https://cdnjson.com/images/2023/01/10/13b1e35ab39b901cb47e98a3f315a0dd.png" alt="边双联通分量.png" style="zoom:80%;" />

<h3 id="圆方树"><a href="#圆方树" class="headerlink" title="圆方树"></a>圆方树</h3><p>对于图中的每一个点双，我们做如下的操作：</p>
<ul>
<li>点双中的每个点看作圆点，新建一个方点；</li>
<li>拆掉原点双中的边</li>
<li>每个圆点向其方点连一条边。</li>
</ul>
<p>容易证明形成了一个树形结构，称之为圆方树。</p>
<p><img src="https://cdnjson.com/images/2023/01/10/d4eab38a8abdf5d22a5d6d37fb14de33.png" alt="圆方树.png"></p>
<h2 id="算法流程-2"><a href="#算法流程-2" class="headerlink" title="算法流程"></a>算法流程</h2><p>主要说一下圆方树的建法。</p>
<p>我们在 dfs 同时也要再去维护一个栈，当我们找到割点 $u$ 时，弹出栈顶的点直到 $u$ 但<strong>保留</strong> $u$ <strong>在栈内</strong>，因为 $u$ 同时还会构成其它的点双，因此还会连边。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> Ver<span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> adj<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> RST<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> stac<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> top<span class="token punctuation">;</span>
<span class="token keyword">int</span> dfn<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> node<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">tarjan</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>node<span class="token punctuation">;</span>
    stac<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token operator">:</span> adj<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">tarjan</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>
            low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token operator">++</span>Ver<span class="token punctuation">;</span>
                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">int</span> g <span class="token operator">=</span> stac<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span> top<span class="token operator">--</span><span class="token punctuation">;</span>
                    RST<span class="token punctuation">[</span>Ver<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    RST<span class="token punctuation">[</span>g<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>Ver<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>g <span class="token operator">==</span> v<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                RST<span class="token punctuation">[</span>Ver<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
                RST<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>Ver<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>v <span class="token operator">!=</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><ol>
<li><p>圆方树中与圆点相连的点一定是方点，与方点相连的点一定是圆点。</p>
</li>
<li><p>点双建圆方树后，两点 $(u,v)$ 路径上必经之点就是圆方树上路径圆点数量，也等于 $\dfrac{dist}{2}+1$。</p>
</li>
<li><p>边双一定是一棵树。</p>
</li>
<li><p><strong>一个节点属于多个点双</strong>等价于<strong>这个节点是割点</strong>。同时在圆方树中，这个点的度数大于 $1$。</p>
</li>
</ol>
<h1 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h1><h2 id="P2341-USACO03FALL-x2F-HAOI2006-受欢迎的牛-G"><a href="#P2341-USACO03FALL-x2F-HAOI2006-受欢迎的牛-G" class="headerlink" title="P2341 [USACO03FALL &#x2F; HAOI2006] 受欢迎的牛 G"></a><a href="https://www.luogu.com.cn/problem/P2341">P2341 [USACO03FALL &#x2F; HAOI2006] 受欢迎的牛 G</a></h2><p>如果将喜欢关系看作一条有向边，对于某一点，如果所有点都可到达这个点，则这个点对应的奶牛是明星。</p>
<p>根据上述结论，将有向图缩点后看出度为 $0$ 的强联通分量数量，若大于 $1$ 个，则没有明星奶牛，否则，唯一的一个出度为 $0$ 的强联通分量的所有奶牛都是明星奶牛。</p>
<p>时间复杂度 $\mathcal{O}(n)$。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> adj<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> dfn<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> node<span class="token punctuation">;</span>
<span class="token keyword">bool</span> inst<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> stac<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> top<span class="token punctuation">;</span>
<span class="token keyword">int</span> scc<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> color<span class="token punctuation">,</span> outDeg<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> bucket<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">tarjan</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>node<span class="token punctuation">;</span>
    stac<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span> inst<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token operator">:</span> adj<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">tarjan</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
            low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>inst<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">==</span> dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">++</span>color<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> v <span class="token operator">=</span> stac<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span> top<span class="token operator">--</span><span class="token punctuation">;</span>
            inst<span class="token punctuation">[</span>v<span class="token punctuation">]</span>	<span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            scc<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> color<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>v <span class="token operator">==</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span> 
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> u <span class="token operator">>></span> v<span class="token punctuation">;</span>
        adj<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">tarjan</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> u <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>u <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>u<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        bucket<span class="token punctuation">[</span>scc<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token operator">:</span> adj<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>scc<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">!=</span> scc<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                outDeg<span class="token punctuation">[</span>scc<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> color<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>outDeg<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cnt<span class="token operator">++</span><span class="token punctuation">;</span> p <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>cnt <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"0\n"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> bucket<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P3387-【模板】缩点"><a href="#P3387-【模板】缩点" class="headerlink" title="P3387 【模板】缩点"></a><a href="https://www.luogu.com.cn/problem/P3387">P3387 【模板】缩点</a></h2><p>由于一个强联通分量内的点互相可达，因此我们将强联通分量缩点并挂上联通分量内的点权之和，由于缩完点后的图是个 DAG，直接拓扑序跑 dp 即可。</p>
<h2 id="P2272-ZJOI2007-最大半连通子图"><a href="#P2272-ZJOI2007-最大半连通子图" class="headerlink" title="P2272 [ZJOI2007]最大半连通子图"></a><a href="https://www.luogu.com.cn/problem/P2272">P2272 [ZJOI2007]最大半连通子图</a></h2><p>由半联通子图的定义可知，我们在缩点的图上选一条链即可。方案数可以在求最大值的时候同时统计。（参考最短路计数）</p>
<p>注意要去掉重边。</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> p<span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> adj<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
map<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span> edge<span class="token punctuation">;</span>
<span class="token keyword">int</span> scc<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> color<span class="token punctuation">;</span>
<span class="token keyword">int</span> stac<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> top<span class="token punctuation">;</span>
<span class="token keyword">bool</span> inst<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> dfn<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> node<span class="token punctuation">;</span>
<span class="token keyword">int</span> inDeg<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> bucket<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> g<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> ans1<span class="token punctuation">,</span> ans2<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">upd</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    a <span class="token operator">+</span><span class="token operator">=</span> b<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">>=</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a <span class="token operator">-</span><span class="token operator">=</span> p<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">tarjan</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>node<span class="token punctuation">;</span>
    stac<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span> inst<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token operator">:</span> adj<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">tarjan</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
            low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>inst<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">==</span> low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">++</span>color<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> v <span class="token operator">=</span> stac<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span> top<span class="token operator">--</span><span class="token punctuation">;</span>
            inst<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            scc<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> color<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>u <span class="token operator">==</span> v<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">topo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> que<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> color<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>inDeg<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>que<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> u <span class="token operator">=</span> que<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token operator">:</span> adj<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&lt;</span> f<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> bucket<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                f<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> bucket<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span> g<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> g<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> f<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> bucket<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">upd</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span> g<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            inDeg<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>inDeg<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    cin <span class="token operator">>></span> n <span class="token operator">>></span> m <span class="token operator">>></span> p<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> u <span class="token operator">>></span> v<span class="token punctuation">;</span>
        adj<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">tarjan</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> u <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>u <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>u<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        bucket<span class="token punctuation">[</span>scc<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token operator">:</span> adj<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>scc<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">!=</span> scc<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> edge<span class="token punctuation">[</span><span class="token function">make_pair</span><span class="token punctuation">(</span>scc<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> scc<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                edge<span class="token punctuation">[</span><span class="token function">make_pair</span><span class="token punctuation">(</span>scc<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> scc<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                adj<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>scc<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>scc<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                inDeg<span class="token punctuation">[</span>scc<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">topo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> color<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ans1 <span class="token operator">&lt;</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ans1 <span class="token operator">=</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> ans2 <span class="token operator">=</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ans1 <span class="token operator">==</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">upd</span><span class="token punctuation">(</span>ans2<span class="token punctuation">,</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> ans1 <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span> <span class="token operator">&lt;&lt;</span> ans2 <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P5058-ZJOI2004-嗅探器"><a href="#P5058-ZJOI2004-嗅探器" class="headerlink" title="P5058 [ZJOI2004] 嗅探器"></a><a href="https://www.luogu.com.cn/problem/P5058">P5058 [ZJOI2004] 嗅探器</a></h2><p>可以观察到嗅探器应该安装在两点之间的割点上。那么我们可以建出圆方树，然后看两点间编号最小的节点。</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> I <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> s<span class="token punctuation">,</span> t<span class="token punctuation">;</span>
<span class="token keyword">int</span> Ver<span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> adj<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> RST<span class="token punctuation">[</span><span class="token number">400005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> stac<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> top<span class="token punctuation">;</span>
<span class="token keyword">int</span> dfn<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> node<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">tarjan</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>node<span class="token punctuation">;</span>
    stac<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token operator">:</span> adj<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">tarjan</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>
            low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token operator">++</span>Ver<span class="token punctuation">;</span>
                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">int</span> q <span class="token operator">=</span> stac<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span> top<span class="token operator">--</span><span class="token punctuation">;</span>
                    RST<span class="token punctuation">[</span>Ver<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    RST<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>Ver<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>q <span class="token operator">==</span> v<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                RST<span class="token punctuation">[</span>Ver<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
                RST<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>Ver<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>v <span class="token operator">!=</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">,</span> <span class="token keyword">int</span> tot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>u <span class="token operator">==</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>tot <span class="token operator">==</span> I<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"No solution\n"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            cout <span class="token operator">&lt;&lt;</span> tot <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>u <span class="token operator">!=</span> s <span class="token operator">&amp;&amp;</span> u <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tot <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>tot<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token operator">:</span> RST<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>v <span class="token operator">==</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">,</span> tot<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    cin <span class="token operator">>></span> n<span class="token punctuation">;</span> Ver <span class="token operator">=</span> n<span class="token punctuation">;</span>
    <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>cin <span class="token operator">>></span> u <span class="token operator">>></span> v <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>u <span class="token operator">+</span> v<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        adj<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        adj<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cin <span class="token operator">>></span> s <span class="token operator">>></span> t<span class="token punctuation">;</span>
    <span class="token function">tarjan</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"No solution\n"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> I<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P8867-NOIP2022-建造军营"><a href="#P8867-NOIP2022-建造军营" class="headerlink" title="P8867 [NOIP2022] 建造军营"></a><a href="https://www.luogu.com.cn/problem/P8867">P8867 [NOIP2022] 建造军营</a></h2><p>被疫情鸽掉的一次联赛，还好没考，不然就还没学点双。</p>
<p>既然是一道联赛题，我们还是以完整的流程观察这道题。</p>
<p>首先思考从何入手，我们可以看这句话：</p>
<blockquote>
<p>而此时 A 国接到情报，B 国将会于不久后袭击 A 国的一条道路，但具体的袭击目标却无从得知。如果 B 国袭击成功，<strong>这条道路将被切断，可能会造成 A 国某两个军营无法互相到达</strong>，这是 A 国极力避免的。</p>
</blockquote>
<p>观察到加粗文字就是割边的定义，且 B 国只会袭击一条道路，那么这就引导我们往割边方向考虑。</p>
<p>所以现在我们得知：当 B 国切掉割边后，A 国不联通，那么 A 国就需要保护这些割边，其它的边是什么情况暂时还没有头绪，且本题中我们还要考虑城市选择的情况。但是考虑到<strong>缩完点双后有向图变为树</strong>，不妨使用树形 dp 求方案数。</p>
<p>（以下的 dp 所涉及的子树基于缩了点双后的树形结构定义）</p>
<p>记 $dp_{u,0&#x2F;1}$ 表示 $u$ 子树内没选任何点&#x2F;选了一个以 $u$ 为连通块的方案数<strong>并强制不选择</strong> $(u,fa_u)$ 的方案数（避免在 $dp_{fa_u,0&#x2F;1}$ 时统计重复），$e_u$ 为 $u$ 子树内的<strong>边数</strong>（原图上的边数），$sz_u$ 为树上节点 $u$（边双）的<strong>点数和边数数量之和</strong>（原图的点数和边数）。</p>
<ul>
<li>当 $u$ 子树没选任何点时，则切断 $u$ 子树的任意边都不会影响联通情况，故 A 国随意钦定即可，$dp_{u,0}&#x3D;2^{e_u}$。</li>
<li>当 $u$ 子树选了一个以 $u$ 为根的联通块时，$u$ 节点内由点双性质，删除任意一条边仍然连通，故可随意钦定；考虑 $u$ 的儿子 $v$，当 $v$ 中没选点，$(u,v)$ 可选可不选，贡献 $2$ 种情况，当 $v$ 选点，因 $(u,v)$ 是割边，则必选，贡献 $1$ 种情况。但是上述讨论<strong>并没有排除</strong> $u$ <strong>子树内中没有选点的情况</strong>，因此需要减去，最终转移方程 $dp_{u,1}&#x3D;2^{sz_u}\prod(2dp_{v,0}+dp_{v,1})-dp_{u,0}$。</li>
</ul>
<p>做到这里就可以兴奋的做最后一步：统计答案，答案即为 $\sum dp_{u,1}\times 2^{m-e_u-[u\neq 1]}$。（联通块根节点不为 $1$ 时，强制不选 $(u,fa_u)$，因此减 $1$）</p>
<p>时间复杂度 $\mathcal{O}(n)$，用到了边双和基于边双概念定义的树形 dp，我认为思维难度大致与 <a href="https://www.luogu.com.cn/problem/P7961">[NOIP2021] 数列</a> 相同。</p>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> Mod <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> adj<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">500005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> pow2<span class="token punctuation">[</span><span class="token number">1500005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> father<span class="token punctuation">[</span><span class="token number">500005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> dfn<span class="token punctuation">[</span><span class="token number">500005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span><span class="token number">500005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> node<span class="token punctuation">;</span>
<span class="token keyword">bool</span> ce<span class="token punctuation">[</span><span class="token number">500005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> ecc<span class="token punctuation">[</span><span class="token number">500005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> color<span class="token punctuation">;</span>
<span class="token keyword">int</span> e<span class="token punctuation">[</span><span class="token number">500005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sz<span class="token punctuation">[</span><span class="token number">500005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">500005</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    a <span class="token operator">+</span><span class="token operator">=</span> b<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">>=</span> Mod<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a <span class="token operator">-</span><span class="token operator">=</span> Mod<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a <span class="token operator">+</span><span class="token operator">=</span> Mod<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    a <span class="token operator">=</span> <span class="token number">1ll</span> <span class="token operator">*</span> a <span class="token operator">*</span> b <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">tarjan</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    father<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> fa<span class="token punctuation">;</span>
    dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>node<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token operator">:</span> adj<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">tarjan</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>
            low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">&lt;</span> low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                ce<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>v <span class="token operator">!=</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">dfs1</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ecc<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token operator">:</span> adj<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ce<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">||</span> ce<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> father<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">||</span> u <span class="token operator">==</span> father<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ecc<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">dfs1</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">dfs2</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dp<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> pow2<span class="token punctuation">[</span>sz<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token operator">:</span> adj<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>v <span class="token operator">==</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">dfs2</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">mul</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2ll</span> <span class="token operator">*</span> dp<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">%</span> Mod <span class="token operator">+</span> dp<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        e<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> e<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    dp<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> pow2<span class="token punctuation">[</span>e<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">add</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span>dp<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token function">add</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token number">1ll</span> <span class="token operator">*</span> dp<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> pow2<span class="token punctuation">[</span>m <span class="token operator">-</span> e<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">(</span>u <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">%</span> Mod<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>
    pow2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n <span class="token operator">+</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        pow2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1ll</span> <span class="token operator">*</span> pow2<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> u <span class="token operator">>></span> v<span class="token punctuation">;</span>
        adj<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        adj<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">tarjan</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ecc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">dfs1</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token operator">++</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sz<span class="token punctuation">[</span>ecc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> u <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>u <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>u<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token operator">:</span> adj<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>u <span class="token operator">&lt;</span> v <span class="token operator">&amp;&amp;</span> ecc<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">==</span> ecc<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                sz<span class="token punctuation">[</span>ecc<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>ecc<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ce<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            adj<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>ecc<span class="token punctuation">[</span>father<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>ecc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            adj<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>ecc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>ecc<span class="token punctuation">[</span>father<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">dfs2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    
    cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P3469-POI2008-BLO-Blockad"><a href="#P3469-POI2008-BLO-Blockad" class="headerlink" title="P3469 [POI2008] BLO-Blockad"></a><a href="https://www.luogu.com.cn/problem/P3469">P3469 [POI2008] BLO-Blockad</a></h2><p>分情况讨论一下：</p>
<ul>
<li>如果不是割点，则删掉与它相邻的边后，其它点仍联通，答案 $2(n-1)$。</li>
<li>如果是割点考虑它在搜索树上的位置，贡献即为树上断掉这个点的边后，子树之间，子树之外的贡献就会产生贡献。</li>
</ul>
<p>所以可以在求割点的时候顺便维护信息，时间复杂度 $\mathcal{O}(n)$。</p>
<h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
<span class="token keyword">int</span> Ver<span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> adj<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> stac<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> top<span class="token punctuation">;</span>
<span class="token keyword">int</span> dfn<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> node<span class="token punctuation">;</span>
ll sz<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">tarjan</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ll sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    sz<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>node<span class="token punctuation">;</span>
    stac<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token operator">:</span> adj<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">tarjan</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>
            low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            sz<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> sz<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                sum <span class="token operator">+</span><span class="token operator">=</span> sz<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>
                ans<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> sz<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> sz<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                cnt<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>v <span class="token operator">!=</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>u <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> cnt <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>u <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> cnt <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> ans<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> ans<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> sum <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>sum <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> u <span class="token operator">>></span> v<span class="token punctuation">;</span>
        adj<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        adj<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">tarjan</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P4320-道路相遇"><a href="#P4320-道路相遇" class="headerlink" title="P4320 道路相遇"></a><a href="https://www.luogu.com.cn/problem/P4320">P4320 道路相遇</a></h2><p>建圆方树后由圆方树性质，转化为求圆方树上两点距离。</p>
<p>时间复杂度 $\mathcal{O}((n+q)\log n)$。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> q<span class="token punctuation">;</span>
<span class="token keyword">int</span> Ver<span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> adj<span class="token punctuation">[</span><span class="token number">500005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> RST<span class="token punctuation">[</span><span class="token number">1000005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> stac<span class="token punctuation">[</span><span class="token number">500005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> top<span class="token punctuation">;</span>
<span class="token keyword">int</span> dfn<span class="token punctuation">[</span><span class="token number">500005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span><span class="token number">500005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> node<span class="token punctuation">;</span>
<span class="token keyword">int</span> dep<span class="token punctuation">[</span><span class="token number">1000005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> lg2<span class="token punctuation">[</span><span class="token number">1000005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> anc<span class="token punctuation">[</span><span class="token number">1000005</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">tarjan</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>node<span class="token punctuation">;</span>
    stac<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token operator">:</span> adj<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">tarjan</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>
            low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token operator">++</span>Ver<span class="token punctuation">;</span>
                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">int</span> g <span class="token operator">=</span> stac<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span> top<span class="token operator">--</span><span class="token punctuation">;</span>
                    RST<span class="token punctuation">[</span>Ver<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    RST<span class="token punctuation">[</span>g<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>Ver<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>g <span class="token operator">==</span> v<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                RST<span class="token punctuation">[</span>Ver<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
                RST<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>Ver<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>v <span class="token operator">!=</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> dep<span class="token punctuation">[</span>fa<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> anc<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> fa<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        anc<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> anc<span class="token punctuation">[</span>anc<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token operator">:</span> RST<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>v <span class="token operator">==</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">getlca</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">&lt;</span> dep<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">swap</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">></span> dep<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> j <span class="token operator">=</span> lg2<span class="token punctuation">[</span>dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">-</span> dep<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        u <span class="token operator">=</span> anc<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>u <span class="token operator">==</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> u<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> lg2<span class="token punctuation">[</span>dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>anc<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> anc<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            u <span class="token operator">=</span> anc<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> v <span class="token operator">=</span> anc<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> anc<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span> Ver <span class="token operator">=</span> n<span class="token punctuation">;</span>
    lg2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        lg2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> lg2<span class="token punctuation">[</span>i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> u <span class="token operator">>></span> v<span class="token punctuation">;</span>
        adj<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        adj<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">tarjan</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    cin <span class="token operator">>></span> q<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> u <span class="token operator">>></span> v<span class="token punctuation">;</span>
        <span class="token keyword">int</span> lca <span class="token operator">=</span> <span class="token function">getlca</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> dep<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> dep<span class="token punctuation">[</span>lca<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P4630-APIO2018-铁人两项"><a href="#P4630-APIO2018-铁人两项" class="headerlink" title="P4630 [APIO2018] 铁人两项"></a><a href="https://www.luogu.com.cn/problem/P4630">P4630 [APIO2018] 铁人两项</a></h2><p>我们建出圆方树，枚举中转点 $c$，考虑统计 $s$ 和 $f$ 的选择方案。</p>
<p>我们不妨考虑在方点上计算贡献，取方点对应的点双大小作为 $c$ 的选择方案，而 $s$ 和 $f$ 要么在不同子树中，要么一个在子树中，一个在子树外，也可以轻易统计。</p>
<p>但是这样，显然方点的儿子也是方点子树内的选择方案，因此会出现重复统计的情况，这部分我们需要对于每一个圆点求出 $s$ 和 $f$ 的方案并将其容斥掉。</p>
<p>时间复杂度 $\mathcal{O}(n)$。</p>
<h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
<span class="token keyword">int</span> Ver<span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> adj<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> RST<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> stac<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> top<span class="token punctuation">;</span>
<span class="token keyword">int</span> dfn<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> node<span class="token punctuation">;</span>
ll sz<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Val<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
ll cnt<span class="token punctuation">;</span>
ll ans<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">tarjan</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>node<span class="token punctuation">;</span>
    stac<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token operator">:</span> adj<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">tarjan</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>
            low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token operator">++</span>Ver<span class="token punctuation">;</span>
                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">int</span> q <span class="token operator">=</span> stac<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span> top<span class="token operator">--</span><span class="token punctuation">;</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span>
                    RST<span class="token punctuation">[</span>Ver<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    RST<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>Ver<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>q <span class="token operator">==</span> v<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                RST<span class="token punctuation">[</span>Ver<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
                RST<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>Ver<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>v <span class="token operator">!=</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> M<span class="token punctuation">,</span> <span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Val<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>u <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>RST<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sz<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>u <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token operator">:</span> RST<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>v <span class="token operator">==</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>M<span class="token punctuation">,</span> v<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>
        sz<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> sz<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>
        ans <span class="token operator">+</span><span class="token operator">=</span> Val<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">*</span> sz<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>M <span class="token operator">-</span> sz<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>u <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span> ans <span class="token operator">+</span><span class="token operator">=</span> Val<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>M <span class="token operator">-</span> sz<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>sz<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> Val<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>M <span class="token operator">-</span> sz<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> Val<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>sz<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> ans <span class="token operator">+</span><span class="token operator">=</span> Val<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>M <span class="token operator">-</span> sz<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> sz<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span> Ver <span class="token operator">=</span> n<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> u <span class="token operator">>></span> v<span class="token punctuation">;</span>
        adj<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        adj<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token function">tarjan</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">dfs</span><span class="token punctuation">(</span>cnt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    
    cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="CF487E-Tourists"><a href="#CF487E-Tourists" class="headerlink" title="CF487E Tourists"></a><a href="https://www.luogu.com.cn/problem/CF487E">CF487E Tourists</a></h2><p>考虑建出圆方树，把方点的代价设为边双中的最小值。那么询问 $(a,b)$ 之间的最小值就变为圆方树上路径最小值，但是你发现修改并不好做。因为当你修改一个点的权值后，方点的新权值需要 $\mathcal{O}(n)$ 的时间重新寻找最小值。</p>
<p>对于这种情况，常规套路方法是用<strong>可重集维护方点儿子的权值</strong>，这样修改的权值，我们在可重集删除旧值并添加新值，就能以 $\mathcal{\log n}$ 的时间维护，最好我们上树剖来维护路径最小值，总时间复杂度 $\mathcal{O}(n\log^2 n)$。</p>
<p>注意当 $(a,b)$ 的最近公共祖先为方点时，实际上方点的父亲属于这个边双，我们需要同时与这个点权值取最小值。</p>
<h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> q<span class="token punctuation">;</span>
<span class="token keyword">int</span> Ver<span class="token punctuation">;</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> adj<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> RST<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> stac<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> top<span class="token punctuation">;</span>
<span class="token keyword">int</span> dfn<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> node<span class="token punctuation">;</span>
<span class="token keyword">int</span> dep<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> father<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sz<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> son<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> Top<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pos<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

multiset<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> s<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> tree<span class="token punctuation">[</span><span class="token number">800005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">ls</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">rs</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">pushup</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span><span class="token function">ls</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tree<span class="token punctuation">[</span><span class="token function">rs</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>pos<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">></span> n<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">*</span>s<span class="token punctuation">[</span>pos<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">build</span><span class="token punctuation">(</span><span class="token function">ls</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token function">rs</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pushup</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">upd</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">upd</span><span class="token punctuation">(</span><span class="token function">ls</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> x<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">upd</span><span class="token punctuation">(</span><span class="token function">rs</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> x<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">pushup</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">que</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> ql<span class="token punctuation">,</span> <span class="token keyword">int</span> qr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> ql <span class="token operator">&amp;&amp;</span> r <span class="token operator">==</span> qr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">>=</span> qr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">que</span><span class="token punctuation">(</span><span class="token function">ls</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> ql<span class="token punctuation">,</span> qr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> ql<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">que</span><span class="token punctuation">(</span><span class="token function">rs</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> ql<span class="token punctuation">,</span> qr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">que</span><span class="token punctuation">(</span><span class="token function">ls</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> ql<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">que</span><span class="token punctuation">(</span><span class="token function">rs</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> qr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">quePath</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>Top<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">!=</span> Top<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>dep<span class="token punctuation">[</span>Top<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> dep<span class="token punctuation">[</span>Top<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        res <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token function">que</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Ver<span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>Top<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        u <span class="token operator">=</span> father<span class="token punctuation">[</span>Top<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">&lt;</span> dep<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    res <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token function">que</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Ver<span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>v <span class="token operator">></span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> a<span class="token punctuation">[</span>father<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">tarjan</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>node<span class="token punctuation">;</span>
    stac<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token operator">:</span> adj<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">tarjan</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>
            low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token operator">++</span>Ver<span class="token punctuation">;</span>
                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">int</span> t <span class="token operator">=</span> stac<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span> top<span class="token operator">--</span><span class="token punctuation">;</span>
                    RST<span class="token punctuation">[</span>Ver<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    RST<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>Ver<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">==</span> v<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                RST<span class="token punctuation">[</span>Ver<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
                RST<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>Ver<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>v <span class="token operator">!=</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">dfs1</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> dep<span class="token punctuation">[</span>fa<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> sz<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> father<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> fa<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token operator">:</span> RST<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>v <span class="token operator">==</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">dfs1</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>
        sz<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> sz<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>sz<span class="token punctuation">[</span>son<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> sz<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            son<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">dfs2</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> Tp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>node<span class="token punctuation">,</span> Top<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> Tp<span class="token punctuation">;</span>
    pos<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>son<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">dfs2</span><span class="token punctuation">(</span>son<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> Tp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token operator">:</span> RST<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>v <span class="token operator">==</span> father<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">||</span> v <span class="token operator">==</span> son<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">dfs2</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    cin <span class="token operator">>></span> n <span class="token operator">>></span> m <span class="token operator">>></span> q<span class="token punctuation">;</span>
    Ver <span class="token operator">=</span> n<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> u <span class="token operator">>></span> v<span class="token punctuation">;</span>
        adj<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        adj<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">tarjan</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">dfs1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    node <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">dfs2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        s<span class="token punctuation">[</span>father<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Ver<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span> op<span class="token punctuation">;</span>
        <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> op <span class="token operator">>></span> x <span class="token operator">>></span> y<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token string">'C'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            s<span class="token punctuation">[</span>father<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            s<span class="token punctuation">[</span>father<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">upd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Ver<span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>father<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>s<span class="token punctuation">[</span>father<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">upd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Ver<span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
            a<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token function">quePath</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>NOI7级</category>
      </categories>
  </entry>
  <entry>
    <title>KMP/AC自动机</title>
    <url>/2022/12/11/KMP-AC%E8%87%AA%E5%8A%A8%E6%9C%BA/</url>
    <content><![CDATA[<h1 id="text-KMP"><a href="#text-KMP" class="headerlink" title="$\text{KMP}$"></a>$\text{KMP}$</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="子串"><a href="#子串" class="headerlink" title="子串"></a>子串</h3><p>在 CF 的题目中比较常见，我们可以直接引用：</p>
<blockquote>
<p>A string $a$ is a substring of a string $b$ if $a$ can be obtained from $b$ by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.</p>
</blockquote>
<p>简单的说，就是字符串中的<strong>连续一段字符</strong>，对于一个字符串 $s$，记其中的 $l\sim r$ 段为 $s(l,r)$。</p>
<h3 id="前缀"><a href="#前缀" class="headerlink" title="前缀"></a>前缀</h3><p>对于一个字符串 $s$，记前 $k$ 个字符构成的子串为 $pre(s,k)$。</p>
<h3 id="后缀"><a href="#后缀" class="headerlink" title="后缀"></a>后缀</h3><p>对于一个字符串 $s$，记后 $k$ 个字符构成的子串为 $suf(s,k)$。</p>
<h3 id="最长公共前缀"><a href="#最长公共前缀" class="headerlink" title="最长公共前缀"></a>最长公共前缀</h3><p>对于字符串 $s,t$，记 $s,t$ 的最长的完全相同的前缀长度为 $lcp(s,t)$。</p>
<hr>
<p>接下来是关于 $\text{KMP}$ 涉及到的概念。</p>
<h3 id="周期"><a href="#周期" class="headerlink" title="周期"></a>周期</h3><ul>
<li>$0&lt;p&lt;|s|$</li>
<li>$\forall i\in [1,|s|-p],s_i&#x3D;s_{i+p}$</li>
<li>满足以上条件，称 $p$ 为 $s$ 的周期。</li>
</ul>
<p><img src="https://cdnjson.com/images/2022/12/12/KMP-AC-01.png" alt="period"></p>
<h3 id="text-Border"><a href="#text-Border" class="headerlink" title="$\text{Border}$"></a>$\text{Border}$</h3><ul>
<li>$0&lt;r&lt;|s|$</li>
<li>$pre(s,r)&#x3D;suf(s,r)$</li>
<li>满足以上条件，称 $pre(s,r)$ 是 $s$ 的 $\text{Border}$，所以 $\text{Border}$ 指的<strong>仍是一个字符串</strong>。</li>
</ul>
<p><img src="https://cdnjson.com/images/2022/12/12/KMP-AC-02.png" alt="Border"></p>
<p>【重要结论】 $pre(s,k)$ 是 $s$ 的 $\text{Border}$ $\Leftrightarrow$ $|s|-k$ 是 $s$ 的周期</p>
<p>举个例子，我们假设下图的蓝色部分是一个 $\text{Border}$：</p>
<p><img src="https://cdnjson.com/images/2022/12/12/KMP-AC-03.png" alt="Also a Border"></p>
<p>那么红色就一定是一个满足要求的周期，反过来也同样成立。</p>
<p><img src="https://cdnjson.com/images/2022/12/12/KMP-AC-04.png" alt="Border to period"></p>
<h3 id="text-Border-的传递性"><a href="#text-Border-的传递性" class="headerlink" title="*$\text{Border}$ 的传递性"></a>*$\text{Border}$ 的传递性</h3><p>这个也是十分重要的结论。串 $s$ 是 $t$ 的 $\text{Border}$，串 $t$ 是 $r$ 的 $\text{Border}$，那么 $s$ 是 $r$ 的 $\text{Border}$。</p>
<p><img src="https://cdnjson.com/images/2022/12/12/KMP-AC-05.png" alt="subBorder"></p>
<p>一个更强的传递性：若串 $s$ 是 $r$ 的 $\text{Border}$，串 $t$ 是 $r$ 的 $\text{Border}$，且 $|t|&gt;|s|$ ，那么有 $s$ 是 $t$ 的 $\text{Border}$。	</p>
<p>有了这个性质，我们就能得到，如果向 $s$ 和它的最长 $\text{Border}$ 连边，那么对于 $s$ 的所有 $\text{Border}$，其一定构成了<strong>一条由</strong> $s$ <strong>到以空串结尾</strong>的一条链，且<strong>长度严格递减</strong>。这是 $\text{KMP}$ 正确性的前提。</p>
<h2 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h2><p>$\text{KMP}$ 主要是为了求出 $nxt$ 数组，其中 $nxt_i$ 表示 $pre(s,i)$ 的最长 $\text{Border}$ 的长度，</p>
<p>我们在循环 $i&#x3D;1\rightarrow n$ 时，同时记录一个临时变量 $j$，代表 $i-1$ 时能匹配 $\text{Border}$ 的最长长度 $j$，那么我们有 $s(i - j, i - 1)&#x3D;pre(s,j)$。</p>
<p>那么我们如何求出当前的 $j$ 呢？考虑如果我们想增大 $j$，则我们需要使下一个位置的字符继续保持匹配，即 $s_i&#x3D;s_{j+1}$。</p>
<p>当我们不能匹配时，我们通过不断的跳 $nxt$ 使得出现 $s_i&#x3D;s_{j+1}$，那么代码即为：</p>
<pre class=" language-cpp"><code class="language-cpp">nxt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        j <span class="token operator">=</span> nxt<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        j<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>我们需要说明两个问题来证明正确性：</p>
<ol>
<li><p>为什么这样求出的 $nxt_i$ 是最长的？</p>
<p>首先我们有，如果 $pre(s,j)$ 是 $pre(s,i)$ 的 $\text{Border}$，那么就一定有等价于 $pre(s,j-1)$ 是 $pre(s,i-1)$ 的 $\text{Border}$。</p>
<p>设 <code>while()</code> 停止时的 $j$ 为 $j_0$，那么 $j_0$ 一定是满足 $s_{j_0+1}&#x3D;s_i$ 的 $pre(s,i-1)$ 的最长 $\text{Border}$，而这个满足的最长 $pre(s,i-1)$ 的 $\text{Border}$ 就可以转化为 $pre(s,i)$ 的最长 $\text{Border}$。</p>
</li>
<li><p>为什么下面的 <code>if</code> 只需要判断一次（即不用也改成 <code>while()</code>）？</p>
<p>这个根据上面其实比较好推出。找到最大的 $j_0$ 后，最多只会往后匹配一个字符。如果能匹配超过一个字符，则我们的 $j_0$ 一定还会增大，因为此时这个更长的也会成为 $pre(s,i-1)$ 的更长的 $\text{Border}$ 且满足 $s_i&#x3D;s_{j_0+1}$。</p>
</li>
</ol>
<p>那么解决了这两个问题，我们就可以分析一下时间复杂度。在 <code>while()</code> 中，$j$ 每次严格减小 $1$ 且减到 $0$ 后不再减小；在 <code>if</code> 中，$j$ 每次最多增加 $1$。所以 $j$ 的变化次数是 $\mathcal{O}(n)$，最终的时间复杂度是 $\mathcal{O}(n)$ 的。</p>
<h1 id="失配树"><a href="#失配树" class="headerlink" title="失配树"></a>失配树</h1><p>将 $nxt_i$ 视为 $i$ 的父节点，那么一个 $nxt$ 数组就对应了一个节点编号为 $0\sim n$ 的数。</p>
<ul>
<li>点 $i$ 的所有祖先都是前缀 $pre(s,i)$ 的 $\text{Border}$</li>
<li>没有祖先关系的两个点 $i,j$ 没有 $\text{Border}$ 关系</li>
<li>$u$ 和 $v$ 在失配树的最近公共祖先就是 $pre(s,u)$ 和 $pre(s,v)$ 最长公共 $\text{Border}$。</li>
</ul>
<img src="https://cdnjson.com/images/2022/12/12/KMP-AC-06.png" alt="Fail Tree" style="zoom:80%;" />



<h1 id="text-AC-automaton"><a href="#text-AC-automaton" class="headerlink" title="$\text{AC-automaton}$"></a>$\text{AC-automaton}$</h1><p>AC 自动机，本质上是字典树和 $fail$ 指针构成。</p>
<p>简单说一下 AC 自动机的构建方法：</p>
<ol>
<li>对模式串建出 trie 树</li>
<li>用 bfs 建出 $fail$ 指针</li>
</ol>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">buildFail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> que<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>ch <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span>ch<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>trie<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>trie<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            trie<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">=</span> rt<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        fail<span class="token punctuation">[</span>trie<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> rt<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>que<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> u <span class="token operator">=</span> que<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>ch <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span>ch<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                fail<span class="token punctuation">[</span>trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> trie<span class="token punctuation">[</span>fail<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">;</span>
                que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">=</span> trie<span class="token punctuation">[</span>fail<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 注意这里执行的是类似路径压缩的操作</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> 
</code></pre>
<h2 id="fail-的性质"><a href="#fail-的性质" class="headerlink" title="$fail$ 的性质"></a>$fail$ 的性质</h2><p>当我们走到了 trie 树上的点 $p$ 时，那么匹配模式串的数量就是 fail 树上 $p$ 到 $rt$ 的点的个数。</p>
<p>可以用来维护一类 $fail$ 树上的子树修改等问题。</p>
<h1 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h1><h2 id="P5829【模板】失配树"><a href="#P5829【模板】失配树" class="headerlink" title="P5829【模板】失配树"></a><a href="https://www.luogu.com.cn/problem/P5829">P5829【模板】失配树</a></h2><p>建出失配树，对于一组询问 $(u,v)$，我们找其最近公共祖先即可，注意 $\text{Border}$ 长度严格小于这个串，所以是祖先关系的话需要再向上跳一个点。</p>
<p>时间复杂度 $\mathcal{O}(n+m\log n)$。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> q<span class="token punctuation">;</span>
<span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">1000005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> nxt<span class="token punctuation">[</span><span class="token number">1000005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> dep<span class="token punctuation">[</span><span class="token number">1000005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> lg<span class="token punctuation">[</span><span class="token number">1000005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> anc<span class="token punctuation">[</span><span class="token number">1000005</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">getlca</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">&lt;</span> dep<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">swap</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">></span> dep<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> j <span class="token operator">=</span> lg<span class="token punctuation">[</span>dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">-</span> dep<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        u <span class="token operator">=</span> anc<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>u <span class="token operator">==</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> u<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> lg<span class="token punctuation">[</span>dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>anc<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> anc<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            u <span class="token operator">=</span> anc<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> v <span class="token operator">=</span> anc<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> anc<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    cin <span class="token operator">>></span> <span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    n <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    lg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        lg<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> lg<span class="token punctuation">[</span>i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    nxt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            j <span class="token operator">=</span> nxt<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            j<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dep<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dep<span class="token punctuation">[</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        anc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            anc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> anc<span class="token punctuation">[</span>anc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    cin <span class="token operator">>></span> q<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> lca<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> u <span class="token operator">>></span> v<span class="token punctuation">;</span>
        lca <span class="token operator">=</span> <span class="token function">getlca</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>lca <span class="token operator">==</span> u <span class="token operator">||</span> lca <span class="token operator">==</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            lca <span class="token operator">=</span> nxt<span class="token punctuation">[</span>lca<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        cout <span class="token operator">&lt;&lt;</span> lca <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P3426-POI2005-SZA-Template"><a href="#P3426-POI2005-SZA-Template" class="headerlink" title="P3426 [POI2005] SZA-Template"></a><a href="https://www.luogu.com.cn/problem/P3426">P3426 [POI2005] SZA-Template</a></h2><p>首先需要考虑到什么样的印章是合法的，首先我们的印章<strong>必定是一个前缀</strong>，这就引导我们考虑与 $nxt$ 的关系，假设印章为 $pre(s,j)$，那么对于所有能盖章的结尾位置 $i$，那么 $pre(s,j)$ 一定是 $pre(s,i)$ 的 $\text{Border}$，即 $pre(s,j)&#x3D;s(i-j+1,i)$。那么对于每一个合法的印章，则我们需要使所有能盖章的位置之间的任意两两距离都不超过 $j$ 才行。当然 $pre(s,j)$ 还必须是 $s$ 的 $\text{Border}$。</p>
<p>那么转化到失配树上，答案所对应的节点 $u$ 有如下性质：</p>
<ul>
<li>在 $0\rightarrow n$ 的链上</li>
<li>$u$ 的子树内所有点在值域上相邻之差不超过 $u$</li>
</ul>
<p>考虑这是单调的，那么我们可以从 $0$ 往下走，把其它子树的节点在值域数据结构中删掉，维护最大值，判断是否超过 $u$，而因为只需支持删除且答案单调不降，使用链表维护。</p>
<p>时间复杂度 $\mathcal{O}(n)$。</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">;</span>
<span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">500005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> adj<span class="token punctuation">[</span><span class="token number">500005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> father<span class="token punctuation">[</span><span class="token number">500005</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// nxt</span>
<span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> pre<span class="token punctuation">[</span><span class="token number">500005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span><span class="token number">500005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> lisT<span class="token punctuation">[</span><span class="token number">500005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0 -> n</span>

<span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token keyword">int</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nxt<span class="token punctuation">[</span>q<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1e9</span> <span class="token operator">&amp;&amp;</span> pre<span class="token punctuation">[</span>q<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1e9</span><span class="token punctuation">)</span> res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>q<span class="token punctuation">]</span> <span class="token operator">-</span> pre<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pre<span class="token punctuation">[</span>q<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1e9</span><span class="token punctuation">)</span> nxt<span class="token punctuation">[</span>pre<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> nxt<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nxt<span class="token punctuation">[</span>q<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1e9</span><span class="token punctuation">)</span> pre<span class="token punctuation">[</span>nxt<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> pre<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">del</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token operator">:</span> adj<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>v <span class="token operator">==</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    cin <span class="token operator">>></span> <span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    n <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    father<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> adj<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            j <span class="token operator">=</span> father<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            j<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        father<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span> adj<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1e9</span> <span class="token operator">:</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1e9</span> <span class="token operator">:</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> u <span class="token operator">=</span> n<span class="token punctuation">;</span>u <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>u <span class="token operator">=</span> father<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        lisT<span class="token punctuation">[</span><span class="token operator">++</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">reverse</span><span class="token punctuation">(</span>lisT <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> lisT <span class="token operator">+</span> t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> t<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> u <span class="token operator">=</span> lisT<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>father<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">&lt;=</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cout <span class="token operator">&lt;&lt;</span> u <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P2375-NOI2014-动物园"><a href="#P2375-NOI2014-动物园" class="headerlink" title="P2375 [NOI2014] 动物园"></a><a href="https://www.luogu.com.cn/problem/P2375">P2375 [NOI2014] 动物园</a></h2><p>转化的失配树上，则每个节点 $i$ 所对应的答案，是 $0\rightarrow i$ 的一段前缀，在树上倍增寻找最大的符合要求就能解决，时间复杂度 $\mathcal{O}(n\log n)$，有没有更优的做法。</p>
<p>考虑 $\text{KMP}$ 的具体意义，求 $pre(s,i)$ 的最长 $\text{Border}$。那么我们修改一下，改为求 $pre(s,i)$ 的最长且不超过 $\lfloor\dfrac{i}{2}\rfloor$ 的 $\text{Border}$，是否仍然可以递推。</p>
<p>答案是可以的，根据原 $\text{KMP}$ 算法的分析，我们很容易证明新的 $j’$ 会是下一个串的新 $\text{Border}$，而长度自然也是可以满足的，$\lfloor\dfrac{i}{2}\rfloor+1\geq \lfloor\dfrac{i+1}{2}\rfloor$，那么往后至多 $1$ 个即能找到最长的符合的 $\text{Border}$，记录一下 $dep_i$ 表示 $0\rightarrow i$ 上点的数量就行。</p>
<p>时间复杂度 $\mathcal{O}(n)$。</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp">nxt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> dep<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        j <span class="token operator">=</span> nxt<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        j<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">,</span> dep<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dep<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        j <span class="token operator">=</span> nxt<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        j<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">></span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        j <span class="token operator">=</span> nxt<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">*</span> <span class="token punctuation">(</span>dep<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P3435-POI2006-OKR-Periods-of-Words"><a href="#P3435-POI2006-OKR-Periods-of-Words" class="headerlink" title="P3435 [POI2006] OKR-Periods of Words"></a><a href="https://www.luogu.com.cn/problem/P3435">P3435 [POI2006] OKR-Periods of Words</a></h2><p>由于一个 $\text{Border}$ 对应一个周期，根据题意，我们可以得知 $pre(s,i)$ 周期的长度区间为 $[\lceil\dfrac{i}{2}\rceil,i)$，那么 $\text{Border}$ 所对应的长度区间为 $(0,i-\lceil\dfrac{i}{2}\rceil]$，即失配树上根的一段路径。</p>
<p>可以 $\mathcal{O}(n\log n)&#x2F;\mathcal{O}(n)$ 解决。</p>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">;</span>
<span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">1000005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> nxt<span class="token punctuation">[</span><span class="token number">1000005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
ll ans<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    cin <span class="token operator">>></span> n <span class="token operator">>></span> <span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    nxt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            j <span class="token operator">=</span> nxt<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            j<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>nxt<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            j <span class="token operator">=</span> nxt<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    
    cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P3193-HNOI2008-GT考试"><a href="#P3193-HNOI2008-GT考试" class="headerlink" title="P3193 [HNOI2008] GT考试"></a><a href="https://www.luogu.com.cn/problem/P3193">P3193 [HNOI2008] GT考试</a></h2><p>考虑什么样的串 $X$ 不能完全匹配一个串 $A$，也就是用 $X$ 串跑 $\text{KMP}$ 时，不存在任意一个 $i$，使得 $X(i-m+1,i)&#x3D;A$。</p>
<p>那么我们可以通过记录状态的方式，表示当前与 $X$ 串的匹配长度，这样我们可以使用 $\text{KMP}$ 更新下一位的匹配位置。</p>
<p>记录 $f_{j,c}$ 的值为 $j_0$，表示当前 $A$ 串的 $j$ 位与 $X$ 串的前 $j$ 位完全匹配时，在 $A$ 串后面加一个字符 $c$ 后新的匹配长度为 $j_0$。</p>
<p>那么 $dp_{i,j}$ 表示 $A$ 的前 $i$ 位中，最后的 $j$ 个字符与 $X$ 串的前 $j$ 为完全匹配时的方案数。那么枚举一个转移字符 $c$，有转移方程：$dp_{i,j}\stackrel{c}\rightarrow dp_{i+1,f_{j,c}}$。</p>
<p>由于我们最终不能有满足完全匹配的 $A$ 串，那么在转移的时候，任何转移到 $dp_{i,m}$ 的转移都不能在答案的计算之内，所以我们可只在 $j\in [0,m)$ 转移，最终答案为 $\sum\limits_{0\leq j&lt;m}dp_{n,j}$。</p>
<p>观察到转移与 $i$ 无关，可用矩阵快速幂加速。</p>
<p>最终复杂度 $\mathcal{O}(26m^2+m^3\log n)$。</p>
<h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> p<span class="token punctuation">;</span>
<span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> nxt<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> ans<span class="token punctuation">;</span>

<span class="token keyword">struct</span> Mat <span class="token punctuation">{</span>
    <span class="token keyword">int</span> num<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    
    <span class="token function">Mat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    Mat <span class="token keyword">operator</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Mat <span class="token operator">&amp;</span>A<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        Mat res<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>k <span class="token operator">&lt;</span> m<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    res<span class="token punctuation">.</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">*</span> A<span class="token punctuation">.</span>num<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                res<span class="token punctuation">.</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">%</span><span class="token operator">=</span> p<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span> 

Mat <span class="token function">Matpow</span><span class="token punctuation">(</span>Mat A<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Mat base <span class="token operator">=</span> A<span class="token punctuation">,</span> res<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> res <span class="token operator">=</span> res <span class="token operator">*</span> base<span class="token punctuation">;</span>
        b <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        base <span class="token operator">=</span> base <span class="token operator">*</span> base<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> F<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> G<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    cin <span class="token operator">>></span> n <span class="token operator">>></span> m <span class="token operator">>></span> p<span class="token punctuation">;</span>
    cin <span class="token operator">>></span> <span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    nxt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            j <span class="token operator">=</span> nxt<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            j<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    Mat A<span class="token punctuation">,</span> B<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">;</span>c <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">;</span>c<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                j <span class="token operator">=</span> nxt<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                j<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            A<span class="token punctuation">.</span>num<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    B <span class="token operator">=</span> <span class="token function">Matpow</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    F<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        F<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>k <span class="token operator">&lt;</span> m<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            G<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> F<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">*</span> B<span class="token punctuation">.</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        ans <span class="token operator">+</span><span class="token operator">=</span> G<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> p<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">%</span> p <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    
    cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="U194290-【HDOI2021提高组T2】"><a href="#U194290-【HDOI2021提高组T2】" class="headerlink" title="U194290 【HDOI2021提高组T2】"></a><a href="https://www.luogu.com.cn/problem/U194290">U194290 【HDOI2021提高组T2】</a></h2><p>本题你正着看这个串十分难办，因为串都是动的且无法跟一段前缀扯上关系。</p>
<p>但当你注意到四元组 $(l,r,x,y)$ 的条件之一是 $s(n-len+1,n)&#x3D;s(l,r)&#x3D;s(x,y)$。</p>
<p>看到 $s(n-len+1,n)$，说明<strong>一个四元组需要对应与字符串后缀相同</strong>，能不能转化成 $\text{Border}$ 呢？</p>
<p>可以。<strong>将串翻转后</strong>，我们将四元组 $(l,r,x,y)$ 等价于 $s’(1,len)&#x3D;s‘(l,r)&#x3D;s’(x,y)$，$r&lt;y$，权值为 $|w_r-w_y|$。</p>
<p>那么当 $pre(s’,r)$ 和 $pre(s’,y)$ 都有 $pre(s’,len)$ 这个 $\text{Border}$ 时就是一个合法的四元组 $(l,r,x,y)$ 的充要条件（不考虑 $r&lt;y$ 的情况下），对应到失配树上就是一个节点 $u$ 的子树内<strong>任意两个节点</strong>都构成四元组，如果加上 $r&lt;y$ 就是任意两个点构成的有序点对构成一个四元组。</p>
<p>对于每个节点的 $u$ 的子树内都要查询，使用线段树合并维护信息即可。</p>
<p>线段树支持插入、合并、查询值域相邻两点最小值、查询值域上有序点对的差的和。（因为 $|w_r-w_y|&#x3D;|w_y-w_r|$，所以统计有序的差的和恰好就是任意两个有序点差的绝对值的总和）</p>
<p>时间复杂度 $\mathcal{O}(n\log n)$，空间复杂度 $\mathcal{O}(n\log n)$，空间常数很大。</p>
<h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> Mod <span class="token operator">=</span> <span class="token number">20050801</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">;</span>
<span class="token keyword">int</span> w<span class="token punctuation">[</span><span class="token number">500005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">500005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> nxt<span class="token punctuation">[</span><span class="token number">500005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> adj<span class="token punctuation">[</span><span class="token number">500005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
ll mi <span class="token operator">=</span> <span class="token number">1e10</span><span class="token punctuation">,</span> res<span class="token punctuation">;</span>

<span class="token keyword">int</span> rt<span class="token punctuation">[</span><span class="token number">500005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> node<span class="token punctuation">;</span>

<span class="token keyword">struct</span> SegMent <span class="token punctuation">{</span>
    <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> ml<span class="token punctuation">,</span> mr<span class="token punctuation">,</span> mi<span class="token punctuation">,</span> sum<span class="token punctuation">,</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>tree<span class="token punctuation">[</span><span class="token number">15500005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">ls</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">rs</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span><span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">pushup</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>ml <span class="token operator">=</span> <span class="token punctuation">(</span>tree<span class="token punctuation">[</span><span class="token function">ls</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ml <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> tree<span class="token punctuation">[</span><span class="token function">rs</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ml <span class="token operator">:</span> tree<span class="token punctuation">[</span><span class="token function">ls</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ml<span class="token punctuation">;</span>
    tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>mr <span class="token operator">=</span> <span class="token punctuation">(</span>tree<span class="token punctuation">[</span><span class="token function">rs</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> tree<span class="token punctuation">[</span><span class="token function">ls</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mr <span class="token operator">:</span> tree<span class="token punctuation">[</span><span class="token function">rs</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mr<span class="token punctuation">;</span>
    tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>mi <span class="token operator">=</span> <span class="token number">2e9</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span><span class="token function">ls</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cnt <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>mi <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>mi<span class="token punctuation">,</span> tree<span class="token punctuation">[</span><span class="token function">ls</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mi<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span><span class="token function">rs</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cnt <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>mi <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>mi<span class="token punctuation">,</span> tree<span class="token punctuation">[</span><span class="token function">rs</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mi<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span><span class="token function">ls</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mr <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> tree<span class="token punctuation">[</span><span class="token function">rs</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ml <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>mi <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>mi<span class="token punctuation">,</span> tree<span class="token punctuation">[</span><span class="token function">rs</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ml <span class="token operator">-</span> tree<span class="token punctuation">[</span><span class="token function">ls</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt <span class="token operator">=</span> tree<span class="token punctuation">[</span><span class="token function">ls</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cnt <span class="token operator">+</span> tree<span class="token punctuation">[</span><span class="token function">rs</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cnt<span class="token punctuation">;</span>
    tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> <span class="token punctuation">(</span>tree<span class="token punctuation">[</span><span class="token function">ls</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">+</span> tree<span class="token punctuation">[</span><span class="token function">rs</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
    tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>res <span class="token operator">=</span> tree<span class="token punctuation">[</span><span class="token function">ls</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>res <span class="token operator">+</span> tree<span class="token punctuation">[</span><span class="token function">rs</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>res <span class="token operator">+</span> <span class="token number">1ll</span> <span class="token operator">*</span> tree<span class="token punctuation">[</span><span class="token function">ls</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cnt <span class="token operator">*</span> tree<span class="token punctuation">[</span><span class="token function">rs</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">%</span> Mod <span class="token operator">-</span> <span class="token number">1ll</span> <span class="token operator">*</span> tree<span class="token punctuation">[</span><span class="token function">rs</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cnt <span class="token operator">*</span> tree<span class="token punctuation">[</span><span class="token function">ls</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
    tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>res <span class="token operator">=</span> <span class="token punctuation">(</span>tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>res <span class="token operator">%</span> Mod <span class="token operator">+</span> Mod<span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">upd</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        p <span class="token operator">=</span> <span class="token operator">++</span>node<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span>
        tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> <span class="token punctuation">(</span>tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">+</span> l<span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
        tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>ml <span class="token operator">=</span> tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>mr <span class="token operator">=</span> l<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>mi <span class="token operator">=</span> <span class="token number">2e9</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>mi <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">=</span> <span class="token function">upd</span><span class="token punctuation">(</span><span class="token function">ls</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">=</span> <span class="token function">upd</span><span class="token punctuation">(</span><span class="token function">rs</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">pushup</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> p1<span class="token punctuation">,</span> <span class="token keyword">int</span> p2<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>p1 <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> p2 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> p1 <span class="token operator">+</span> p2<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tree<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt <span class="token operator">+</span><span class="token operator">=</span> tree<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt<span class="token punctuation">;</span>
        tree<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> <span class="token punctuation">(</span>tree<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">+</span> tree<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>	
        tree<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">.</span>ml <span class="token operator">=</span> tree<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">.</span>mr <span class="token operator">=</span> l<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> tree<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">.</span>mi <span class="token operator">=</span> <span class="token number">2e9</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> tree<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">.</span>mi <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>
        tree<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token function">ls</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ls</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        tree<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token function">rs</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rs</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">pushup</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> p1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token operator">:</span> adj<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        rt<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>rt<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> rt<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1e9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>u <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        rt<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">upd</span><span class="token punctuation">(</span>rt<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1e9</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mi <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>mi<span class="token punctuation">,</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span>tree<span class="token punctuation">[</span>rt<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mi<span class="token punctuation">)</span><span class="token punctuation">;</span>
        res <span class="token operator">+</span><span class="token operator">=</span> tree<span class="token punctuation">[</span>rt<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    cin <span class="token operator">>></span> n <span class="token operator">>></span> <span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cin <span class="token operator">>></span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">reverse</span><span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> str <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">reverse</span><span class="token punctuation">(</span>w <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> w <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    nxt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> adj<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            j <span class="token operator">=</span> nxt<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            j<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span> adj<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>mi <span class="token operator">>=</span> <span class="token number">1e9</span><span class="token punctuation">)</span> mi <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> mi <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span> <span class="token operator">&lt;&lt;</span> res <span class="token operator">%</span> Mod <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P5357-【模板】AC-自动机（二次加强版）"><a href="#P5357-【模板】AC-自动机（二次加强版）" class="headerlink" title="P5357 【模板】AC 自动机（二次加强版）"></a><a href="https://www.luogu.com.cn/problem/P5357">P5357 【模板】AC 自动机（二次加强版）</a></h2><p>建出 AC 自动机后，拿文本串在 AC 自动机上跑一遍，然后在 $fail$ 树上做子树求和，最后对于每个模式串，输出结尾节点上的权值即可。</p>
<p>时间复杂度 $\mathcal{O}(|S|+|T|)$。</p>
<h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">;</span>
<span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">[</span><span class="token number">2000005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> trie<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ed<span class="token punctuation">[</span><span class="token number">5200005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> tot <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> adj<span class="token punctuation">[</span><span class="token number">5200005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> fail<span class="token punctuation">[</span><span class="token number">5200005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> bucket<span class="token punctuation">[</span><span class="token number">5200005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> ans<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">ins</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> p <span class="token operator">=</span> rt<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> ch <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>trie<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            trie<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>tot<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        p <span class="token operator">=</span> trie<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ed<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">buildFail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> que<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>ch <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span>ch<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>trie<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>trie<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            trie<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">=</span> rt<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        fail<span class="token punctuation">[</span>trie<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> rt<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>que<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> u <span class="token operator">=</span> que<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>ch <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span>ch<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                fail<span class="token punctuation">[</span>trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> trie<span class="token punctuation">[</span>fail<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">;</span>
                que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">=</span> trie<span class="token punctuation">[</span>fail<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ans<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> bucket<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token operator">:</span> adj<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ans<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> ans<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cin <span class="token operator">>></span> <span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">ins</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">buildFail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin <span class="token operator">>></span> <span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> p <span class="token operator">=</span> rt<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> ch <span class="token operator">=</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>
        p <span class="token operator">=</span> trie<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">;</span> bucket<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> tot<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        adj<span class="token punctuation">[</span>fail<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>s <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>s<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">[</span>ed<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    
    cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</code></pre>
<h2 id="P2444-POI2000-病毒"><a href="#P2444-POI2000-病毒" class="headerlink" title="P2444 [POI2000] 病毒"></a><a href="https://www.luogu.com.cn/problem/P2444">P2444 [POI2000] 病毒</a></h2><p>将所有病毒代码段在 trie 上的结尾节点的子树禁掉，那么存在无限代码段的充要条件就是在 AC自动机上通过未被禁掉的节点走出一个环。</p>
<p>判环使用 $vis$ 标颜色即可。</p>
<p>时间复杂度 $\mathcal{O}(|S|)$。</p>
<h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">;</span>
<span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">30005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> trie<span class="token punctuation">[</span><span class="token number">30005</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> tot <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> fail<span class="token punctuation">[</span><span class="token number">60005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> vis<span class="token punctuation">[</span><span class="token number">60005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> visu<span class="token punctuation">[</span><span class="token number">60005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">ins</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> p <span class="token operator">=</span> rt<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> ch <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>trie<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            trie<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>tot<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        p <span class="token operator">=</span> trie<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    vis<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">buildFail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> que<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>ch <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span>ch<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>trie<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>trie<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            trie<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">=</span> rt<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        fail<span class="token punctuation">[</span>trie<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> rt<span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>	
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>que<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> u <span class="token operator">=</span> que<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>ch <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span>ch<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                fail<span class="token punctuation">[</span>trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> trie<span class="token punctuation">[</span>fail<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">;</span> vis<span class="token punctuation">[</span>trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">|</span><span class="token operator">=</span> vis<span class="token punctuation">[</span>fail<span class="token punctuation">[</span>trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">=</span> trie<span class="token punctuation">[</span>fail<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">;</span> 
            <span class="token punctuation">}</span> 
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>visu<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    visu<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>ch <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span>ch<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> vis<span class="token punctuation">[</span>trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token function">dfs</span><span class="token punctuation">(</span>trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    visu<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cin <span class="token operator">>></span> <span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">ins</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    <span class="token function">buildFail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">?</span> <span class="token string">"TAK"</span> <span class="token operator">:</span> <span class="token string">"NIE"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    
    cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P2414-NOI2011-阿狸的打字机"><a href="#P2414-NOI2011-阿狸的打字机" class="headerlink" title="P2414 [NOI2011] 阿狸的打字机"></a><a href="https://www.luogu.com.cn/problem/P2414">P2414 [NOI2011] 阿狸的打字机</a></h2><p>$70$ 分做法：</p>
<p>所有串的长度加起来 $\leq 10^5$，故可以每一个串暴力在 AC 自动机上跑，更新其它串的答案，注意每次还需将上次跑的串清空。</p>
<p>时间复杂度 $\mathcal{O}(|S|+q\log |S|)$。</p>
<p>$100$ 分做法：</p>
<p>我们观察到打字机打出的字符长度同样 $\leq 10^5$，由于 <code>P</code> 操作不会影响下一个串在 trie 上的位置，所以 trie 中的节点数量 $\leq 10^5$，那么有没有办法不一个一个扫串统计答案？</p>
<p>观察到相邻的两个串的变化只有新加一个字符和 <code>B</code> 操作，<code>B</code> 操作可理解为回到 trie 的父节点，那么我们可以对于输入实时维护当前串的答案，加入字符是单点加，<code>B</code> 操作是单点减，最后有关这个串的询问就是 $fail$ 树上子树查询，用树状数组维护即可。</p>
<p>时间复杂度 $\mathcal{O(n+q\log n)}$。</p>
<h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> pos<span class="token punctuation">[</span><span class="token number">2600005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> q<span class="token punctuation">;</span>
<span class="token keyword">int</span> trie<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ed<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> father<span class="token punctuation">[</span><span class="token number">2600005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> tot <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> fail<span class="token punctuation">[</span><span class="token number">2600005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> in<span class="token punctuation">[</span><span class="token number">2600005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> out<span class="token punctuation">[</span><span class="token number">2600005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">[</span><span class="token number">2600005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> node<span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span> qu<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> adj<span class="token punctuation">[</span><span class="token number">2600005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> ans<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> vis<span class="token punctuation">[</span><span class="token number">2600005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> c<span class="token punctuation">[</span><span class="token number">2600005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">lowbit</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">upd</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> x<span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> tot<span class="token punctuation">;</span>i <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> v<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">que</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> x<span class="token punctuation">;</span>i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">-</span><span class="token operator">=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">ins</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> p <span class="token operator">=</span> rt<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'B'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            p <span class="token operator">=</span> father<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'P'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            pos<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>n<span class="token punctuation">;</span>
            ed<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> ch <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>trie<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                trie<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>tot<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> 
            father<span class="token punctuation">[</span>trie<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">,</span> p <span class="token operator">=</span> trie<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">buildFail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> que<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>ch <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span>ch<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>trie<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>trie<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            trie<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">=</span> rt<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        fail<span class="token punctuation">[</span>trie<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> rt<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>que<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> u <span class="token operator">=</span> que<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>ch <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span>ch<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                fail<span class="token punctuation">[</span>trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> trie<span class="token punctuation">[</span>fail<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">;</span>
                que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">=</span> trie<span class="token punctuation">[</span>fail<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>node<span class="token punctuation">;</span>
    in<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token operator">:</span> adj<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    out<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    cin <span class="token operator">>></span> <span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ins</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token function">buildFail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> tot<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        adj<span class="token punctuation">[</span>fail<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    cin <span class="token operator">>></span> q<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> q<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> x <span class="token operator">>></span> y<span class="token punctuation">;</span>
        qu<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">int</span> p <span class="token operator">=</span> rt<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'B'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">upd</span><span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> p <span class="token operator">=</span> father<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'P'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> j<span class="token operator">:</span> qu<span class="token punctuation">[</span>pos<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                ans<span class="token punctuation">[</span>j<span class="token punctuation">.</span>second<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">que</span><span class="token punctuation">(</span>out<span class="token punctuation">[</span>ed<span class="token punctuation">[</span>j<span class="token punctuation">.</span>first<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">que</span><span class="token punctuation">(</span>in<span class="token punctuation">[</span>ed<span class="token punctuation">[</span>j<span class="token punctuation">.</span>first<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> ch <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>
            <span class="token function">upd</span><span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>trie<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> p <span class="token operator">=</span> trie<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> q<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P3715-BJOI2017-魔法咒语"><a href="#P3715-BJOI2017-魔法咒语" class="headerlink" title="P3715 [BJOI2017] 魔法咒语"></a><a href="https://www.luogu.com.cn/problem/P3715">P3715 [BJOI2017] 魔法咒语</a></h2><p>$L\leq 100$ 时，我们设 $dp_{i,j}$ 表示前 $i$ 个字符，在 AC 自动机上走到 $j$ 节点的方案数。</p>
<p>我们一次直接转移一个基本词汇，转移需要注意 $trie_{j,ch}$ 不能是被禁的咒语。</p>
<p>$L\leq 10^8$ 时，观察到词汇长度不超过 $2$，那么由 $dp_i$ 只会转移至 $dp_{i+1}$ 和 $dp_{i+2}$，第二维转移与第一维无关，预处理 $[dp_{i-1},dp_i]$ 的转移矩阵做矩阵乘法即可。</p>
<p>时间复杂度 $\mathcal{O}(|S|\cdot26+(2|S|)^3\log L)$。</p>
<h3 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> Mod <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> L<span class="token punctuation">;</span>
<span class="token keyword">int</span> len<span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">,</span> mxlen<span class="token punctuation">;</span>
<span class="token keyword">char</span> word<span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> trie<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> tot <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> fail<span class="token punctuation">[</span><span class="token number">2605</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> vis<span class="token punctuation">[</span><span class="token number">2605</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">ins</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> p <span class="token operator">=</span> rt<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> l <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> l<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> ch <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>trie<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            trie<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>tot<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        p <span class="token operator">=</span> trie<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    vis<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">buildFail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> que<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>ch <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span>ch<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>trie<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>trie<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            trie<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">=</span> rt<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        fail<span class="token punctuation">[</span>trie<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> rt<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>que<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> u <span class="token operator">=</span> que<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>ch <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span>ch<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                fail<span class="token punctuation">[</span>trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> trie<span class="token punctuation">[</span>fail<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">;</span> vis<span class="token punctuation">[</span>trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">|</span><span class="token operator">=</span> vis<span class="token punctuation">[</span>fail<span class="token punctuation">[</span>trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                trie<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">=</span> trie<span class="token punctuation">[</span>fail<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">upd</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    a <span class="token operator">+</span><span class="token operator">=</span> b<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">>=</span> Mod<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a <span class="token operator">-</span><span class="token operator">=</span> Mod<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">namespace</span> SubTask1 <span class="token punctuation">{</span>
    
    <span class="token keyword">int</span> ans<span class="token punctuation">;</span>
    <span class="token keyword">int</span> F<span class="token punctuation">[</span><span class="token number">205</span><span class="token punctuation">]</span><span class="token punctuation">,</span> G<span class="token punctuation">[</span><span class="token number">205</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    
    <span class="token keyword">struct</span> Mat <span class="token punctuation">{</span>
        <span class="token keyword">int</span> num<span class="token punctuation">[</span><span class="token number">205</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">205</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        
        <span class="token function">Mat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">memset</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>	
        
        Mat <span class="token keyword">operator</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Mat <span class="token operator">&amp;</span>A<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Mat res<span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> tot<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> tot<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>k <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> tot<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token function">upd</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1ll</span> <span class="token operator">*</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">*</span> A<span class="token punctuation">.</span>num<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">%</span> Mod<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> res<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    
    Mat <span class="token function">Matpow</span><span class="token punctuation">(</span>Mat A<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Mat base <span class="token operator">=</span> A<span class="token punctuation">,</span> res<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> tot<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res<span class="token punctuation">.</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> res <span class="token operator">=</span> res <span class="token operator">*</span> base<span class="token punctuation">;</span>
            b <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            base <span class="token operator">=</span> base <span class="token operator">*</span> base<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">int</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> len<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> ch <span class="token operator">=</span> word<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>trie<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            p <span class="token operator">=</span> trie<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> p<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">void</span> <span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Mat A<span class="token punctuation">,</span> B<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>p <span class="token operator">&lt;=</span> tot<span class="token punctuation">;</span>p<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>k <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> q <span class="token operator">=</span> <span class="token function">move</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>q <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    A<span class="token punctuation">.</span>num<span class="token punctuation">[</span>q <span class="token operator">+</span> tot<span class="token punctuation">]</span><span class="token punctuation">[</span>p <span class="token operator">+</span> tot<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    A<span class="token punctuation">.</span>num<span class="token punctuation">[</span>q <span class="token operator">+</span> tot<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>p <span class="token operator">&lt;=</span> tot<span class="token punctuation">;</span>p<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            A<span class="token punctuation">.</span>num<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>p <span class="token operator">+</span> tot<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        B <span class="token operator">=</span> <span class="token function">Matpow</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> L <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        F<span class="token punctuation">[</span>rt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>k <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> ch <span class="token operator">=</span> word<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>trie<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    F<span class="token punctuation">[</span>tot <span class="token operator">+</span> trie<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> tot<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>k <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> tot<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">upd</span><span class="token punctuation">(</span>G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1ll</span> <span class="token operator">*</span> B<span class="token punctuation">.</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">*</span> F<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">%</span> Mod<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> tot <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> tot<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">upd</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">namespace</span> SubTask2 <span class="token punctuation">{</span>
    <span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2605</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">;</span>
    
    <span class="token keyword">void</span> <span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>rt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> L<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> tot<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>k <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">+</span> len<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">></span> L<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">continue</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">int</span> j0 <span class="token operator">=</span> j<span class="token punctuation">;</span>
                    <span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> q <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>q <span class="token operator">&lt;=</span> len<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>q<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">int</span> ch <span class="token operator">=</span> word<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>q<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>trie<span class="token punctuation">[</span>j0<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        j0 <span class="token operator">=</span> trie<span class="token punctuation">[</span>j0<span class="token punctuation">]</span><span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">continue</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token function">upd</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">+</span> len<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j0<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> tot<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">upd</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>L<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    cin <span class="token operator">>></span> n <span class="token operator">>></span> m <span class="token operator">>></span> L<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cin <span class="token operator">>></span> <span class="token punctuation">(</span>word<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        len<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mxlen <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>mxlen<span class="token punctuation">,</span> len<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cin <span class="token operator">>></span> <span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">ins</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>	
    <span class="token function">buildFail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">if</span><span class="token punctuation">(</span>mxlen <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SubTask1<span class="token operator">::</span><span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        SubTask2<span class="token operator">::</span><span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>后面的题感觉都差不多。。。就不写了</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>省选</category>
        <category>NOI8级</category>
      </categories>
  </entry>
  <entry>
    <title>网络流算法</title>
    <url>/2022/11/25/network-flow/</url>
    <content><![CDATA[<h1 id="流网络-text-Flow-Network"><a href="#流网络-text-Flow-Network" class="headerlink" title="流网络 $\text{(Flow Network)}$"></a>流网络 $\text{(Flow Network)}$</h1><p>对于一个有向图 $G&#x3D;(V,E)$，$\forall(u,v)\in E$，有一个权值 $c(u,v)$，代表 $u\rightarrow v$ 这条边的流量 $\text{(capacity)}$，当 $(u,v)\notin E$ 时有 $c(u,v)&#x3D;0$。</p>
<p>在这个有向图中，存在 $s\in V,t\in V$，我们称之为源点 $\text{(source)}$ 和汇点 $\text{(sink)}$，且 $s\neq t$ 。</p>
<p>我们把这样的图称之为网络。</p>
<h1 id="可行流-text-Flow"><a href="#可行流-text-Flow" class="headerlink" title="可行流 $\text{(Flow)}$"></a>可行流 $\text{(Flow)}$</h1><p>$\forall u\in V,v\in V$，定义函数 $f(u,v)$ 为 $u\rightarrow v$ 的流量，$c’(u,v)&#x3D;c(u,v)-f(u,v)\ge 0$ 称为 $u\rightarrow v$ 的剩余容量。此时不考虑反向边会比较好。</p>
<p>我们定义可行流函数 $f(u,v)$ 满足如下性质：</p>
<ol>
<li>$\forall(u,v)\in E,f(u,v)\le c(u,v)$，任意一条边的流量不超过这条边的容量。</li>
<li>$\forall x\in V,x\neq s,t,\sum\limits_{(u,x)\in E}f(u,x)&#x3D;\sum\limits_{(x,v)\in E}f(x,v)$，即任意一个点，进入这个点的流量都等于出去的流量。</li>
</ol>
<p>一个网络的流就是源点发出的全部流量，记 $F&#x3D;\sum\limits_{\forall(s,u)\in E}f(s,u)$。</p>
<h1 id="残留网络"><a href="#残留网络" class="headerlink" title="残留网络"></a>残留网络</h1><p>残留网络的点集和边集与原网络是一样的，但唯一不同的是每条边存在一个<strong>剩余容量</strong>，这里我们对于一个有向边，考虑其的<strong>反向边</strong>：</p>
<ul>
<li>当 $(u,v)\in E$，$c’(u,v)&#x3D;c(u,v)-f(u,v),c’(v,u)&#x3D;f(u,v)$。</li>
</ul>
<p>反向边的加入是为了存在反悔贪心的操作，保证了算法正确性，在程序中我们所建的都是残留网络。</p>
<h1 id="增广路"><a href="#增广路" class="headerlink" title="增广路"></a>增广路</h1><p>对于一条从 $s$ 到 $t$ 的路径，对于路径上任意一条边 $(u,v)$，满足 $c’(u,v)&gt;0$，我们就称这条路径为增广路。</p>
<p>那么如果有了一条增广路，我们就会尝试让源点分一点流量给这条增广路，而分配的流量就是每条边剩余容量的最小值（显然多了也流不过去），不难发现，当网络中存在增广路，则最大流答案将变大。</p>
<h1 id="割"><a href="#割" class="headerlink" title="割"></a>割</h1><p>如果有网络 $G&#x3D;(V,E)$，存在集合 $S,T\subseteq V,S\cap T&#x3D;\emptyset,S\cup T&#x3D;V,s\in S,t\in T$，则称 $S,T$ 是对于网络 $G$ 的一个割。</p>
<h2 id="割的容量"><a href="#割的容量" class="headerlink" title="割的容量"></a>割的容量</h2><p>对于一个割 $S,T$，$c(S,T)&#x3D;\sum\limits_{u\in S,v\in T,(u,v)\in E}c(u,v)$，我们称之为割的容量。</p>
<h2 id="最小割"><a href="#最小割" class="headerlink" title="最小割"></a>最小割</h2><p>最小割的指的是割的最小<strong>容量</strong>。</p>
<h2 id="割的流量"><a href="#割的流量" class="headerlink" title="割的流量"></a>割的流量</h2><p>对于一个割 $S,T$，$f(S,T)&#x3D;\sum\limits_{u\in S,v\in T, (u,v)\in E}f(u,v)-\sum\limits_{u\in S,v\in T,(u,v)\in E}f(v,u)$，我们称之为割的容量。</p>
<p>意思为从 $S$ 中的点流到 $T$ 中的点的流量减去从 $T$ 的点流回到 $S$ 的点的流量。</p>
<h2 id="割的性质"><a href="#割的性质" class="headerlink" title="割的性质"></a>割的性质</h2><ol>
<li><p>$f(X,Y)+f(Y,X)&#x3D;0$</p>
</li>
<li><p>$f(X,X)&#x3D;0$</p>
</li>
<li><p>$f(Z,X\cup Y)&#x3D;f(Z,X)+f(Z,Y)$</p>
</li>
<li><p>$f(X\cup Y,Z)&#x3D;f(X,Z)+f(Y,Z)$</p>
</li>
<li><p>$\forall [S,T],\forall f,f(S,T)\le c(S,T)$。即任意的一个割与原网络的任意一个可行流，有割的流量不超过割的容量。</p>
</li>
<li><p>$f(S,T)&#x3D;F$，即割的流量等于原网络的可行流。</p>
<blockquote>
<p>证明：</p>
<p>$\because f(S,V)&#x3D;f(S,S)+f(S,T)$（性质 $3$）且 $f(S,S)&#x3D;0$（性质 $2$）</p>
<p>$\therefore f(S,V)&#x3D;f(S,T)$</p>
<p>又 $\because f(S,V)&#x3D;f({s},V)+f(S\backslash{s},V)$ （性质 $4$）</p>
<p>记 $S’&#x3D;S\backslash {s}$，$S’$ 中不存在源点和汇点，则流量守恒，有 $f(S’,V)&#x3D;0$</p>
<p>$\therefore f(S,T)&#x3D;f({s},V)&#x3D;F$</p>
</blockquote>
</li>
<li><p>$F\le c(S,T)$，由性质 $5,6$ 可得。则我们能得到<strong>最大流不超过最小割</strong>。</p>
</li>
</ol>
<h1 id="最大流"><a href="#最大流" class="headerlink" title="最大流"></a>最大流</h1><p>对于一个在网络的所有可行流，所得到的最大的 $F$ 称为网络的最大流，记作 $F_{\max}$。</p>
<p>最大流指的是最大可行流。</p>
<h1 id="最大流最小割定理"><a href="#最大流最小割定理" class="headerlink" title="*最大流最小割定理"></a>*最大流最小割定理</h1><p>最大流最小割定理指的是这样 $3$ 个条件互相等价：</p>
<p>$\text{A.}$ 原网络取到最大流 $F_{\max}$</p>
<p>$\text{B.}$ 残留网络中不存在增广路</p>
<p>$\text{C.}$ 存在 $[S,T],c(S,T)&#x3D;F$</p>
<blockquote>
<p>证明：</p>
<p>$\mathcal{I.}\text{A}\Rightarrow \text{B}$</p>
<p>若当原网络取到最大流 $F_{\max}$ 时，残留网络仍存在增广路。</p>
<p>那么我可以通过增广这条增广路的方式增加原网络流量使其不是最大流。</p>
<p>证毕。</p>
<p>$\mathcal{II.}\text{B}\Rightarrow\text{C}$</p>
<p>由于只需存在一个割满足，那么考虑一种构造方式：</p>
<p>对于当前的残留网络，$S$ 集合为源点 $s$ 通过剩余容量不为 $0$ 的边可到达的点集，$T$ 为 $V\backslash S$。</p>
<p>由于 $\text{B}$ 条件，所以 $S$ 集合一定不包含 $t$。</p>
<p>考虑此时的 $c(S,T)$。</p>
<p>$\forall u\in S,v\in T$，我们有 $f(u,v)&#x3D;c(u,v)$。如果 $f(u,v)&lt; c(u,v)$，那么在残留网络中这条边的剩余流量 $c’(u,v)&#x3D;c(u,v)-f(u,v)&gt;0$，则 $v$ 应该也在 $S$ 中矛盾。</p>
<p>$\forall u\in S, v\in T$，我们有 $f(v,u)&#x3D;0$，证明方式同上。</p>
<p>那么我们有 $f(S,T)&#x3D;\sum\limits_{u\in S,v\in T, (u,v)\in E}f(u,v)-\sum\limits_{u\in S,v\in T,(u,v)\in E}f(v,u)&#x3D;\sum\limits_{u\in S,v\in T,(u,v)\in E}c(u,v)&#x3D;c(S,T)$</p>
<p>又有 $f(S,T)&#x3D;F$，$\therefore c(S,T)&#x3D;F$，证毕。</p>
<p>$\mathcal{III.}\text{C}\Rightarrow A$</p>
<p>原命题 $\Leftrightarrow$ $F&#x3D;c(S,T)&#x3D;F_{\max}$</p>
<p>由性质 $7$，最大流小于等于最小割。</p>
<p>最小割 $\le c(S,T)&#x3D;F\le F_{\max}$</p>
<p>所以最小割小于等于最大流，所以<strong>最小割等于最大流</strong>，同时得到 $F$ 就是最大流。</p>
<p>证毕。</p>
</blockquote>
<p>那么我们就得到了，残留网络中没有增广路和当前的流是最大流是充要条件。</p>
<h1 id="最大流算法"><a href="#最大流算法" class="headerlink" title="最大流算法"></a>最大流算法</h1><h2 id="text-Edmonds-Karp"><a href="#text-Edmonds-Karp" class="headerlink" title="$\text{Edmonds Karp}$"></a>$\text{Edmonds Karp}$</h2><p>网络最大流是怎么求的呢？有了对于增广路的概念，我们不难想到一个较为朴素的做法：在当前残留网络中，找到一条增广路，如果能找到增广路，说明当前的流的答案会变大，增加流，然后把增广路上的每条边的容量减掉增广路上所有边的最小容量，重复过程直到不能找到增广路。</p>
<p>乍一看十分之正确，但是存在一个问题：对于这样的一个贪心模拟的过程是否存在着后效性？</p>
<p>答案是有可能的，比如有 $s\rightarrow 1\rightarrow 2\rightarrow t,s\rightarrow1\rightarrow3\rightarrow t,s\rightarrow3\rightarrow t$ 这 $3$ 条增广路，如果我们恰好先选了 $s\rightarrow1\rightarrow3\rightarrow t$ 这条，然后恰好增广后 $c’(3,t)$ 变为 $0$，那不就增广不到 $s\rightarrow3\rightarrow t$ 了，但是显然我们还有增广 $s\rightarrow 1\rightarrow 2\rightarrow t,s\rightarrow3\rightarrow t$ 这两条路径的选择，那怎么处理这种情况呢？</p>
<p>问题的本质是存在后效性，那么能不能想办法采用类似<strong>反悔贪心</strong>的做法来做？</p>
<p><strong>考虑为每条边开一个反向边</strong>。初始时反向边容量设为 $0$。</p>
<p>在我们增广了一次之后，将增广的路径上的正向边减少容量，反向边增加容量，这样上面的情况就会被反悔出来。</p>
<p>由于最大流最小割定理，所以只要残留网络中没有增广路，则一定得到最大流。</p>
<p>实现十分的容易，就是扫整张网络找增广路，并修改路径上的容量。</p>
<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>理论证明的复杂度为 $\mathcal{O}(nm^2)$，但远远不能达到此上界，可处理 $n\le 10^4$ 的网络。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1005</span><span class="token punctuation">,</span> M <span class="token operator">=</span> <span class="token number">20005</span><span class="token punctuation">,</span> Inf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> S<span class="token punctuation">,</span> T<span class="token punctuation">;</span>
<span class="token keyword">int</span> flow<span class="token punctuation">;</span>
<span class="token keyword">int</span> head<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> top<span class="token punctuation">;</span>
<span class="token keyword">int</span> que<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> incf<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> pre<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> vis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> f<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> head<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> head<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> top<span class="token operator">++</span><span class="token punctuation">;</span>
    e<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">,</span> f<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> head<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span> head<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> top<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> hh <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> vis<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>incf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> incf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    que<span class="token punctuation">[</span>hh<span class="token punctuation">]</span> <span class="token operator">=</span> S<span class="token punctuation">,</span> vis<span class="token punctuation">[</span>S<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> incf<span class="token punctuation">[</span>S<span class="token punctuation">]</span> <span class="token operator">=</span> Inf<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>hh <span class="token operator">!=</span> tt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> u <span class="token operator">=</span> que<span class="token punctuation">[</span>hh<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">~</span>i<span class="token punctuation">;</span> i <span class="token operator">=</span> nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> v <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                pre<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
                incf<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>incf<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                que<span class="token punctuation">[</span>tt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> incf<span class="token punctuation">[</span>T<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">EdmondsKarp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> t <span class="token operator">=</span> incf<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">;</span>
        flow <span class="token operator">+</span><span class="token operator">=</span> t<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> u <span class="token operator">=</span> T<span class="token punctuation">;</span> u <span class="token operator">!=</span> S<span class="token punctuation">;</span> u <span class="token operator">=</span> e<span class="token punctuation">[</span>pre<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            f<span class="token punctuation">[</span>pre<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> t<span class="token punctuation">,</span> f<span class="token punctuation">[</span>pre<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> t<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    cin <span class="token operator">>></span> n <span class="token operator">>></span> m <span class="token operator">>></span> S <span class="token operator">>></span> T<span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> c<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> u <span class="token operator">>></span> v <span class="token operator">>></span> c<span class="token punctuation">;</span>
        <span class="token function">add</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">EdmondsKarp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> flow <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    
    cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="text-Dinic"><a href="#text-Dinic" class="headerlink" title="$\text{Dinic}$"></a>$\text{Dinic}$</h2><p>$\text{Dinic}$ 的主要思想也是增广，但是不同于 EK 的每次增广一条路径，$\text{Dinic}$ 可以增广多条路径。</p>
<p>那么我们就要用 <code>dfs()</code> 找增广路了，但在找增广路前，首先需要用 <code>bfs()</code> 做一些准备工作，具体就是标注 $dis_u$ 表示 $s\rightarrow u$ 的最短路径长度，当然这里指的是增广路路径长度，<del>要不然跑就不用跑那么多遍</del>。</p>
<p>这样我们实际是给<strong>网络标了一个 DAG 序</strong>，使 <code>dfs()</code> 不会进入死循环，而其特有的<strong>回溯</strong>功能可使我们遍历到多条增广路。</p>
<p>那么算法流程是：先用 <code>bfs()</code> 分层，然后 <code>dfs(u, Flow)</code> 表示走到了 $u$ 点，从 $s\rightarrow u$ 的最小的一条边的容量是 $Flow$，每次我们找一个 $v$，使得 $dep_v&#x3D;dep_u+1$，然后在途中就去更新正向边和反向边。</p>
<h3 id="优化-1"><a href="#优化-1" class="headerlink" title="优化 $1$"></a>优化 $1$</h3><p>一个剪枝，搜的时候记录当前点的<strong>流出量</strong> $used$，显然当 $used&#x3D;Flow$ 时，给到 $u$ 点的流都被用光了，就不用继续再从 $u$ 增广了，可以直接从 $u$ 退出回溯。</p>
<h3 id="优化-2"><a href="#优化-2" class="headerlink" title="优化 $2$"></a>优化 $2$</h3><p>一个剪枝，叫做<strong>当前弧优化</strong>。</p>
<p>当我们在枚举 $u$ 的出边时，我们是按我们链式前向星存边的顺序枚举一条出边 $(u,v)$，而此时我们还有 $x_1\rightarrow u,x_2\rightarrow u,\cdots$ 这样的边。</p>
<p>当 $x_1\rightarrow u$，跑 $u$ 所有的出边找增广路。</p>
<p>当 $x_2\rightarrow u$，跑 $u$ 所有的出边找增广路。</p>
<p>当 $x_3\rightarrow u$，跑 $u$ 所有的出边找增广路。</p>
<p>$\cdots$</p>
<p>每次都重新跑了所有出边，但由于 <code>dfs()</code> 的性质可能<strong>在前面被枚举到的出边容量</strong>已经增广完了。</p>
<p>所以记录 $cur_u$ 表示当前 $u$ 的出边在 $cur_u$ 之前被枚举到的已经增广完了，我们现在从 $cur_u$ 再增广就可以了。</p>
<p>十分有用的优化。</p>
<h3 id="优化-3"><a href="#优化-3" class="headerlink" title="优化 $3$"></a>优化 $3$</h3><p>对于一条边 $u\rightarrow v$，如果从 $v$ 开始搜索得到的流已经为 $0$，那么这轮搜索中以后再到达 $v$ 的流仍然为 $0$，直接在当前轮中把 $v$ 删掉，实现可以是 $dep_v&#x3D;Inf$ 或其它。</p>
<h3 id="时间复杂度-1"><a href="#时间复杂度-1" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>理论证明的复杂度为 $\mathcal{O}(n^2m)$，但远远不能达到此上界，可处理 $n\le 10^5$ 的网络。</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">10005</span><span class="token punctuation">,</span> M <span class="token operator">=</span> <span class="token number">200005</span><span class="token punctuation">,</span> Inf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> S<span class="token punctuation">,</span> T<span class="token punctuation">;</span>
<span class="token keyword">int</span> flow<span class="token punctuation">;</span>
<span class="token keyword">int</span> head<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> top<span class="token punctuation">;</span>
<span class="token keyword">int</span> que<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> dep<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> cur<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> f<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> head<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> head<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> top<span class="token operator">++</span><span class="token punctuation">;</span>
    e<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">,</span> f<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> head<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span> head<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> top<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> hh <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> head<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dep<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> dep<span class="token punctuation">)</span><span class="token punctuation">;</span>
    que<span class="token punctuation">[</span>hh<span class="token punctuation">]</span> <span class="token operator">=</span> S<span class="token punctuation">,</span> dep<span class="token punctuation">[</span>S<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>hh <span class="token operator">!=</span> tt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> u <span class="token operator">=</span> que<span class="token punctuation">[</span>hh<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">~</span>i<span class="token punctuation">;</span> i <span class="token operator">=</span> nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> v <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>dep<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> Inf <span class="token operator">&amp;&amp;</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                dep<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
                que<span class="token punctuation">[</span>tt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>dep<span class="token punctuation">[</span>T<span class="token punctuation">]</span> <span class="token operator">!=</span> Inf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> flow<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>u <span class="token operator">==</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> flow<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> used <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> cur<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">~</span>i<span class="token punctuation">;</span> i <span class="token operator">=</span> nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cur<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token keyword">int</span> v <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>dep<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> flow <span class="token operator">-</span> used<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>low <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                used <span class="token operator">+</span><span class="token operator">=</span> low<span class="token punctuation">,</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> low<span class="token punctuation">,</span> f<span class="token punctuation">[</span>i <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> low<span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>used <span class="token operator">==</span> flow<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                dep<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> Inf<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> used<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">Dinic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        flow <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> Inf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    cin <span class="token operator">>></span> n <span class="token operator">>></span> m <span class="token operator">>></span> S <span class="token operator">>></span> T<span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> c<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> u <span class="token operator">>></span> v <span class="token operator">>></span> c<span class="token punctuation">;</span>
        <span class="token function">add</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">Dinic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> flow <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    
    cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h1 id="最大流相关模型和例题"><a href="#最大流相关模型和例题" class="headerlink" title="最大流相关模型和例题"></a>最大流相关模型和例题</h1><h2 id="二分图匹配"><a href="#二分图匹配" class="headerlink" title="二分图匹配"></a>二分图匹配</h2><p>二分图匹配一般指的是存在两个点集，点集内部没有边，点集之间有若干条边相连，一个匹配指的是从边集中选出一个子集，使得一个点<strong>至多</strong>出现在一条边中。</p>
<p>我们将其抽象成一个网络流模型，对于每一条边 $(u,v)$，我们在网络中连一条容量为 $1$ 的 $u\rightarrow v$ 的边，这样当这条边的流量为 $1$ 时，代表这条边被选择。</p>
<h3 id="P2756-飞行员配对方案问题"><a href="#P2756-飞行员配对方案问题" class="headerlink" title="P2756 飞行员配对方案问题"></a><a href="https://www.luogu.com.cn/problem/P2756">P2756 飞行员配对方案问题</a></h3><p>最典型的二分图匹配，我们向源点和每一个外籍飞行员连一条容量为 $1$ 的边，英国飞行员连一条容量为 $1$ 的边，然后外籍飞行员和英国飞行员之间的匹配连一条容量为 $1$ 的边。</p>
<p>我们需要先证明原问题的每一个可行解 $s$，对应一个网络中的可行流 $f$。可行流的满足条件为<strong>容量限制</strong>和<strong>流量守恒</strong>。</p>
<p>对于一个可行解 $s$ ，一个可行解满足每个人至多在一条匹配边中，这些边的流量设为 $1$，而其余匹配边的流量设为 $0$，对于所有外国籍的点，流出流量最多为 $1$；对于所有英国籍的点，流入流量最多为 $1$。我们可以用源点出边的流量和汇点入边的流量补上使其符合流量守恒，所以一个可行解必定对应一个可行流。</p>
<p>对于一个可行流 $f$ ，为了符合题意，不妨先假设每条边的流量为 $0$ 或 $1$。</p>
<p>因为满足流量守恒，所以除了源点和汇点外，每个点的流入的流量和流出的流量相等，外国籍点流入流量和英国记流出流量均最多为 $1$，则每个人要么不匹配，要么至多在一组匹配中，所以一个可行流一定是一个可行解。</p>
<p>所以现在我们证明了每个可行解 $s$ 和<strong>整数流量的</strong>可行流<strong>一一对应</strong>，那么当我们证明了只要<strong>整数流量的最大流就是全局最大流</strong>的话，那么最大流就是<strong>全局最优解</strong>。</p>
<p>这个证明比较简单：因为 $\text{Dinic}$ 算法中只用到了整数变量，且得到最大流的充要条件是残留网络中不存在增广路，那么由于 $\text{Dinic}$ 跑完后没有了增广路，所以<strong>整数流量的最大流也是所有情况的最大流</strong>。</p>
<p>代码：<a href="https://www.luogu.com.cn/record/101009585">https://www.luogu.com.cn/record/101009585</a></p>
<h3 id="P3254-圆桌问题"><a href="#P3254-圆桌问题" class="headerlink" title="P3254 圆桌问题"></a><a href="https://www.luogu.com.cn/problem/P3254">P3254 圆桌问题</a></h3><p>在这道题中，区别仅仅在于从每个点的容量限制的不同，因为一个单位有 $r_i$ 个人，我们从汇点向每个单位连一条容量为 $r_i$ 的边，一个餐桌容纳 $c_i$ 个人，我们从每个餐桌向汇点连一条容量为 $c_i$ 的边，然后因为一个单位的人最多向每个桌子之间派 $1$ 个人，所以每个单位向每个桌子连一条容量为 $1$ 的边，这样不难证明，当网络满流时即是合法方案，所以跑最大流看是不是满流即可。</p>
<p>代码：<a href="https://www.luogu.com.cn/record/101009737">https://www.luogu.com.cn/record/101009737</a></p>
<h2 id="无源汇上下界可行流"><a href="#无源汇上下界可行流" class="headerlink" title="无源汇上下界可行流"></a>无源汇上下界可行流</h2><p>给定一个无源点和汇点的网络，每条边要求的流量存在上下界，求这个网络是否存在可行流。</p>
<p>因为没有源点和汇点，所以一个可行流需要保证<strong>所有的点满足流量守恒</strong>。</p>
<p>如果本题在没有下界的情况下，在初始什么流量也没有的时候，所有点均满足流量守恒，但如果我们先给所有边流下界的流量，并不能保证所有点流量守恒，那么我们为了满足流量守恒，我们可以记录 $A_i$ 表示 $i$ 号点流入流量下界之和减流出流量下界之和，那么对于流入流量小于流出流量的点，可以将流出流量多的部分分到虚拟汇点上，同理流入流量多的点我们就流量分到虚拟源点，这样我们就强行维护了流量守恒，当然我们还需要对原网络的边的上界改为上界减下界，所以最终只要虚拟源点到虚拟汇点的最大流为满流，则就保证了原图的网络的边都可满足上下界，且流量守恒。下面我们证明新网络的正确性。</p>
<p>我们不妨设原图为 $G$，可行流为 $f$，新图为 $G’$，满流为 $f’$。</p>
<p>那么对于一个原图可行流 $f$，这个流在 $G$ 上满足容量限制和流量守恒，那么对于 $G’$ 上的每一个点的流量，我们形式化地表达：$\text{flow}(u)&#x3D;\sum\limits_{(v,u)\in E}(f(v,u)-\lim(v, u))-\sum\limits_{(u,v)\in E}(f(u,v)-\lim(u,v))+f’(S,u)-f’(u,T)$。</p>
<p>什么意思？就是在原图中有的那些边的流量，我们在新图中将它们的流量设为流量减下界，那么在新图中<strong>新增的边</strong>为<strong>每个点到虚拟源点&#x2F;虚拟汇点的边</strong>，那么 $f’(S,u)-f’(u,T)$ 应该为 $A_u$，而 $A_u$ 恰好就是流入流量下界之和减流出流量下界之和！则有：</p>
<p>$\text{flow}(u)&#x3D;\sum\limits_{(v,u)\in E}(f(v,u)-\lim(v, u))-\sum\limits_{(u,v)\in E}(f(u,v)-\lim(u,v))+A_u$</p>
<p>$&#x3D;\sum\limits_{(v,u)\in E}f(v,u)-\sum\limits_{(u,v)\in E}f(u,v)$</p>
<p>而由于 $f$ 是个可行流，所以最终相减的两部分是相等的，所以我们有 $\text{flow}(u)&#x3D;0$，即流 $f’$ 流量守恒，是一个可行流。当然容量限制一般是一定满足的，所以有时候会省略证明。</p>
<p>对于一个新图可行流 $f’$，这个流在 $G’$ 上满足容量限制和流量守恒，证明也是一个思路，把每个点那些流到源点和汇点的那些流量在扔回到其它连接这个点的边上，就能证明流量守恒，但是我们还需要注意一个限制：原图中每条边的下限限制。</p>
<p>这当然也是十分好说的，对于图 $G’$ 的每条不连接虚拟源点&#x2F;汇点的边，有 $0\leq f’(u,v)\leq c(u,v)-\lim(u,v)$，那么由于 $f’$ 是满流，所以肯定保证每条边都至少能分到 $\lim(u,v)$ 所以有 $\lim(u,v)\leq f’(u,v)+\lim(u,v)\leq c(u,v)$。</p>
<h3 id="LOJ-115-无源汇有上下界可行流"><a href="#LOJ-115-无源汇有上下界可行流" class="headerlink" title="LOJ#115. 无源汇有上下界可行流"></a><a href="https://loj.ac/p/115">LOJ#115. 无源汇有上下界可行流</a></h3><p>最终流程：求 $A_i\rightarrow$ 建新的残留网络 $\rightarrow$ 跑最大流 $\rightarrow$ 判是否是满流</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">struct</span> NetWork <span class="token punctuation">{</span>
    <span class="token keyword">int</span> ver<span class="token punctuation">,</span> limit<span class="token punctuation">,</span> capacity<span class="token punctuation">,</span> nxt<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 注意可能会需要多记一个 limit</span>
    <span class="token keyword">void</span> <span class="token function">ins</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ver <span class="token operator">=</span> v<span class="token punctuation">,</span> limit <span class="token operator">=</span> l<span class="token punctuation">,</span> capacity <span class="token operator">=</span> w<span class="token punctuation">,</span> nxt <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>
        head<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> top<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>Net<span class="token punctuation">[</span><span class="token number">20805</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>
    s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> t <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> l<span class="token punctuation">,</span> w<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> u <span class="token operator">>></span> v <span class="token operator">>></span> l <span class="token operator">>></span> w<span class="token punctuation">;</span>
        Net<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ins</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> l<span class="token punctuation">,</span> w <span class="token operator">-</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Net<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ins</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">,</span> l<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        A<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> l<span class="token punctuation">,</span> A<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> l<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 求 A[i]</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 流入的下界流量之和大于流出的下界流量之和，建 s -> i 的边。</span>
            Net<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ins</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Net<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ins</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            sum <span class="token operator">+</span><span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 注意求一下满流大小。</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 反之建 i -> t 的边。</span>
            Net<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ins</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> t<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Net<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ins</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">Dinic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>Flow <span class="token operator">!=</span> sum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"NO\n"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"YES\n"</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> m<span class="token punctuation">;</span>i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 在输出原网络流的方案时，流量 = 新网络流量 + 边的流量下界。</span>
            cout <span class="token operator">&lt;&lt;</span> Net<span class="token punctuation">[</span>i <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>capacity <span class="token operator">+</span> Net<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>limit <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="有源汇上下界可行流"><a href="#有源汇上下界可行流" class="headerlink" title="有源汇上下界可行流"></a>有源汇上下界可行流</h2><p>有了源点和汇点之后，说明有两个点的流量守恒就不用满足了，那么考虑怎么转化为无源汇上下界可行流。</p>
<p>这里一个比较巧妙的操作是连 $t\rightarrow s$ 并将容量设为 $\text{Inf}$，此时我们发现原图的源点和汇点也可以满足要求，然后我们按无源汇上下界可行流做就行。</p>
<h2 id="有源汇上下界最小-x2F-大流"><a href="#有源汇上下界最小-x2F-大流" class="headerlink" title="有源汇上下界最小&#x2F;大流"></a>有源汇上下界最小&#x2F;大流</h2><p>一个十分复杂的题目（指证明）</p>
<p>我们可以轻易的求一个可行流，但是如何找到最小或最大流呢，做法十分之简单：按有源汇上下界可行流跑虚拟源点到虚拟汇点的最大流，然后把 $t\rightarrow s$ 的边在残留网络中删掉，然后跑 $s$ 到 $t$ 的最大流，最终的最大流就是第一部分的最大流加第二部分的最大流，如果是最小流就跑 $t$ 到 $s$ 的最大流，最小流就是第一部分的最大流减第二部分的最大流。</p>
<p>下面我们来证明一下。</p>
<p>我们设原图为 $G$，原图的一个可行流为 $f$，我们设<strong>按有源汇上下界可行流建出来的图为</strong> $G’$，一个满流为 $f’$，$G’$ 的残留网络记为 $G_{f’}$，残留网络的可行流为 $f_0$。</p>
<p>那么我们首先观察 $f_0+f’$ 的性质。不难发现，$f_0$ 中与虚拟源点和虚拟汇点相关的边的流量均为 $0$，因为 $f_0$ 是可行流，所以虚拟源点和虚拟汇点在源点和汇点分别是 $s$ 和 $t$ 的情况下，就变成了一个普通点，也是需要满足流量守恒的，而虚拟源点和虚拟汇点又分别都只能流出去流量和流进去流量，因此<strong>不可能再给它们流量</strong>，所以 $f_0+f’$ 仍然是一个满足容量限制的 $G’$ 的一个满流，且由 $f_0$ 我们可以得到，除了 $s$ 和 $t$ 外，其它点都是流量守恒的，而 $s$ 和 $t$ 通过 $G’$ 的 $t\rightarrow s$ 的反向边，也是可以满足流量守恒这一点的。因此，我们说，对于任意一个可行流 $f_0$，存在一个满流 $f’$，使得 $f_0+f’$ 是仍然是满流，这样就对应了原图 $G$ 的可行流 $f$。</p>
<p>那么接下来我们观察任意两个 $G’$ 的满流相减 $f’-f’’$。</p>
<p>考虑到两个满流都保证了虚拟源点流出的流量和虚拟汇点流入的流量是满的，那么相减之后<strong>这些有关虚拟源点和虚拟汇点的边的流量均变为了</strong> $0$，这是后续证明正确的重点。</p>
<p>那么我们看这个是否对应一个残留网络的可行流 $f_0$ 呢，答案是对应的。因为两个可行流相减肯定还是可行流（但注意这个减完得到的还是虚拟源点到虚拟汇点的可行流），且虚拟源点和虚拟汇点的边的流量都减到了 $0$，所以除去虚拟源点和虚拟汇点这两个点后，网络仍满足流量守恒，这就足以说明有一个 $f_0$ 的可行流。</p>
<p>所以综上，我们证明了：残留网络 $G_{f’}$ 上的可行流 $f_0$ 加上新图 $G’$ 的满流 $f’$ 就等价于一个原图的可行流 $f$。所以才有了开头那个看似十分感性但正确的做法。</p>
<h3 id="LOJ-116-有源汇有上下界最大流"><a href="#LOJ-116-有源汇有上下界最大流" class="headerlink" title="LOJ#116. 有源汇有上下界最大流"></a><a href="https://loj.ac/p/116">LOJ#116. 有源汇有上下界最大流</a></h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    cin <span class="token operator">>></span> n <span class="token operator">>></span> m <span class="token operator">>></span> s <span class="token operator">>></span> t<span class="token punctuation">;</span>
    S <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> T <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> l<span class="token punctuation">,</span> w<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> u <span class="token operator">>></span> v <span class="token operator">>></span> l <span class="token operator">>></span> w<span class="token punctuation">;</span>
        Net<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ins</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w <span class="token operator">-</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Net<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ins</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        A<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> l<span class="token punctuation">,</span> A<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> l<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Net<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ins</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> i<span class="token punctuation">,</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Net<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ins</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> S<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            sum <span class="token operator">+</span><span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            Net<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ins</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> T<span class="token punctuation">,</span> <span class="token operator">-</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Net<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ins</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> 
    Net<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ins</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> s<span class="token punctuation">,</span> I<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Net<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ins</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> t<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">Dinic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>Flow <span class="token operator">&lt;</span> sum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"please go home to sleep\n"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> res <span class="token operator">=</span> Net<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span>capacity<span class="token punctuation">;</span>
        Net<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> Net<span class="token punctuation">[</span>top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        S <span class="token operator">=</span> s<span class="token punctuation">,</span> T <span class="token operator">=</span> t<span class="token punctuation">;</span>
        Flow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token function">Dinic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">+</span> Flow <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="使用最大流作为判定的问题"><a href="#使用最大流作为判定的问题" class="headerlink" title="使用最大流作为判定的问题"></a>使用最大流作为判定的问题</h2><h3 id="POJ-2455-Secret-Milking-Machine"><a href="#POJ-2455-Secret-Milking-Machine" class="headerlink" title="POJ#2455. Secret Milking Machine"></a><a href="http://poj.org/problem?id=2455">POJ#2455. Secret Milking Machine</a></h3><p>求<strong>最长道路的最小可能长度</strong>，不难想到二分答案 $mid$，然后将 $&gt;mid$ 的边都删掉就是我们所有用的边。</p>
<p>将所有能用的边的流量设为 $1$，以 $1$ 为源点，$n$ 为汇点跑最大流，看最大流是否大于等于 $T$。</p>
<p>代码：<a href="http://poj.org/showsource?solution_id=23967440">http://poj.org/showsource?solution_id=23967440</a></p>
<h3 id="P2754-CTSC1999-家园-x2F-星际转移问题"><a href="#P2754-CTSC1999-家园-x2F-星际转移问题" class="headerlink" title="P2754 [CTSC1999] 家园 &#x2F; 星际转移问题"></a><a href="https://www.luogu.com.cn/problem/P2754">P2754 [CTSC1999] 家园 &#x2F; 星际转移问题</a></h3><p>不难发现此题也有单调性，如果 $x$ 天满足，那么 $x+1$ 天也满足。</p>
<p>那么考虑如何判定，则我们需要将问题转化为一张流网络。本题采用了<strong>对每一天分层</strong>的思想建图，我们分几类边说明。</p>
<p>我们令地球编号为 $0$，月球编号为 $n+1$，其余太空站编号不变。定义 ${day,i}$ 表示第 $day$ 天的第 $i$ 个点。</p>
<ol>
<li>由于全部的人一开始都在地球，我们连一条 $(S,0)$，容量为 $Inf$ 的边，代表人从地球出发。</li>
<li>由于每个人可在他当前的太空站停留到下一天且没有人数的限制，我们连一条 $({day,i},{day+1,i})$，容量为 $Inf$ 的边，表示停留的情况。</li>
<li>如果一些人在某一天已经到达了 $n+1$ 号点，代表已经到达了终点，我们连一条 $({day,n+1},T)$，容量为 $Inf$ 的边，表示已经到达终点。</li>
<li>最后是有关太空船的连边，对于每一天，我们需要计算出每个船昨天停靠的太空站 $u$ 与今天停靠的太空船 $v$，且太空站有人数限制 $h$，那么连 $({day-1,u},{day,v})$，容量为 $h$ 的边，代表太空船运输的情况。</li>
</ol>
<p>这样我们就建好了整张图，可以发现这张图是与原问题等价的，那么我们每次往后加一天的边和点，跑最大流判断流量是否大于等于需要运输的人数 $k$，如果等于输出答案退出。</p>
<p>那么什么情况下无解？考虑如果有合法解当且仅当 $0$ 与 $n+1$ 连通，用并查集维护并判断一下就能知道。当然如果当天数足够大但也没有满足也可以说明无解。</p>
<p>代码：<a href="https://www.luogu.com.cn/record/101010280">https://www.luogu.com.cn/record/101010280</a></p>
<h2 id="拆点最大流问题"><a href="#拆点最大流问题" class="headerlink" title="拆点最大流问题"></a>拆点最大流问题</h2><p>在前面的问题中，我们了解到如果某条边有限制，那么直接修改这条边的容量就行，那么点上有限制该怎么做呢。我们可以考虑将一个点拆为<strong>入点</strong>和<strong>出点</strong>，之间用对应容量的边连接。</p>
<h3 id="P2891-USACO07OPEN-Dining-G"><a href="#P2891-USACO07OPEN-Dining-G" class="headerlink" title="P2891 [USACO07OPEN]Dining G"></a><a href="https://www.luogu.com.cn/problem/P2891">P2891 [USACO07OPEN]Dining G</a></h3><p>本题类似于一个二分图匹配，我们需要对每个奶牛各匹配<strong>两个</strong>物品，那么按之前的建图方式建图，源点向食品连边，食品向奶牛连边，奶牛向饮料连边，饮料向汇点连边就完成转化？</p>
<p>简单思考可知两者并不等价，因为没有限制一个奶牛只能拿一个食品和一个饮料，所以我们需要添加这个限制，我们将奶牛拆成两个点，一个连食品，一个连饮料，最终在这两个点之间连一条容量为 $1$ 的边，这样每个奶牛只能至多匹配一组，与原题意等价。</p>
<p>代码：<a href="https://www.luogu.com.cn/record/101026249">https://www.luogu.com.cn/record/101026249</a></p>
<h3 id="P2766-最长不下降子序列问题"><a href="#P2766-最长不下降子序列问题" class="headerlink" title="P2766 最长不下降子序列问题"></a><a href="https://www.luogu.com.cn/problem/P2766">P2766 最长不下降子序列问题</a></h3><p>首先我们设 $g_i$ 表示前 $i$ 个数选出的不下降子序列的最长题目，这是一个普及组动态规划，随便写过。</p>
<p>然后考虑如何去最多的数量。观察到对于一个长为 $s$ 的子序列 $p$，一定满足 $g_{p_i}&#x3D;i$，所以当且仅当一条流网络上恰好经过一条 $g$ 值为 $1\sim s$ 的路径才合法，那么可以想到如下建图方式：如果有 $j&lt;i,a_j\leq a_i,g_j+1&#x3D;g_i$，那么连一条 $j\rightarrow i$ 的容量为 $1$ 的边，源点向所有 $g_i&#x3D;1$ 的点连边，所有 $g_i&#x3D;s$ 的点向汇点连边，又因为每个数最多取一次，<strong>作为一个对于点的限制考虑拆点</strong>，这样我们就构造出了一个与原问题等价的流网络，求出最大流就是可选择的序列数。</p>
<p>当能使用多次 $a_1$ 和 $a_n$ 时，也就是我们破除了选择 $a_1$ 和 $a_n$ 的限制，将源点到 $1$ 的入点，$1$ 的入点到 $1$ 的出点，$n$ 的出点到汇点，$n$ 的入点到 $n$ 的出点的容量修改为 $Inf$ 即可。</p>
<p>注意当 $s&#x3D;1$ 时，修改为 $Inf$ 后可能会使最大流也变成 $Inf$，所以可以特判一下。</p>
<p>代码：<a href="https://www.luogu.com.cn/record/101026610">https://www.luogu.com.cn/record/101026610</a></p>
<h3 id="POJ-3498-March-of-the-Penguins"><a href="#POJ-3498-March-of-the-Penguins" class="headerlink" title="POJ#3498. March of the Penguins"></a><a href="http://poj.org/problem?id=3498">POJ#3498. March of the Penguins</a></h3><p>我们分步骤将原问题转化为一个等价的流网络：</p>
<ul>
<li>一开始有一些企鹅在某些浮冰上：将源点向这些浮冰连容量为企鹅数量的边。</li>
<li>每个浮冰的起跳次数有限制：相当于对每个点的限制，将其拆为入点和出点，并连一条容量为跳跃次数的边。</li>
<li>距离小于等于 $D$ 的浮冰可以到达：枚举任意两个浮冰，看距离是否小于等于 $D$，然后向浮冰的出点向下一块的浮冰的入点连一条容量为 $Inf$ 的边。</li>
<li>找出所有可以汇合的浮冰：我们可以枚举一个点作为汇点，跑最大流看是否等于企鹅数量。</li>
</ul>
<p>代码：<a href="http://poj.org/showsource?solution_id=23967744">http://poj.org/showsource?solution_id=23967744</a></p>
<h2 id="最大流建图实战"><a href="#最大流建图实战" class="headerlink" title="最大流建图实战"></a>最大流建图实战</h2><h3 id="SP4063-MPIGS-Sell-Pigs"><a href="#SP4063-MPIGS-Sell-Pigs" class="headerlink" title="SP4063 MPIGS - Sell Pigs"></a><a href="https://www.luogu.com.cn/problem/SP4063">SP4063 MPIGS - Sell Pigs</a></h3><p>我们考虑如果某个猪舍从未被打开过，那么第一个打开这个猪舍的顾客相当于有了第一次的购买权，而后打开的顾客可理解为是在买前几次顾客<strong>买剩下的猪</strong>。由于前几个顾客购买后拥有调整猪舍的权利，打开的猪舍相当于也可能会被新顾客购买，尽管新顾客可能不能打开某个猪圈。</p>
<p>这提示我们采用一种建图方式体现<strong>顾客之间的购买和调整的先后顺序</strong>。</p>
<p>因此我们按如下方式建边：</p>
<ul>
<li>如果某个顾客<strong>第一次打开一个猪舍</strong>，源点 $S$ 向这个猪舍连容量为此猪舍猪的数量大小的边。</li>
<li>如果某个顾客<strong>不是第一次打开一个猪舍</strong>，那么让<strong>上一个打开这个猪舍的顾客</strong>向这个顾客连边，容量为 $Inf$。</li>
<li>每个顾客向汇点 $T$ 连容量为顾客需求猪的数量大小的边。</li>
</ul>
<p>这样的思路正确性在于：保证了每个顾客在购买时打开的猪圈一定是在上一次顾客购买之后的，上一次顾客购买后的调整就相当于是顾客之间的连边。</p>
<p>最后我们跑最大流即为答案。</p>
<p>代码：<a href="https://www.luogu.com.cn/record/101030821">https://www.luogu.com.cn/record/101030821</a></p>
<h1 id="最小割算法"><a href="#最小割算法" class="headerlink" title="最小割算法"></a>最小割算法</h1><h2 id="text-Dinic-1"><a href="#text-Dinic-1" class="headerlink" title="$\text{Dinic}$"></a>$\text{Dinic}$</h2><p>由于最小割等于最大流，所以我们直接使用 $\text{Dinic}$ 求最大流，就是这个网络的最小割。</p>
<p>顺便说明一个最小割构造方式，由最大流最小割定理的证明过程，当我们求出一个可行流后，沿着所有剩余容量大于 $0$ 的点一直走到的所有点放到 $S$ 集合，其余放到 $T$ 集合，那么 $[S,T]$ 就是一个与当前可行流相等的割的容量。</p>
<p>代码略。</p>
<h1 id="最小割相关模型和例题"><a href="#最小割相关模型和例题" class="headerlink" title="最小割相关模型和例题"></a>最小割相关模型和例题</h1><h2 id="最小割直接应用"><a href="#最小割直接应用" class="headerlink" title="最小割直接应用"></a>最小割直接应用</h2><h3 id="AcWing2279-网络战争"><a href="#AcWing2279-网络战争" class="headerlink" title="AcWing2279. 网络战争"></a><a href="https://www.acwing.com/problem/content/2281/">AcWing2279. 网络战争</a></h3><p>对于平均最小边权，不难想到 01 分数规划的做法。</p>
<p>二分一个值 $mid$ 并判断是否可行，等价于判断 $\dfrac{\sum\limits_{e\in C}w_e}{|C|}\leq mid$。</p>
<p>移项后得 $\sum\limits_{e\in C}(w_e - mid)\leq 0$，由于本题中对于边割集的定义为删去这些边后 $s$ 和 $t$ 不连通，因此我们先将 $w_e\le mid$ 的边都选上，那么剩下的边中都为正权，为了最小化代价，我们选最小割即可。</p>
<p>注意精度问题。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">double</span> lf<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">105</span><span class="token punctuation">,</span> M <span class="token operator">=</span> <span class="token number">805</span><span class="token punctuation">,</span> Inf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> lf eps <span class="token operator">=</span> <span class="token number">1e-4</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> S<span class="token punctuation">,</span> T<span class="token punctuation">;</span>
lf flow<span class="token punctuation">;</span>
<span class="token keyword">int</span> head<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> top<span class="token punctuation">;</span>
<span class="token keyword">int</span> que<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> dep<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> cur<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
lf f<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> w<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> head<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> head<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> top<span class="token operator">++</span><span class="token punctuation">;</span>
    e<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">,</span> w<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> head<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span> head<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> top<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> hh <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> head<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dep<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> dep<span class="token punctuation">)</span><span class="token punctuation">;</span>
    que<span class="token punctuation">[</span>hh<span class="token punctuation">]</span> <span class="token operator">=</span> S<span class="token punctuation">,</span> dep<span class="token punctuation">[</span>S<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>hh <span class="token operator">!=</span> tt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> u <span class="token operator">=</span> que<span class="token punctuation">[</span>hh<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">~</span>i<span class="token punctuation">;</span> i <span class="token operator">=</span> nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> v <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>dep<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> Inf <span class="token operator">&amp;&amp;</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                dep<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
                que<span class="token punctuation">[</span>tt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>dep<span class="token punctuation">[</span>T<span class="token punctuation">]</span> <span class="token operator">!=</span> Inf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

lf <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> lf flow<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>u <span class="token operator">==</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> flow<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    lf used <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> cur<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">~</span>i<span class="token punctuation">;</span> i <span class="token operator">=</span> nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cur<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token keyword">int</span> v <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>dep<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            lf low <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> flow <span class="token operator">-</span> used<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>low <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                used <span class="token operator">+</span><span class="token operator">=</span> low<span class="token punctuation">,</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> low<span class="token punctuation">,</span> f<span class="token punctuation">[</span>i <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> low<span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>used <span class="token operator">==</span> flow<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                dep<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> Inf<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> used<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">Dinic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        flow <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> Inf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">chk</span><span class="token punctuation">(</span>lf mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    flow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> top<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            flow <span class="token operator">+</span><span class="token operator">=</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> mid<span class="token punctuation">;</span>
            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>i <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>i <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> mid<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">Dinic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> flow <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    cin <span class="token operator">>></span> n <span class="token operator">>></span> m <span class="token operator">>></span> S <span class="token operator">>></span> T<span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> u <span class="token operator">>></span> v <span class="token operator">>></span> w<span class="token punctuation">;</span>
        <span class="token function">add</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    lf l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">1e7</span><span class="token punctuation">,</span> mid<span class="token punctuation">,</span> ans<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">></span> eps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">chk</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            r <span class="token operator">=</span> mid<span class="token punctuation">,</span> ans <span class="token operator">=</span> mid<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            l <span class="token operator">=</span> mid<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> fixed <span class="token operator">&lt;&lt;</span> <span class="token function">setprecision</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    
    cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="AcWing2280-最优标号"><a href="#AcWing2280-最优标号" class="headerlink" title="AcWing2280. 最优标号"></a><a href="https://www.acwing.com/problem/content/2282/">AcWing2280. 最优标号</a></h2><p>看到求异或值最大，不难想到拆位求的思路。</p>
<p>把每一位抠出来后，每个点的编号都只能是 $0$ 或 $1$。</p>
<p>那如何把 $0$ 和 $1$ 之间的异或值与割联系起来呢？</p>
<p>考虑到我们如果将割 $[S,T]$ 的 $S$ 集的权值都设为 $0$，$T$ 集的权值都设为 $1$，那么当且仅当只有连接 $0$ 和 $1$ 的边会有贡献，也就是割的割边，所以最小值就是最小割。</p>
<p>注意一些点可能已经被设权值，要提前先加入 $S&#x2F;T$  割集中。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">505</span><span class="token punctuation">,</span> M <span class="token operator">=</span> <span class="token number">7005</span><span class="token punctuation">,</span> Inf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> S<span class="token punctuation">,</span> T<span class="token punctuation">;</span>
pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> edge<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll flow<span class="token punctuation">;</span>
<span class="token keyword">int</span> head<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> top<span class="token punctuation">;</span>
<span class="token keyword">int</span> que<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> dep<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> cur<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> f<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> head<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> head<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> top<span class="token operator">++</span><span class="token punctuation">;</span>
    e<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">,</span> f<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> head<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span> head<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> top<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> hh <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> head<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dep<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> dep<span class="token punctuation">)</span><span class="token punctuation">;</span>
    que<span class="token punctuation">[</span>hh<span class="token punctuation">]</span> <span class="token operator">=</span> S<span class="token punctuation">,</span> dep<span class="token punctuation">[</span>S<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>hh <span class="token operator">!=</span> tt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> u <span class="token operator">=</span> que<span class="token punctuation">[</span>hh<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">~</span>i<span class="token punctuation">;</span> i <span class="token operator">=</span> nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> v <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>dep<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> Inf <span class="token operator">&amp;&amp;</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                dep<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
                que<span class="token punctuation">[</span>tt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>dep<span class="token punctuation">[</span>T<span class="token punctuation">]</span> <span class="token operator">!=</span> Inf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> flow<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>u <span class="token operator">==</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> flow<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> used <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> cur<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">~</span>i<span class="token punctuation">;</span> i <span class="token operator">=</span> nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cur<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token keyword">int</span> v <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>dep<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> flow <span class="token operator">-</span> used<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>low <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                used <span class="token operator">+</span><span class="token operator">=</span> low<span class="token punctuation">,</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> low<span class="token punctuation">,</span> f<span class="token punctuation">[</span>i <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> low<span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>used <span class="token operator">==</span> flow<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                dep<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> Inf<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> used<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> u <span class="token operator">=</span> edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">,</span> v <span class="token operator">=</span> edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>
        e<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">,</span> f<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> top<span class="token operator">++</span><span class="token punctuation">;</span>
        e<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">,</span> f<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> head<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span> head<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> top<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j <span class="token operator">&amp;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> T<span class="token punctuation">,</span> Inf<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token function">add</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> i<span class="token punctuation">,</span> Inf<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">Dinic</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">build</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        flow <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token function">dfs</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> Inf<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>
    S <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> T <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    
    <span class="token function">memset</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cin <span class="token operator">>></span> edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">>></span> edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> k<span class="token punctuation">;</span>
    cin <span class="token operator">>></span> k<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> u<span class="token punctuation">,</span> p<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> u <span class="token operator">>></span> p<span class="token punctuation">;</span>
        a<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">31</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">Dinic</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> flow <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    
    cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="最大权闭合图"><a href="#最大权闭合图" class="headerlink" title="最大权闭合图"></a>最大权闭合图</h2><p>对于一张图 $G&#x3D;(V,E)$，每个点有一个点权，我们定义：</p>
<p>一个闭合图指从图中选出一些点构成集合 $S$，使得 $\forall u\in S,(u,v)\in E$，有 $v\in S$，我们可称这样的点集 $S$ 或点集 $S$ 与里面的边集合起来是一个闭合图。</p>
<p>一个闭合图的权是闭合图点集中的点权之和。</p>
<p>最大权闭合图就是所有闭合图中权值最大的那个。</p>
<p>这个问题与最小割有什么联系？我们先说网络建法：对于图中的原先的边，在网络中添加容量为 $Inf$ 的边。对于权值大于 $0$ 的点，再从虚拟源点向这个点连容量为这个点点权大小的边，对于权值小于等于 $0$ 的点，再从这个点向虚拟汇点连容量为这个点点权相反数大小的边。</p>
<p><img src="https://cdnjson.com/images/2022/12/18/5b6f0d6dbda6d4ed3fb5bdbbf297c93d.png" alt="最大权闭合图"></p>
<p>我们定义一个特殊的割叫做<strong>简单割</strong>，表示所有的割边都跟源点和汇点相连。那么按上述方式建的网络的最小割是不是简单割呢，由最大流最小割定理，最小割等于最大流，而最大流是有限的，则割边不可能包括中间容量为 $Inf$ 的边。</p>
<p>接下来我们要证明闭合图与简单割一一对应。对于一个闭合子图，记它的点集为 $V’$，我们构造割 $[S,T]$，$S&#x3D;{s}+V’,T&#x3D;V\backslash S+{t}$。而又因为 $V’$ 构成一个闭合图，那么从 $V’$ 中的点怎么走，最终还是只能走到 $V’$ 集合，也就是不可能通过那些容量 $Inf$ 的边从 $S$ 走到 $T$，那么割边不包括容量 $Inf$ 的边，即这是一个简单割。</p>
<p>那么对于一个简单割 $[S,T]$ ，由于不存在容量 $Inf$ 的割边，所以 $S$ 中的点也只能走到 $S$ 中的点，所以是一个闭合图。</p>
<p>那么闭合图的权到底和这个简单割的容量的有什么关系？</p>
<p>设 $S&#x3D;{s}+V_S,T&#x3D;{t}+V_T$，我们看如下四类割边各自造成的贡献：</p>
<ol>
<li>$s\rightarrow t$，虚拟源点到虚拟汇点没有直接的边，没有贡献。</li>
<li>$V_S\rightarrow V_T$，由于是<strong>简单割</strong>，所以没有贡献。</li>
<li>$s\rightarrow V_T$，每条割边的容量对应割中的那些正权点的权值，所以这块贡献为正权点权值之和。</li>
<li>$V_S\rightarrow t$，每条割边的容量对应割中的那些负权点的权值，所以这块贡献为负权点权值之和。</li>
</ol>
<p>所以最后写成式子就是：$c(S,T)&#x3D;\sum\limits_{v\in V_T^+}w_v+\sum\limits_{v\in V_S^-}(-w_v)$。</p>
<p>我们去看 $V_S$ 构成的闭合子图的权值：</p>
<p>$w(V_S)&#x3D;\sum\limits_{v\in V_S^+}w_v-\sum\limits_{v\in V_S^-}(-w_v)$</p>
<p>$&#x3D;\sum\limits_{v\in V_S^+}w_v+\sum\limits_{v\in V_T^+}w_v-c(S,T)$</p>
<p>$&#x3D;\sum\limits_{v\in V}w_v-c(S,T)$</p>
<p>则 $V_S$ 的权值是<strong>所有点的权值之和减去简单割的容量</strong>，那么什么时候有最大值呢，<strong>当求得最小割的时候</strong>。</p>
<p>至此完成证明。</p>
<h2 id="NOI2006-最大获利"><a href="#NOI2006-最大获利" class="headerlink" title="[NOI2006] 最大获利"></a><a href="https://www.luogu.com.cn/problem/P4174">[NOI2006] 最大获利</a></h2><p>本题中如果把建设中转站的费用看作负权点，用户收益看作正权点的话，我们可以转化为最大权闭合图问题。</p>
<p>我们只需向每个用户群和对应的两个中转站连边，当且仅当两个中转站都选了，这个用户群才能选，所以从每个用户群出发得保证走到两个中转站，所以是个闭合子图。</p>
<p>代码：<a href="https://www.luogu.com.cn/record/101110660">https://www.luogu.com.cn/record/101110660</a></p>
<h2 id="最大密度子图"><a href="#最大密度子图" class="headerlink" title="最大密度子图"></a>最大密度子图</h2><p>对于一个点集 $V$，$E&#x3D;{(u,v)|u\in V, v\in V}$，则这个子图对应密度为 $\dfrac{|E|}{|V|}$，那么如何求对于一个图中的最大密度子图。</p>
<p>看到除法，我们使用 01 分数规划，判定 $\dfrac{|E|}{|V|}\ge g$。</p>
<p>$|E|-g\cdot |V|\ge 0$，我们要最大化 $|E|-g\cdot |V|$，也就是最小化 $g\cdot |V|-|E|$。</p>
<p>$g\cdot |V|-|E|&#x3D;\sum\limits_{v\in V}g-(\dfrac{\sum\limits_{v\in V}d_v}{2}-\dfrac{c(V,V’)}{2})$，其中 $V’$ 是点的全集和 $V$ 的差集，$d_u$ 是 $u$ 点的度。	</p>
<p>我们把系数提到前面得到 $\dfrac{1}{2}(\sum\limits_{v\in V}(g-d_v)+c(V,V’))$，观察到有 $c(V,V’)$ 这样的割的容量的部分，但是我们如何去把前面那项结合起来？</p>
<p>于是有了如下的建图：从源点向每个点连容量为 $U$ 的边，从每个点向汇点连容量为 $U+2g-d_v$ 的边，原图中的边的容量均为 $1$。$U$ 是为了放置边的容量爆负加的偏移量。</p>
<p>我们还是分类算割的容量：</p>
<ol>
<li>$s\rightarrow t$，没有，无贡献。</li>
<li>$s\rightarrow V’$，每条的容量为 $U$。</li>
<li>$V\rightarrow t$，每条的容量为 $U+2g-d_v$。</li>
<li>$V\rightarrow V’$，每条的容量均为 $1$。</li>
</ol>
<p>$c(V,V’)&#x3D;\sum\limits_{v\in V’}U+\sum\limits_{v\in V}(U+2g-d_v)+\sum\limits_{u\in V}\sum\limits_{v\in V’}c(u,v)$</p>
<p>$&#x3D;U\cdot n +2g\sum\limits_{v\in V’}1-\sum\limits_{u\in V}\sum\limits_{v\in V}c(u,v)$</p>
<p>$&#x3D;U\cdot n+2g|V|-2|E|$</p>
<p>这样我们只需最小化 $c(V,V’)$，就能最小化 $g\cdot |V|-|E|$。</p>
<h2 id="最小点权覆盖集"><a href="#最小点权覆盖集" class="headerlink" title="最小点权覆盖集"></a>最小点权覆盖集</h2><p>最小点权覆盖集指的是对于一个图 $G$，每个点有权值，找到一个最小的点权和的点集 $V$，使得原图中的每一条边的两个端点都<strong>至少</strong> $1$ <strong>个</strong>在点集 $V$ 中。</p>
<p>在一般图中，最小点权覆盖集中是 NP-完全问题，但在二分图中，我们可以使用最小割来求解，因此下列所用算法仅适用于二分图。</p>
<p><img src="https://cdnjson.com/images/2023/01/29/image.png" alt="最小点权覆盖集.png"></p>
<p>我们对于一个二分图，而如下方式建出网络，由于最小割求的是割边容量的最小值，而最小点权覆盖集对应的是点权值最小，那么我们希望将割边限定在 $S\rightarrow X$ 以及 $Y\rightarrow T$ 的边中，这样我们说一条割边对应了一个需要选择的点，这就解释了我们的建图方式：$S$ 向 $X$ 点集中每个点连容量为每个点权的边，$Y$ 向 $T$ 点集中每个点连容量为每个点权的边，$X$ 向 $Y$ 的边均设定为正无穷，<strong>这样割边就不会出现在这里</strong>，此时可以证明一个<strong>简单割</strong>（类似于最大权闭合图的定义，指不包括 $X\rightarrow Y$ 割边的割）对应一个<strong>极小的</strong>点覆盖集（证明略），而<strong>简单割</strong>的最小割是所有割的最小割，因此直接在上面的网络找最小割即为答案。</p>
<h2 id="最大点权独立集"><a href="#最大点权独立集" class="headerlink" title="最大点权独立集"></a>最大点权独立集</h2><p>最大点权独立集是最小点权覆盖集的<strong>对偶问题</strong>，当每个点的权值均为 $1$ 时，有最小点权覆盖集 $&#x3D;$ $n-$ 最大点权独立集。</p>
<p>而当权值不为 $1$ 时，这个结论同样成立，即最小点权覆盖集 $&#x3D;$ 所有点权和 $-$ 最大点权独立集。</p>
<p>证明从双方向证明：</p>
<ul>
<li>若 $V_1$ 是点覆盖集，那么 $V_2&#x3D;V-V_1$ 是独立集。</li>
<li>若 $V_2$ 是独立集，那么 $V_1&#x3D;V-V_2$ 是点覆盖集。</li>
</ul>
<p>用反证法可以轻易的证明出来，因此沿用最小点权覆盖集的方法做即可。</p>
<h3 id="P4474-王者之剑"><a href="#P4474-王者之剑" class="headerlink" title="P4474 王者之剑"></a><a href="https://www.luogu.com.cn/problem/P4474">P4474 王者之剑</a></h3><p>这题我们先从性质出发：</p>
<ol>
<li>只能在偶数秒捡宝石。我们只需证奇数秒时所在的格子一定没有宝石即可，如果上一秒动了，那么在上一秒时此格子已经被清空，而如果上一秒原地不动，那么此时的宝石应该已经在上一秒被拿走，无论什么情况，奇数秒所在的格子没有宝石，因此只能在偶数秒捡宝石。</li>
<li>相邻的格子不可能同时拿到。显然易证。</li>
</ol>
<p>根据这 $2$ 个性质，不难猜测本题是选择一个独立集。我们将方格图黑白染色，而边都是在黑点和白点之间的，因此图是一个二分图，而不能选相邻的格子就说明我们选择的是一个独立集，本题可以证明一个独立集选择方案能够一一对应一个合法的拿宝石方案，那么这样在最终的网络跑最大点权独立集即可。</p>
<p>代码：<a href="https://www.luogu.com.cn/record/101111765">https://www.luogu.com.cn/record/101111765</a></p>
<h1 id="费用流算法"><a href="#费用流算法" class="headerlink" title="费用流算法"></a>费用流算法</h1><p>费用流的定义其实非常简单，我们在每条边上添加了一个费用 $w$，表示每单位流量经过这条边所需的花费，那么对于一个网络的某个可行流，我们定义这个可行流的费用为所有边的花费之和。那么我们希望求<strong>最小费用最大流&#x2F;最小流</strong>。</p>
<h2 id="text-Edmonds-Karp-1"><a href="#text-Edmonds-Karp-1" class="headerlink" title="$\text{Edmonds Karp}$"></a>$\text{Edmonds Karp}$</h2><p>在求最大流中，我们使用 <code>bfs()</code> 来找到一条增广路增广，由最大流最小割定理，这个算法是正确的，而对于最小费用最大流，我们只需将 <code>bfs()</code> 换成 <code>spfa()</code>，每次找的是残留网络的最短费用路，然后用这条路增广即可。</p>
<p>注意图中不能出现负环，出现负环请参考<a href="https://www.luogu.com.cn/problem/P7173">P7173 【模板】有负圈的费用流</a>。</p>
<h3 id="时间复杂度-2"><a href="#时间复杂度-2" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>还是 $\mathcal{O}(nm^2)$。总之应该没人卡。</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">5005</span><span class="token punctuation">,</span> M <span class="token operator">=</span> <span class="token number">100005</span><span class="token punctuation">,</span> Inf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> S<span class="token punctuation">,</span> T<span class="token punctuation">;</span>
<span class="token keyword">int</span> flow<span class="token punctuation">,</span> cost<span class="token punctuation">;</span>

<span class="token keyword">int</span> head<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> top<span class="token punctuation">;</span>
<span class="token keyword">int</span> que<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> dis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> pre<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> incf<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> inque<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> f<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">,</span> w<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> head<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> head<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> top<span class="token operator">++</span><span class="token punctuation">;</span>
    e<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">,</span> f<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>d<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> head<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span> head<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> top<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">spfa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> hh <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dis<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> dis<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>incf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> incf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    que<span class="token punctuation">[</span>hh<span class="token punctuation">]</span> <span class="token operator">=</span> S<span class="token punctuation">,</span> dis<span class="token punctuation">[</span>S<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> incf<span class="token punctuation">[</span>S<span class="token punctuation">]</span> <span class="token operator">=</span> Inf<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>hh <span class="token operator">!=</span> tt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> u <span class="token operator">=</span> que<span class="token punctuation">[</span>hh<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>hh <span class="token operator">==</span> N<span class="token punctuation">)</span> hh <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        inque<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">~</span>i<span class="token punctuation">;</span> i <span class="token operator">=</span> nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> v <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">></span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                pre<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
                incf<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>incf<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>inque<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    que<span class="token punctuation">[</span>tt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>tt <span class="token operator">==</span> N<span class="token punctuation">)</span> tt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                    inque<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> incf<span class="token punctuation">[</span>T<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">EdmondsKarp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">spfa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> t <span class="token operator">=</span> incf<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">;</span>
        flow <span class="token operator">+</span><span class="token operator">=</span> t<span class="token punctuation">,</span> cost <span class="token operator">+</span><span class="token operator">=</span> t <span class="token operator">*</span> dis<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> u <span class="token operator">=</span> T<span class="token punctuation">;</span> u <span class="token operator">!=</span> S<span class="token punctuation">;</span> u <span class="token operator">=</span> e<span class="token punctuation">[</span>pre<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            f<span class="token punctuation">[</span>pre<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> t<span class="token punctuation">,</span> f<span class="token punctuation">[</span>pre<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> t<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    cin <span class="token operator">>></span> n <span class="token operator">>></span> m <span class="token operator">>></span> S <span class="token operator">>></span> T<span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> a <span class="token operator">>></span> b <span class="token operator">>></span> c <span class="token operator">>></span> d<span class="token punctuation">;</span>
        <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">EdmondsKarp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> flow <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span> <span class="token operator">&lt;&lt;</span> cost <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    
    cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="text-Dinic-2"><a href="#text-Dinic-2" class="headerlink" title="$\text{Dinic}$"></a>$\text{Dinic}$</h2><p>在 <code>spfa()</code> 后多路增广，复杂度仍为 $\mathcal{O}(nm^2)$，但优化了时间常数。</p>
<p><del>感觉没啥用就不写了。</del></p>
<h1 id="费用流相关模型和例题"><a href="#费用流相关模型和例题" class="headerlink" title="费用流相关模型和例题"></a>费用流相关模型和例题</h1><h2 id="直接运用"><a href="#直接运用" class="headerlink" title="直接运用"></a>直接运用</h2><h3 id="P4015-运输问题"><a href="#P4015-运输问题" class="headerlink" title="P4015 运输问题"></a><a href="https://www.luogu.com.cn/problem/P4015">P4015 运输问题</a></h3><p>对于每个仓库 $i$，从源点 $S$ 向仓库 $i$ 连容量为 $a_i$，费用为 $0$ 的边；对于每个商店 $j$，从商店 $j$ 向汇点 $T$ 连容量为 $b_j$，费用为 $0$ 的边。</p>
<p>最后，向仓库 $i$ 到商店 $j$ 连容量为 $0$，费用为 $c_{i,j}$ 的边，在此网络上跑最小&#x2F;最大费用最大流即可。</p>
<p>对于求最大费用最大流，可以将所有边的权值取相反数，求最小费用最大流后将所求费用再求相反数即可。</p>
<p>代码：<a href="https://www.luogu.com.cn/record/101131411">https://www.luogu.com.cn/record/101131411</a></p>
<h3 id="P4016-负载平衡问题"><a href="#P4016-负载平衡问题" class="headerlink" title="P4016 负载平衡问题"></a><a href="https://www.luogu.com.cn/problem/P4016">P4016 负载平衡问题</a></h3><p>首先根据贪心，必定是将高于平均的仓库中货物转到低于平均的仓库。</p>
<p>那么我们从源点 $S$ 向每一个高于平均的仓库连容量为 $a_i-ave$，费用为 $0$ 的边，从每一个低于平均的仓库向汇点连容量为 $ave-a_i$，费用为 $0$ 的边。</p>
<p>最后在相邻两个仓库之间连容量 $Inf$，费用为 $1$ 的边，这样任意一个满流就对应一个合法的搬运方案。</p>
<p>代码：<a href="https://www.luogu.com.cn/record/101131507">https://www.luogu.com.cn/record/101131507</a></p>
<h2 id="二分图最优匹配"><a href="#二分图最优匹配" class="headerlink" title="二分图最优匹配"></a>二分图最优匹配</h2><h3 id="P4014-分配问题"><a href="#P4014-分配问题" class="headerlink" title="P4014 分配问题"></a><a href="https://www.luogu.com.cn/problem/P4014">P4014 分配问题</a></h3><p>跟<a href="https://www.luogu.com.cn/problem/P4015">P4015 运输问题</a>差不多，把源点和汇点的边容量都改为 $1$ 就行。</p>
<p>代码：<a href="https://www.luogu.com.cn/record/101131608">https://www.luogu.com.cn/record/101131608</a></p>
<h2 id="费用流之最大权不相交路径"><a href="#费用流之最大权不相交路径" class="headerlink" title="费用流之最大权不相交路径"></a>费用流之最大权不相交路径</h2><h3 id="P4013-数字梯形问题"><a href="#P4013-数字梯形问题" class="headerlink" title="P4013 数字梯形问题"></a><a href="https://www.luogu.com.cn/problem/P4013">P4013 数字梯形问题</a></h3><p>针对于路径不相交，我们只需将对应的路径容量设为 $1$，就能保证此边只会被至多一条路径增广。</p>
<p>针对于点不相交，我们想到了在最大流学到的拆点技巧，将其分为入点和出点，在入点和出点连一条容量为 $1$ 的边，这样就能使至多一条路径经过此点。</p>
<p>从不相交改到相交时，注意将相应边的容量放开即可。</p>
<p>代码：<a href="https://www.luogu.com.cn/record/101131742">https://www.luogu.com.cn/record/101131742</a></p>
<h2 id="网格图模型"><a href="#网格图模型" class="headerlink" title="网格图模型"></a>网格图模型</h2><h3 id="AcWing382-K取方格数"><a href="#AcWing382-K取方格数" class="headerlink" title="AcWing382. K取方格数"></a><a href="https://www.acwing.com/problem/content/384/">AcWing382. K取方格数</a></h3><p>本题中唯一一个难点：“若多条路线重复经过一个格子，只取一次”。也就是说，我们既要保证这个格子能被走多次，还要保证这个格子又一次代价能被计算到。</p>
<p>那么我们可以将格子拆点，从入点向出点连两条边，一条容量为 $Inf$，费用为 $0$，一条容量为 $1$，费用为 $Val_{i,j}$。这样就惊喜的发现解决了我们的要求。</p>
<p>最后我们总结一些建图方式对应的意义：</p>
<ul>
<li>连一条容量为 $Inf$ 的边：某条边可以重复经过。</li>
<li>连一条容量为 $1$ 的边：某条边仅能经过 $1$ 次。</li>
<li>入点向出点连一条容量为 $1$ 的边：某个点仅能经过 $1$ 次。</li>
<li>入点向出点连一条容量为 $Inf$，费用为 $w$ 的边：某个点可经过任意次，且每次经过均有价值 $w$。</li>
<li>入点向出点连一条容量为 $1$，费用为 $w$ 的边：某个点只有 $1$ 次价值 $w$ <strong>且仅能经过</strong> $1$ <strong>次</strong>。</li>
<li>入点向出点连一条容量为 $1$，费用为 $w$ 的边，和一条容量为 $Inf$，费用为 $0$ 的边：某个点可经过任意次，<strong>只计算</strong> $1$ <strong>次价值</strong>。</li>
</ul>
<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">5005</span><span class="token punctuation">,</span> M <span class="token operator">=</span> <span class="token number">20005</span><span class="token punctuation">,</span> Inf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> S<span class="token punctuation">,</span> T<span class="token punctuation">;</span>
<span class="token keyword">int</span> cost<span class="token punctuation">;</span>
<span class="token keyword">int</span> head<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> top<span class="token punctuation">;</span>
<span class="token keyword">int</span> que<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> dis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> pre<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> incf<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> inque<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> f<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">,</span> w<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> head<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> head<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> top<span class="token operator">++</span><span class="token punctuation">;</span>
    e<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">,</span> f<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>d<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> head<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span> head<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> top<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">spfa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> hh <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dis<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> dis<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>incf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> incf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    que<span class="token punctuation">[</span>hh<span class="token punctuation">]</span> <span class="token operator">=</span> S<span class="token punctuation">,</span> dis<span class="token punctuation">[</span>S<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> incf<span class="token punctuation">[</span>S<span class="token punctuation">]</span> <span class="token operator">=</span> Inf<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>hh <span class="token operator">!=</span> tt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> u <span class="token operator">=</span> que<span class="token punctuation">[</span>hh<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>hh <span class="token operator">==</span> N<span class="token punctuation">)</span> hh <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        inque<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">~</span>i<span class="token punctuation">;</span> i <span class="token operator">=</span> nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> v <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&lt;</span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                pre<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
                incf<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>incf<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>inque<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    que<span class="token punctuation">[</span>tt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>tt <span class="token operator">==</span> N<span class="token punctuation">)</span> tt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                    inque<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> incf<span class="token punctuation">[</span>T<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">EdmondsKarp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">spfa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> t <span class="token operator">=</span> incf<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">;</span>
        cost <span class="token operator">+</span><span class="token operator">=</span> t <span class="token operator">*</span> dis<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> u <span class="token operator">=</span> T<span class="token punctuation">;</span> u <span class="token operator">!=</span> S<span class="token punctuation">;</span> u <span class="token operator">=</span> e<span class="token punctuation">[</span>pre<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            f<span class="token punctuation">[</span>pre<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> t<span class="token punctuation">,</span> f<span class="token punctuation">[</span>pre<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> t<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> n <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    cin <span class="token operator">>></span> n <span class="token operator">>></span> k<span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>
    S <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> T <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">add</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> c<span class="token punctuation">;</span>
            cin <span class="token operator">>></span> c<span class="token punctuation">;</span>
            <span class="token function">add</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">add</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> Inf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">get</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> Inf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> Inf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">add</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> T<span class="token punctuation">,</span> k<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">EdmondsKarp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> cost <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    
    cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="AcWing2195-深海机器人问题"><a href="#AcWing2195-深海机器人问题" class="headerlink" title="AcWing2195. 深海机器人问题"></a><a href="https://www.acwing.com/activity/content/problem/content/2688/">AcWing2195. 深海机器人问题</a></h3><p>我们考虑对于每个初始有机器人的格子作为出发点连源点 $S$，而目的地作为结束点连汇点 $T$。而题目要求“到达目的地的机器人尽可能多的情况下，最高收益是多少”，那么我们自然将其对应为最大费用最大流，我们把网格上相邻的边对应到网络中边的费用即可。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">270</span><span class="token punctuation">,</span> M <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">,</span> Inf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> S<span class="token punctuation">,</span> T<span class="token punctuation">;</span>
<span class="token keyword">int</span> cost<span class="token punctuation">;</span>
<span class="token keyword">int</span> head<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> top<span class="token punctuation">;</span>
<span class="token keyword">int</span> que<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> dis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> pre<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> incf<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> inque<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> f<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">,</span> w<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> head<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> head<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> top<span class="token operator">++</span><span class="token punctuation">;</span>
    e<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">,</span> f<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>d<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> head<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span> head<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> top<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">spfa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> hh <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dis<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> dis<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>incf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> incf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    que<span class="token punctuation">[</span>hh<span class="token punctuation">]</span> <span class="token operator">=</span> S<span class="token punctuation">,</span> dis<span class="token punctuation">[</span>S<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> incf<span class="token punctuation">[</span>S<span class="token punctuation">]</span> <span class="token operator">=</span> Inf<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>hh <span class="token operator">!=</span> tt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> u <span class="token operator">=</span> que<span class="token punctuation">[</span>hh<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>hh <span class="token operator">==</span> N<span class="token punctuation">)</span> hh <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        inque<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">~</span>i<span class="token punctuation">;</span> i <span class="token operator">=</span> nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> v <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&lt;</span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                pre<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
                incf<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>incf<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>inque<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    que<span class="token punctuation">[</span>tt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>tt <span class="token operator">==</span> N<span class="token punctuation">)</span> tt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                    inque<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> incf<span class="token punctuation">[</span>T<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">EdmondsKarp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">spfa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> t <span class="token operator">=</span> incf<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">;</span>
        cost <span class="token operator">+</span><span class="token operator">=</span> t <span class="token operator">*</span> dis<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> u <span class="token operator">=</span> T<span class="token punctuation">;</span> u <span class="token operator">!=</span> S<span class="token punctuation">;</span> u <span class="token operator">=</span> e<span class="token punctuation">[</span>pre<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            f<span class="token punctuation">[</span>pre<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> t<span class="token punctuation">,</span> f<span class="token punctuation">[</span>pre<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> t<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    cin <span class="token operator">>></span> a <span class="token operator">>></span> b <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>
    S <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> T <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> c<span class="token punctuation">;</span>
            cin <span class="token operator">>></span> c<span class="token punctuation">;</span>
            <span class="token function">add</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">add</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Inf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> c<span class="token punctuation">;</span>
            cin <span class="token operator">>></span> c<span class="token punctuation">;</span>
            <span class="token function">add</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">get</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">add</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">get</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> Inf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> a<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> k<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> k <span class="token operator">>></span> x <span class="token operator">>></span> y<span class="token punctuation">;</span>
        <span class="token function">add</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> <span class="token function">get</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> b<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> r<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> r <span class="token operator">>></span> x <span class="token operator">>></span> y<span class="token punctuation">;</span>
        <span class="token function">add</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> T<span class="token punctuation">,</span> r<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">EdmondsKarp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> cost <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    
    cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="拆点"><a href="#拆点" class="headerlink" title="拆点"></a>拆点</h2><h3 id="P1251-餐巾计划问题"><a href="#P1251-餐巾计划问题" class="headerlink" title="P1251 餐巾计划问题"></a><a href="https://www.luogu.com.cn/problem/P1251">P1251 餐巾计划问题</a></h3><p>本题中要注意我们将每一天的餐巾拆分为“用完的旧餐巾”和“需要的新餐巾”，然后我们对于“需要的新餐巾”向汇点连容量 $r_i$，费用为 $0$ 的边，因此我们限制了“需要的新餐巾”数量，从而使任意一个满流对应了一个餐巾	的方案，跑最小费用最大流即可。</p>
<p>而其余的不同情况的连边，参考下图。</p>
<img src="https://cdnjson.com/images/2023/01/30/91cf01654cfe92d02cf544be99b7d03d.png" alt="餐巾计划问题.png" style="zoom:90%;" />

<p>代码：<a href="https://www.luogu.com.cn/record/101132505">https://www.luogu.com.cn/record/101132505</a></p>
<h2 id="无源汇有上下界最小费用可行流问题"><a href="#无源汇有上下界最小费用可行流问题" class="headerlink" title="无源汇有上下界最小费用可行流问题"></a>无源汇有上下界最小费用可行流问题</h2><h3 id="P3980-NOI2008-志愿者招募"><a href="#P3980-NOI2008-志愿者招募" class="headerlink" title="P3980 [NOI2008] 志愿者招募"></a><a href="https://www.luogu.com.cn/problem/P3980">P3980 [NOI2008] 志愿者招募</a></h3><p>我们先按如下方式建出网络：</p>
<p><img src="https://cdnjson.com/images/2023/01/30/e04ac050a786a300ec56ab50c10eead5.png" alt="志愿者招募.png"></p>
<p>其中第 $i$ 号点和 $(i+1)$ 号点的边就表示第 $i$ 天志愿者<strong>变化的人数</strong>。（可以为负值）</p>
<p>红色的边是指每类志愿者的工作区间 $[s_i,t_i]$ 会在边上凭空产生 $1$ 的流量，为了满足流量守恒，我们建反边形成回路就能平衡流量。</p>
<p>那么我们说<strong>每条边的容量均有下界值</strong>，因为如果小于下界，那么下一天的志愿者人数就不能满足要求。这是一个无源汇有上下界最小费用可行流问题，如何求解？</p>
<p>参考无源汇有上下界可行流的做法，我们对于每个点，统计进入这个点的容量 $c_入$ 和流出这个点的容量 $c_出$，若 $c_入&gt;c_出$，从 $S$ 到这个点连容量 $c_入-c_出$ 的边，反之从这个点向 $T$ 连容量 $c_出-c_入$ 的边即满足流量守恒。当然本题实际上我们是把每条边看作一个新网络上的点，而 $c_入$ 就是这个边左边的端点对应的人数，$c_出$ 就是这个边右边的端点对应的人数。</p>
<p>对按这种方式建成的新网络求最小费用最大流就是原问题的答案。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>省选</category>
        <category>NOI8级</category>
      </categories>
  </entry>
  <entry>
    <title>模拟退火算法</title>
    <url>/2022/11/07/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>先开个坑，期中考完填。</p>
<h1 id="模拟退火的概念"><a href="#模拟退火的概念" class="headerlink" title="模拟退火的概念"></a>模拟退火的概念</h1><p>退火原先是一个物理学上的概念，当固体的温度很高时，内能比较大，固体内的粒子处于快速无序运动状态，当温度慢慢降低，固体的内能减小，粒子逐渐趋于有序，最终固体处于常温状态，内能达到最小，此时粒子最为稳定。</p>
<p>那么模拟退火算法 $(\text{Simulated Annealing})$ 的思想就是指从某一较高初温出发，伴随温度参数的不断下降,结合概率突跳特性在解空间中随机寻找目标函数的全局最优解，即在局部最优解能概率性地跳出并最终趋于全局最优。</p>
<p>简单来说，模拟退火算法就是一个聪明的爬山算法，因为即使有时新搜到的解劣于已经得到的最优解，但我们还是有一定概率将最优解变为这个更劣解。而爬山算法的缺点很明显——容易被限制在一个次优的峰值上，模拟退火即能帮助我们跳到其它的峰值。</p>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><p><img src="https://oi-wiki.org/misc/images/simulated-annealing.gif" alt="模拟退火流程.gif"></p>
<p>模拟退火的过程就是如上的过程，温度较高的时候，红线抖动的范围会更广，更有可能找到全局最优峰值，温度较低时，红线向峰值收敛，最终得到最优解。</p>
<p>那么现在我们只需要解决一个问题：如何设计更新状态的概率？</p>
<p>由上述的概念可知，我们需要接受以一定概率去更换到最优解的情况，但这个概率具体是多少呢？</p>
<p>这个公式也有一个名字，叫<a href="https://baike.baidu.com/item/Metropolis%E6%8E%A5%E5%8F%97%E5%87%86%E5%88%99/14678977">Metropolis接受准则</a>，可自行前往百度百科查看，我们可以总结成如下公式：</p>
<ul>
<li>当新解优于当前最优解时，$p&#x3D;1$，即一定将其更新为最优解。</li>
<li>当新解劣于当前最优解时，$p&#x3D;\exp(\dfrac{-\Delta E}{T})$，其中的 $\exp$ 表示自然对数。</li>
</ul>
<p>那么这里的 $\Delta E$ 和 $T$ 怎么解释？</p>
<p>$T$ 即为上文所提到的温度，$\Delta E$ 代表新解与旧解之间的变化量。</p>
<p>然后我们就解决了问题，每次随机一个情况，计算此时的代价，修改答案，直到退火结束。</p>
<h1 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h1><p>模拟退火算法的一个麻烦的地方。</p>
<p>一个适合的参数对题目的分数产生巨大的影响，我们要给模拟退火算法制定哪些参数呢？</p>
<ol>
<li><p>初始温度 $T_0$</p>
<p>初始温度即为物体一开始时的温度，物体内的粒子最活泼的时刻，一般情况下，一个越大的初始温度搜索到最优解的可能性越大。</p>
</li>
<li><p>降温系数 $d$</p>
<p>降温系数顾名思义，就是物体降温速度的快慢，可以粗略的得知 $d\in (0,1)$，但一般情况下，$d$ 要取 $0.999$ 附近，注意 $d$ 对 $T$ 的影响是指数的，所以任何 $10^{-3}$ 量级下的改变也会对降温速度的快慢产生很大的影响，一般按照具体题目分析。</p>
</li>
<li><p>终止温度 $T_k$</p>
<p>物体停止降温的时刻，此时物体内的粒子趋于稳定，也是我们找到最优解的时刻，一般取一个接近 $0$ 的数。</p>
</li>
</ol>
<p>理论上只有这 $3$ 个函数，但是还有一个玄学的因素：</p>
<ol start="4">
<li><p>随机种子 $seed$！</p>
<p>由于中途需要随机情况，所以一个好的种子也是得到答案的关键，只不过会大大增加模拟退火算法的不确定性，一般以时间作为种子，当然有比较好的种子也行。</p>
</li>
</ol>
<p>当然，具体的参数还是要在具体的题目分析，被卡除了算法的问题就是参数问题，此时要有足够的耐心。</p>
<h1 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h1><p>模拟退火算法还有着几个帮助解题的技巧。</p>
<h2 id="分值域模拟退火"><a href="#分值域模拟退火" class="headerlink" title="分值域模拟退火"></a>分值域模拟退火</h2><p>当函数的峰点很多时，模拟退火难以直接跑出最优解。</p>
<p>此时可以把整个值域分成几段，每段跑一遍模拟退火，然后再取最优解。</p>
<h2 id="卡时"><a href="#卡时" class="headerlink" title="卡时"></a>卡时</h2><p>在题目的时限要求内尽可能多跑几次模拟退火，增加答案最优的可能性。</p>
<p>具体可写为：</p>
<pre class=" language-cpp"><code class="language-cpp">lf TimeLimit <span class="token operator">=</span> <span class="token number">0.9</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 单位为秒，略小于题目时限。</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>lf<span class="token punctuation">)</span><span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> CLOCKS_PER_SEC <span class="token operator">&lt;</span> TimeLimit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">SimulateAnneal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="P1337-JSOI2004-平衡点-x2F-吊打XXX"><a href="#P1337-JSOI2004-平衡点-x2F-吊打XXX" class="headerlink" title="P1337 [JSOI2004] 平衡点 &#x2F; 吊打XXX"></a><a href="https://www.luogu.com.cn/problem/P1337">P1337 [JSOI2004] 平衡点 &#x2F; 吊打XXX</a></h2><p>我们通过物理学上的定义，计算能量总和，能量总和越小越稳定。</p>
<pre class=" language-cpp"><code class="language-cpp">lf <span class="token function">getEnergy</span><span class="token punctuation">(</span>lf px<span class="token punctuation">,</span> lf py<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    lf dist <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        lf dx <span class="token operator">=</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> px<span class="token punctuation">,</span> dy <span class="token operator">=</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> py<span class="token punctuation">;</span>
        dist <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>dx <span class="token operator">*</span> dx <span class="token operator">+</span> dy <span class="token operator">*</span> dy<span class="token punctuation">)</span> <span class="token operator">*</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">></span> dist<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res <span class="token operator">=</span> dist<span class="token punctuation">,</span> ansx <span class="token operator">=</span> px<span class="token punctuation">,</span> ansy <span class="token operator">=</span> py<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dist<span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</code></pre>
<p>因为我们是以坐标 $(x,y)$ 向周围随机拓展，根据温度越高随机范围越大，我们可以用如下方法随机新一轮的坐标。</p>
<pre class=" language-cpp"><code class="language-cpp">lf nxtx <span class="token operator">=</span> nowx <span class="token operator">+</span> <span class="token function">Rand</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1e4</span><span class="token punctuation">,</span> <span class="token number">1e4</span><span class="token punctuation">)</span> <span class="token operator">*</span> t0<span class="token punctuation">,</span> nxty <span class="token operator">=</span> nowy <span class="token operator">+</span> <span class="token function">Rand</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1e4</span><span class="token punctuation">,</span> <span class="token number">1e4</span><span class="token punctuation">)</span> <span class="token operator">*</span> t0<span class="token punctuation">;</span>
</code></pre>
<p>当温度降到终止温度后，我们可以再随机 $T$ 次，求得最终的解。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">double</span> lf<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
lf ansx<span class="token punctuation">,</span> ansy<span class="token punctuation">,</span> res<span class="token punctuation">;</span>


mt19937 <span class="token function">engine</span><span class="token punctuation">(</span>chrono<span class="token operator">::</span>steady_clock<span class="token operator">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">time_since_epoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">Rand</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    uniform_int_distribution<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dist</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">dist</span><span class="token punctuation">(</span>engine<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

lf <span class="token function">getEnergy</span><span class="token punctuation">(</span>lf px<span class="token punctuation">,</span> lf py<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    lf dist <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        lf dx <span class="token operator">=</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> px<span class="token punctuation">,</span> dy <span class="token operator">=</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> py<span class="token punctuation">;</span>
        dist <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>dx <span class="token operator">*</span> dx <span class="token operator">+</span> dy <span class="token operator">*</span> dy<span class="token punctuation">)</span> <span class="token operator">*</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">></span> dist<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res <span class="token operator">=</span> dist<span class="token punctuation">,</span> ansx <span class="token operator">=</span> px<span class="token punctuation">,</span> ansy <span class="token operator">=</span> py<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dist<span class="token punctuation">;</span>
<span class="token punctuation">}</span> 

<span class="token keyword">void</span> <span class="token function">SimulateAnneal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    lf t0 <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">,</span> tk <span class="token operator">=</span> <span class="token number">1e-8</span><span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token number">0.999</span><span class="token punctuation">;</span>
    lf nowx <span class="token operator">=</span> ansx<span class="token punctuation">,</span> nowy <span class="token operator">=</span> ansy<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>t0 <span class="token operator">></span> tk<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        lf nxtx <span class="token operator">=</span> nowx <span class="token operator">+</span> <span class="token function">Rand</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1e4</span><span class="token punctuation">,</span> <span class="token number">1e4</span><span class="token punctuation">)</span> <span class="token operator">*</span> t0<span class="token punctuation">,</span> nxty <span class="token operator">=</span> nowy <span class="token operator">+</span> <span class="token function">Rand</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1e4</span><span class="token punctuation">,</span> <span class="token number">1e4</span><span class="token punctuation">)</span> <span class="token operator">*</span> t0<span class="token punctuation">;</span>
        lf delta <span class="token operator">=</span> <span class="token function">getEnergy</span><span class="token punctuation">(</span>nxtx<span class="token punctuation">,</span> nxty<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">getEnergy</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>delta <span class="token operator">/</span> t0<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token punctuation">(</span>lf<span class="token punctuation">)</span><span class="token function">Rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1e4</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1e4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            nowx <span class="token operator">=</span> nxtx<span class="token punctuation">,</span> nowy <span class="token operator">=</span> nxty<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        t0 <span class="token operator">*</span><span class="token operator">=</span> d<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> T <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> test <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>test <span class="token operator">&lt;=</span> T<span class="token punctuation">;</span>test<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        lf nxtx <span class="token operator">=</span> ansx <span class="token operator">+</span> <span class="token function">Rand</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1e4</span><span class="token punctuation">,</span> <span class="token number">1e4</span><span class="token punctuation">)</span> <span class="token operator">*</span> t0<span class="token punctuation">,</span> nxty <span class="token operator">=</span> ansy <span class="token operator">+</span> <span class="token function">Rand</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1e4</span><span class="token punctuation">,</span> <span class="token number">1e4</span><span class="token punctuation">)</span> <span class="token operator">*</span> t0<span class="token punctuation">;</span>
        <span class="token function">getEnergy</span><span class="token punctuation">(</span>nxtx<span class="token punctuation">,</span> nxty<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cin <span class="token operator">>></span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        ansx <span class="token operator">+</span><span class="token operator">=</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> ansy <span class="token operator">+</span><span class="token operator">=</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    ansx <span class="token operator">/</span><span class="token operator">=</span> n<span class="token punctuation">,</span> ansy <span class="token operator">/</span><span class="token operator">=</span> n<span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token function">getEnergy</span><span class="token punctuation">(</span>ansx<span class="token punctuation">,</span> ansy<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SimulateAnneal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SimulateAnneal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> fixed <span class="token operator">&lt;&lt;</span> <span class="token function">setprecision</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> ansx <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span> <span class="token operator">&lt;&lt;</span> ansy <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    
    cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>开始的时候跑一遍 <code>SimulateAnneal()</code> 错了，改成了跑两遍就过了。</p>
<h2 id="P2210-Haywire"><a href="#P2210-Haywire" class="headerlink" title="P2210 Haywire"></a><a href="https://www.luogu.com.cn/problem/P2210">P2210 Haywire</a></h2><p>我们对于答案的最优排列做模拟退火，本题的能量计算就是对于一个排列的答案。</p>
<p>随机的时候就没有能用温度来控制变化范围的需要，我们随机两个点 $x,y$，交换 $now_x,now_y$ 作为新一轮的排列。</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">double</span> lf<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> fri<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> ans<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span> res<span class="token punctuation">;</span>

mt19937 <span class="token function">engine</span><span class="token punctuation">(</span>chrono<span class="token operator">::</span>steady_clock<span class="token operator">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">time_since_epoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">Rand</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    uniform_int_distribution<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dist</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">dist</span><span class="token punctuation">(</span>engine<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">getEnergy</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sum <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> p<span class="token punctuation">[</span>fri<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">></span> sum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res <span class="token operator">=</span> sum<span class="token punctuation">;</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> p<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">SimulateAnneal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    lf t0 <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">,</span> tk <span class="token operator">=</span> <span class="token number">1e-8</span><span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token number">0.999</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> now<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>now<span class="token punctuation">,</span> ans<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>t0 <span class="token operator">></span> tk<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>nxt<span class="token punctuation">,</span> now<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>nxt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">do</span> <span class="token punctuation">{</span>
            x <span class="token operator">=</span> <span class="token function">Rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token function">Rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">swap</span><span class="token punctuation">(</span>nxt<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">double</span> delta <span class="token operator">=</span> <span class="token function">getEnergy</span><span class="token punctuation">(</span>nxt<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">getEnergy</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>delta <span class="token operator">/</span> t0<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token punctuation">(</span>lf<span class="token punctuation">)</span><span class="token function">Rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1e4</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1e4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">memcpy</span><span class="token punctuation">(</span>now<span class="token punctuation">,</span> nxt<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        t0 <span class="token operator">*</span><span class="token operator">=</span> d<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> T <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> T<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">random_shuffle</span><span class="token punctuation">(</span>now <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> now <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">getEnergy</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cin <span class="token operator">>></span> fri<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">>></span> fri<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>></span> fri<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    res <span class="token operator">=</span> <span class="token function">getEnergy</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SimulateAnneal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SimulateAnneal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    
    cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P3878-TJOI2010-分金币"><a href="#P3878-TJOI2010-分金币" class="headerlink" title="P3878 [TJOI2010]分金币"></a><a href="https://www.luogu.com.cn/problem/P3878">P3878 [TJOI2010]分金币</a></h2><p>首先将前 $\dfrac{n}{2}$ 个分为一组，剩下 $(n-\dfrac{n}{2})$ 个为一组。</p>
<p>每次在两组间随机挑选一对换一下跑模拟退火。</p>
<p>思路十分简单，但参数的调整十分困难。</p>
<p>由于本题是多测，所以不好控制每个询问的时间，直接对于每组询问跑了 $450$ 遍。</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">double</span> lf<span class="token punctuation">;</span>

<span class="token keyword">int</span> T<span class="token punctuation">,</span> n<span class="token punctuation">;</span>
ll a<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
ll seq<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
ll ans <span class="token operator">=</span> <span class="token number">1e18</span><span class="token punctuation">;</span>

mt19937 <span class="token function">engine</span><span class="token punctuation">(</span>chrono<span class="token operator">::</span>steady_clock<span class="token operator">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">time_since_epoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">Rand</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    uniform_int_distribution<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dist</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">dist</span><span class="token punctuation">(</span>engine<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">inline</span> ll <span class="token function">Abs</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> x <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 

ll <span class="token function">getEnergy</span><span class="token punctuation">(</span>ll now<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ll sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sum <span class="token operator">+</span><span class="token operator">=</span> now<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sum <span class="token operator">-</span><span class="token operator">=</span> now<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    sum <span class="token operator">=</span> <span class="token function">Abs</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ans <span class="token operator">></span> sum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ans <span class="token operator">=</span> sum<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">SimulateAnneal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    lf t0 <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">,</span> tk <span class="token operator">=</span> <span class="token number">1e-10</span><span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token number">0.95</span><span class="token punctuation">;</span>
    ll now<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>now<span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>t0 <span class="token operator">></span> tk<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token function">Rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token function">Rand</span><span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>nxt<span class="token punctuation">,</span> now<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>nxt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">swap</span><span class="token punctuation">(</span>nxt<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ll delta <span class="token operator">=</span> <span class="token function">getEnergy</span><span class="token punctuation">(</span>nxt<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">getEnergy</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>delta <span class="token operator">/</span> t0<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token punctuation">(</span>lf<span class="token punctuation">)</span><span class="token function">Rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1e4</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1e4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">memcpy</span><span class="token punctuation">(</span>now<span class="token punctuation">,</span> nxt<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        t0 <span class="token operator">*</span><span class="token operator">=</span> d<span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    cin <span class="token operator">>></span> T<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cin <span class="token operator">>></span> n<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span> 
        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span>
        ans <span class="token operator">=</span> <span class="token function">getEnergy</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> test <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>test <span class="token operator">&lt;=</span> <span class="token number">450</span><span class="token punctuation">;</span>test<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">random_shuffle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">SimulateAnneal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P7962-NOIP2021-方差"><a href="#P7962-NOIP2021-方差" class="headerlink" title="P7962 [NOIP2021] 方差"></a><a href="https://www.luogu.com.cn/problem/P7962">P7962 [NOIP2021] 方差</a></h2><p>这道题就是我想在 $\text{NOIP}$ 前学模拟退火的原因，基于一个正常的考场情况，我们肯定是希望在 $1h$ 内拿到这题的一个比较高的分数然后花时间冲 $\text{T4}$ 暴力，至于使用模拟退火通过那大可不必，因为：</p>
<ul>
<li>在数据稍微加强一些的情况下，模拟退火是大概率过不去后面的点的。</li>
<li><a href="https://www.luogu.com.cn/blog/_post/394190">这篇题解</a>所提到的模拟退火正解已经用到了此题<strong>几乎全部的性质</strong>，那么我相信了解了所有性质后会更倾向于写<strong>正确性有保证的</strong>动态规划。</li>
</ul>
<p>所以最后的程序十分简单：观察出交换差分的性质后，随机找两个位置交换跑模拟退火，洛谷上可以得 $72$ 分，相比于观察差分单谷的性质，这个做法会更暴力无脑一些，适合一些一般同学性价比较高的做法。</p>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">double</span> lf<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">405</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> D<span class="token punctuation">[</span><span class="token number">405</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
ll ans<span class="token punctuation">;</span>

mt19937 <span class="token function">engine</span><span class="token punctuation">(</span>chrono<span class="token operator">::</span>steady_clock<span class="token operator">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">time_since_epoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">Rand</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    uniform_int_distribution<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dist</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">dist</span><span class="token punctuation">(</span>engine<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">getEnergy</span><span class="token punctuation">(</span><span class="token keyword">int</span> now<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ll res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sum <span class="token operator">+</span><span class="token operator">=</span> now<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        res <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1ll</span> <span class="token operator">*</span> n <span class="token operator">*</span> sum <span class="token operator">*</span> sum<span class="token punctuation">;</span>
        s <span class="token operator">+</span><span class="token operator">=</span> sum<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    res <span class="token operator">-</span><span class="token operator">=</span> s <span class="token operator">*</span> s<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ans <span class="token operator">></span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ans <span class="token operator">=</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">SimulateAnneal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    lf t0 <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">,</span> tk <span class="token operator">=</span> <span class="token number">1e-8</span><span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token number">0.99</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> now<span class="token punctuation">[</span><span class="token number">405</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span><span class="token number">405</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>now<span class="token punctuation">,</span> D<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>t0 <span class="token operator">></span> tk<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">do</span> <span class="token punctuation">{</span>
            x <span class="token operator">=</span> <span class="token function">Rand</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token function">Rand</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>nxt<span class="token punctuation">,</span> now<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>nxt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">swap</span><span class="token punctuation">(</span>nxt<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        lf delta <span class="token operator">=</span> <span class="token function">getEnergy</span><span class="token punctuation">(</span>nxt<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">getEnergy</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>delta <span class="token operator">/</span> t0<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token punctuation">(</span>lf<span class="token punctuation">)</span><span class="token function">Rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1e4</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1e4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">memcpy</span><span class="token punctuation">(</span>now<span class="token punctuation">,</span> nxt<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        t0 <span class="token operator">*</span><span class="token operator">=</span> d<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        D<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ans <span class="token operator">=</span> <span class="token function">getEnergy</span><span class="token punctuation">(</span>D<span class="token punctuation">)</span><span class="token punctuation">;</span>
    lf TimeLimit <span class="token operator">=</span> <span class="token number">0.96</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>lf<span class="token punctuation">)</span><span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> CLOCKS_PER_SEC <span class="token operator">&lt;</span> TimeLimit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">SimulateAnneal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    
    
    cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>模拟退火终究是乱搞，在赛时争取高分时可以视情况使用，但在算法学习中不建议乱搞，所以大概率不会再往里加题，除非有什么模拟退火的优化技巧或者场上有用模拟退火拿高分的题目会更新到这里。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title>点分治/动态点分治/树分治</title>
    <url>/2022/05/25/%E7%82%B9%E5%88%86%E6%B2%BB-%E5%8A%A8%E6%80%81%E7%82%B9%E5%88%86%E6%B2%BB-%E6%A0%91%E5%88%86%E6%B2%BB/</url>
    <content><![CDATA[<h1 id="点分治"><a href="#点分治" class="headerlink" title="点分治"></a>点分治</h1><p>点分治，是一种基于树上的分治算法。</p>
<p>对于一棵树的贡献，拆成如下两部分：</p>
<ul>
<li>各个子树的贡献</li>
<li>经过根节点路径的贡献</li>
</ul>
<p>基于此，每次都选树的重心计算，由重心性质，最多递归 $O(\log n)$ 次即可到达叶子，则总共遍历节点的数量不超过 $O(n\log n)$，再套用一些数据结构解决路径的贡献，可以将复杂度做到 polylog。</p>
<p>我们基于一道例题来了解点分治的过程。</p>
<h2 id="例题：P4149-IOI2011-Race"><a href="#例题：P4149-IOI2011-Race" class="headerlink" title="例题：P4149 [IOI2011]Race"></a>例题：<a href="https://www.luogu.com.cn/problem/P4149">P4149 [IOI2011]Race</a></h2><p>给定一棵树，求一条路径，边权和为 $k$，且边的数量最少。</p>
<p>$n\le 2\times10^5,k\le 10^6$</p>
<p>我们构造一组样例，来帮助理解点分治的过程。</p>
<p><img src="https://s2.loli.net/2022/05/31/ljygNWY2UF1csOw.png" alt="点分治-动态点分治-树分治-01.png"></p>
<p>其中 $k&#x3D;6$。</p>
<p>首先我们找到原树的重心，不难发现是 $2$。</p>
<p>那么我们以 $2$ 为根节点，先去求经过 $2$ 的路径为 $k$ 的最小值，一共有如下路径：</p>
<ol>
<li>$4-2-5$，边数为 $2$</li>
<li>$1-2-5-8-9$，边数为 $4$</li>
</ol>
<p>然后我们删除掉 $2$ 号点，每一棵子树都是一个子问题：</p>
<p><img src="https://s2.loli.net/2022/05/31/8AZMVDjHn6EmpiY.png" alt="点分治-动态点分治-树分治-02.png"></p>
<p>对于 $①③⑥$ 子树，$3$ 号是这棵树的重心，计算经过 $3$ 号点的且边权和为 $k$ 的路径：</p>
<ol>
<li>$1-3-6$，边数为 $2$</li>
</ol>
<p>然后删除 $3$ 号点，将其分为两个 $1$ 个节点形成的树，没有贡献，故不再叙述。</p>
<p>对于这个 $⑤⑦⑧⑨$ 子树，选 $5$ 作为树的重心，计算经过 $5$ 号点的且边权和为 $k$ 的路径：</p>
<ol>
<li>$7-5-8$，边数为 $2$</li>
</ol>
<p>然后删除 $5$ 号点，分开后的 $2$ 棵子树都没有边权和为 $k$ 的路径，不再叙述。</p>
<p>对于 $④$ 子树，没有贡献。</p>
<p>综上，答案为 $2$。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>理解了过程，接下来详细地说一说代码实现和一些细节。</p>
<h3 id="1-初始化-建树"><a href="#1-初始化-建树" class="headerlink" title="1. 初始化-建树"></a>1. 初始化-建树</h3><p>这里指的建树只是将输入的边存储起来。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">200005</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> top<span class="token punctuation">,</span> head<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> Edge <span class="token punctuation">{</span>
    <span class="token keyword">int</span> v<span class="token punctuation">;</span>
    <span class="token keyword">int</span> w<span class="token punctuation">;</span>
    <span class="token keyword">int</span> next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>Edge<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Edge<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span>v <span class="token operator">=</span> v<span class="token punctuation">;</span>
    Edge<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">=</span> w<span class="token punctuation">;</span>
    Edge<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>
    head<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> top<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">,</span> <span class="token operator">&amp;</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>
    u<span class="token operator">++</span><span class="token punctuation">,</span> v<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token function">insert</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="2-寻找重心"><a href="#2-寻找重心" class="headerlink" title="2. 寻找重心"></a>2. 寻找重心</h3><p>我们要对于当前的树找到重心，为了不跳到其它的子树上，用 $vis$ 数组记录已经使用的节点。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> node<span class="token punctuation">,</span> res<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// sz: 子树大小（用于计算重心）</span>

<span class="token keyword">void</span> <span class="token function">dfs_node</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    sz<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ma <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> v <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">||</span> v <span class="token operator">==</span> fa<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>	
        <span class="token function">dfs_node</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> v<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>
        sz<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> sz<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>
        ma <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ma<span class="token punctuation">,</span> sz<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ma <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ma<span class="token punctuation">,</span> m <span class="token operator">-</span> sz<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">></span> ma<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res <span class="token operator">=</span> ma<span class="token punctuation">,</span> node <span class="token operator">=</span> u<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="3-计算以当前根节点的贡献"><a href="#3-计算以当前根节点的贡献" class="headerlink" title="3. 计算以当前根节点的贡献"></a>3. 计算以当前根节点的贡献</h3><p>注意到 $k\le 10^6$，也就是大于 $10^6$ 时一定没有贡献，我们用桶来记录某个长度的路径的最少边数，对于当前的子树，考虑之前加进桶里的答案与当前子树的合并，具体见代码。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// ww: 新树的子树大小（之前的 sz 用于求出重心，选出重心后，子树的大小会发生变化，我们要用新的子树大小求子树的重心）</span>
<span class="token comment" spellcheck="true">// dis: 重心到此节点的距离</span>
<span class="token comment" spellcheck="true">// dep: 此节点相对重心的深度，用于计算路径长度</span>
<span class="token comment" spellcheck="true">// bucket: 用于存放最优解的桶</span>

<span class="token keyword">void</span> <span class="token function">dfs_sz</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">,</span> <span class="token keyword">int</span> lstw<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ww<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>fa<span class="token punctuation">]</span> <span class="token operator">+</span> lstw<span class="token punctuation">,</span> dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> dep<span class="token punctuation">[</span>fa<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> v <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">,</span> w <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">||</span> v <span class="token operator">==</span> fa<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token function">dfs_sz</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ww<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> ww<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>k <span class="token operator">-</span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">!=</span> Inf<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span>ans<span class="token punctuation">,</span> bucket<span class="token punctuation">[</span>k <span class="token operator">-</span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        seq1<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> seq2<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将本棵子树的信息存储，一会加入到桶数组中</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="4-点分治"><a href="#4-点分治" class="headerlink" title="4. 点分治"></a>4. 点分治</h3><p>将上述代码加入至点分治的过程中，并继续递归，不要忘了清空数组。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// m: 当且子树的大小</span>
    res <span class="token operator">=</span> Inf<span class="token punctuation">;</span>
    <span class="token function">dfs_node</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> u<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    u <span class="token operator">=</span> node<span class="token punctuation">,</span> vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    bucket<span class="token punctuation">[</span>dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> lst <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> v <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">,</span> w <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token function">dfs_sz</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ww<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> ww<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> lst <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> cnt<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 将刚刚遍历的子树的信息放入桶中</span>
            bucket<span class="token punctuation">[</span>seq1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>seq1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> seq2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        lst <span class="token operator">=</span> cnt<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> cnt<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 按需清空 bucket</span>
        bucket<span class="token punctuation">[</span>seq1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> Inf<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 递归求解</span>
        <span class="token keyword">int</span> v <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>ww<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>以上就是本题的绝大部分的内容，请读者结合代码理解。</p>
<h1 id="动态点分治"><a href="#动态点分治" class="headerlink" title="动态点分治"></a>动态点分治</h1><p>动态点分治，就是在询问的基础上增加修改，如果修改一次，重新做一次点分治，复杂度太高，有没有一些快速维护的办法？</p>
<p>我们来思考点分治的过程：对于一个子树，找到其中心，其它点都对此点尝试去做贡献。</p>
<p>基于此点，我们引入一个概念。</p>
<h2 id="点分树"><a href="#点分树" class="headerlink" title="点分树"></a>点分树</h2><p>每次点分治的过程中，将当前子树的重心与上一次子树的重心连边所形成的图称为点分树。</p>
<p>点分树的一个重要性质：是一个高度不超过 $\log n$ 的树，所有点的总深度不超过 $n\times \log n&#x3D;n\log n$。</p>
<p>但由于这样会改变树的形态，所以只能维护一些<strong>不需要树的具体形态的问题</strong>。</p>
<p>所以动态点分治的过程大概就是：</p>
<ol>
<li>跑一遍点分治，记录点分树，一些信息要在原有的树上进行计算</li>
<li>修改时在点分树上暴力跳祖先，并修改答案</li>
<li>询问直接输答案</li>
</ol>
<h1 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h1><h2 id="P3806【模板】点分治1"><a href="#P3806【模板】点分治1" class="headerlink" title="P3806【模板】点分治1"></a><a href="https://www.luogu.com.cn/problem/P3806">P3806【模板】点分治1</a></h2><p>板子题，用来练练手，将路径的权值开桶，可以将复杂度做到 $O(nm\log n)$。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">10005</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> Inf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> top<span class="token punctuation">,</span> head<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> sz<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> ww<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> dis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> q<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> seq<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">;</span>
<span class="token keyword">bool</span> bucket<span class="token punctuation">[</span><span class="token number">10000005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> Edge <span class="token punctuation">{</span>
    <span class="token keyword">int</span> v<span class="token punctuation">;</span>
    <span class="token keyword">int</span> w<span class="token punctuation">;</span>
    <span class="token keyword">int</span> next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>Edge<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Edge<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span>v <span class="token operator">=</span> v<span class="token punctuation">;</span>
    Edge<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">=</span> w<span class="token punctuation">;</span>
    Edge<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>
    head<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> top<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> node<span class="token punctuation">,</span> res<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">dfs_sz</span><span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">,</span> <span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">,</span> <span class="token keyword">int</span> lstw<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ww<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>fa<span class="token punctuation">]</span> <span class="token operator">+</span> lstw<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> v <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">,</span> w <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">||</span> v <span class="token operator">==</span> fa<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token function">dfs_sz</span><span class="token punctuation">(</span>rt<span class="token punctuation">,</span> v<span class="token punctuation">,</span> u<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ww<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> ww<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">10000000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> bucket<span class="token punctuation">[</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token operator">++</span>cnt<span class="token punctuation">,</span> seq<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">void</span> <span class="token function">dfs_node</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    sz<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ma <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> v <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">||</span> v <span class="token operator">==</span> fa<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token function">dfs_node</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> v<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>
        sz<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> sz<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>
        ma <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ma<span class="token punctuation">,</span> sz<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ma <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ma<span class="token punctuation">,</span> m <span class="token operator">-</span> sz<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ma <span class="token operator">&lt;</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res <span class="token operator">=</span> ma<span class="token punctuation">,</span> node <span class="token operator">=</span> u<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res <span class="token operator">=</span> Inf<span class="token punctuation">;</span>
    <span class="token function">dfs_node</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> u<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    u <span class="token operator">=</span> node<span class="token punctuation">,</span> vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    bucket<span class="token punctuation">[</span>dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> lst <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> v <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">,</span> w <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token function">dfs_sz</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> v<span class="token punctuation">,</span> u<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ww<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> ww<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> lst <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> cnt<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            bucket<span class="token punctuation">[</span>seq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        lst <span class="token operator">=</span> cnt<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> cnt<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        bucket<span class="token punctuation">[</span>seq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    bucket<span class="token punctuation">[</span>dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> v <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>ww<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">,</span> <span class="token operator">&amp;</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">insert</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"AYE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"NAY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P2634-国家集训队-聪聪可可"><a href="#P2634-国家集训队-聪聪可可" class="headerlink" title="P2634 [国家集训队]聪聪可可"></a><a href="https://www.luogu.com.cn/problem/P2634">P2634 [国家集训队]聪聪可可</a></h2><p>继续练手，完全没难度。</p>
<h2 id="P2056-ZJOI2007-捉迷藏"><a href="#P2056-ZJOI2007-捉迷藏" class="headerlink" title="P2056 [ZJOI2007] 捉迷藏"></a><a href="https://www.luogu.com.cn/problem/P2056">P2056 [ZJOI2007] 捉迷藏</a></h2><p>这题还是有点意思，一道动态点分治，只需考虑修改时去如何维护。</p>
<p>考虑点分治时是如何去计算答案，对于一个以 $u$ 为根的子树，实际上就是找到 $u$ 的子树中最深的根节点和之前 $u$ 的其它子树的关节点合并。</p>
<p>所与对于一个以 $u$，我们要干两件事情：</p>
<ol>
<li>找到两个最深的关节点，更新全局答案</li>
<li>上传一个此棵子树最深的关节点，方便父节点的计算</li>
</ol>
<p>那么我们可以用堆维护这些信息。一个记录当前节点 $u$ 的每个子树内的<strong>一个最深的关节点</strong>，再用一个堆记录当前 $u$ 节点中<strong>所有关节点到 $u$ 节点的父亲 $fa$</strong> 的距离。然后再用堆去进行删除标记。</p>
<p>注意一点：距离信息一定要在原树上统计！距离信息一定要在原树上统计！距离信息一定要在原树上统计！</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">100005</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> Inf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res <span class="token operator">=</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>ch <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">readop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'G'</span> <span class="token operator">||</span> ch <span class="token operator">==</span> <span class="token string">'C'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'G'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        x <span class="token operator">=</span> <span class="token operator">-</span>x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">write</span><span class="token punctuation">(</span>x <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">putchar</span><span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> q<span class="token punctuation">,</span> top<span class="token punctuation">,</span> head<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> p<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> sz<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> ww<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> cur<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> dist<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dep<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> state<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> Edge <span class="token punctuation">{</span>
    <span class="token keyword">int</span> v<span class="token punctuation">;</span>
    <span class="token keyword">int</span> next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>Edge<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Edge<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span>v <span class="token operator">=</span> v<span class="token punctuation">;</span>
    Edge<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>
    head<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> top<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">struct</span> Heap <span class="token punctuation">{</span>
    priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">,</span> del<span class="token punctuation">;</span>
    
    <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">fima</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>del<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> del<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> del<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token operator">-</span>Inf<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">sema</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token function">fima</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token operator">-</span>Inf<span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span>
        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token function">fima</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> y<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">pu</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        del<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>globe<span class="token punctuation">,</span> fadis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> madis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> res<span class="token punctuation">,</span> node<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">dfs_node</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    sz<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ma <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> v <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">||</span> v <span class="token operator">==</span> fa<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token function">dfs_node</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> v<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>
        sz<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> sz<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>
        ma <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ma<span class="token punctuation">,</span> sz<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ma <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ma<span class="token punctuation">,</span> m <span class="token operator">-</span> sz<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">></span> ma<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res <span class="token operator">=</span> ma<span class="token punctuation">,</span> node <span class="token operator">=</span> u<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">dfs_sz</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ww<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> v <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">||</span> v <span class="token operator">==</span> fa<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token function">dfs_sz</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ww<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> ww<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> seq<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> st<span class="token punctuation">,</span> <span class="token keyword">int</span> nowdep<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>
    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">,</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> u <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        seq<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span> 
        <span class="token keyword">int</span> fa <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dist<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>nowdep<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>fa<span class="token punctuation">]</span><span class="token punctuation">[</span>nowdep<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> v <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">||</span> v <span class="token operator">==</span> fa<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">dfs_build</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">,</span> <span class="token keyword">int</span> nowdep<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">bfs</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> nowdep<span class="token punctuation">)</span><span class="token punctuation">;</span>
    res <span class="token operator">=</span> Inf<span class="token punctuation">;</span>
    <span class="token function">dfs_node</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> u<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    u <span class="token operator">=</span> node<span class="token punctuation">,</span> vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> cnt<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        fadis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pu</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>seq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowdep<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    p<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> fa<span class="token punctuation">;</span>
    dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> dep<span class="token punctuation">[</span>fa<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    
    
    
    <span class="token function">dfs_sz</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> v <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">||</span> v <span class="token operator">==</span> fa<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token function">dfs_build</span><span class="token punctuation">(</span>ww<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">,</span> u<span class="token punctuation">,</span> nowdep <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">if</span><span class="token punctuation">(</span>fa <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        madis<span class="token punctuation">[</span>fa<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pu</span><span class="token punctuation">(</span>fadis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fima</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    madis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pu</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cur<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> madis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fima</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> madis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    globe<span class="token punctuation">.</span><span class="token function">pu</span><span class="token punctuation">(</span>cur<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    n <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> u <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">insert</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">dfs_build</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> tot <span class="token operator">=</span> n<span class="token punctuation">;</span>
    q <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> op <span class="token operator">=</span> <span class="token function">readop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>	<span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>tot <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>tot <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token function">write</span><span class="token punctuation">(</span>globe<span class="token punctuation">.</span><span class="token function">fima</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            x <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>state<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> madis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pu</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tot<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> madis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tot<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> u <span class="token operator">=</span> x<span class="token punctuation">,</span> res<span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                res <span class="token operator">=</span> madis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fima</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> madis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">!=</span> cur<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    globe<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>cur<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    cur<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">;</span>
                    globe<span class="token punctuation">.</span><span class="token function">pu</span><span class="token punctuation">(</span>cur<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
                res <span class="token operator">=</span> fadis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fima</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>state<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> fadis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pu</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span> fadis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> res0 <span class="token operator">=</span> fadis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fima</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">!=</span> res0<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    madis<span class="token punctuation">[</span>p<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    madis<span class="token punctuation">[</span>p<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pu</span><span class="token punctuation">(</span>res0<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                u <span class="token operator">=</span> p<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            state<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P4292-WC2010-重建计划"><a href="#P4292-WC2010-重建计划" class="headerlink" title="P4292 [WC2010]重建计划"></a><a href="https://www.luogu.com.cn/problem/P4292">P4292 [WC2010]重建计划</a></h2><p>这题是真的恶心，可以合理质疑现在大部分题解都存在一定的卡精问题。</p>
<p>首先看到平均值最大，不难先想到二分一手，将每条边都减去 $mid$，然后只需选出 $1$ 条符合长度要求的路径，边权和不小于 $0$ 即可。</p>
<p>对于当前正在解决的树，考虑记 $bucket_i$ 表示之前子树中相对深度节点为 $i$ 的最大边权和，$tmp_i$ 表示当前子树中相对深度节点为 $i$ 的最大边权和。</p>
<p>特别地，记 $bucket_0&#x3D;0$。</p>
<p>在将 $tmp$ 合并入 $bucket$ 前，我们要先判断当前的两部分是否能拼成大于 $0$ 的路径。</p>
<p>我们这里记 $u$ 子树的最深深度为 $z_u$，如果不用 $z_u$ 复杂度不对，当 $bucket$ 的深度取 $i$ 时，$tmp$ 的选取范围为 $[L-i,R-i]$，注意到当 $i$ 减小时，$tmp$ 的选取向右滑动，这样我们倒序枚举 $i$，用单调队列维护最大值。</p>
<p>如果从 $R-1$ 开始，复杂度就炸了，所以具体实现时，我们可以分为两部分。</p>
<ol>
<li>当 $i\in [\max(R-z_u, 0),R-1]$，此时 $R-i\in[1,z_u]$，但 $i\in [0,z_u]$ 不一定成立。此时我们只需尝试插入队列，排除不合法的队头，并判断是否可以更新。</li>
<li>当 $i\in[0,min(z_u, max(R-z_u,0)-1)]$ 时，此时 $R-i\in[1,z_u]$ 不一定成立，但 $i\in[0,z_u]$ 一定成立，这时我们只需排除不合法的队头，并判断是否可以更新。</li>
</ol>
<p>至于其它的部分，那都压根没用，这样复杂度就严格限制在了 $O(\sum z)&#x3D;O(n\log n)$。</p>
<p>综上，本题的复杂度为 $O(n\log^2 n)$。</p>
<p>注意要先预处理关于重心和 $z$ 的信息，否则常数太大会被卡。</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">double</span> lf<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">100005</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res <span class="token operator">=</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>ch <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> top<span class="token punctuation">,</span> head<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> L<span class="token punctuation">,</span> R<span class="token punctuation">;</span>
<span class="token keyword">int</span> sz<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> ww<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> Edge <span class="token punctuation">{</span>
    <span class="token keyword">int</span> v<span class="token punctuation">;</span>
    ll w<span class="token punctuation">;</span>
    <span class="token keyword">int</span> next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>Edge<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> ll w<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Edge<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span>v <span class="token operator">=</span> v<span class="token punctuation">;</span>
    Edge<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">=</span> w<span class="token punctuation">;</span>
    Edge<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>
    head<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> top<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> node<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">,</span> res<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">dfs_node</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">,</span> <span class="token keyword">int</span> rt<span class="token punctuation">,</span> <span class="token keyword">int</span> g<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    sz<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ma <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> v <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">||</span> v <span class="token operator">==</span> fa<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token function">dfs_node</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> v<span class="token punctuation">,</span> u<span class="token punctuation">,</span> rt<span class="token punctuation">,</span> g<span class="token punctuation">)</span><span class="token punctuation">;</span>
        sz<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> sz<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>
        ma <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ma<span class="token punctuation">,</span> sz<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ma <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ma<span class="token punctuation">,</span> m <span class="token operator">-</span> sz<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">></span> ma<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res <span class="token operator">=</span> ma<span class="token punctuation">,</span> node<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">[</span>g<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> flag<span class="token punctuation">;</span>
ll bucket<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> tmp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll mares<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">dfs_dis</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">,</span> <span class="token keyword">int</span> dep<span class="token punctuation">,</span> ll dis<span class="token punctuation">,</span> ll k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    tmp<span class="token punctuation">[</span>dep<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span>dep<span class="token punctuation">]</span><span class="token punctuation">,</span> dis<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ll v <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">,</span> w <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">||</span> v <span class="token operator">==</span> fa<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token function">dfs_dis</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">,</span> dep <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> dis <span class="token operator">+</span> w <span class="token operator">-</span> k<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>

<span class="token keyword">int</span> q<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">,</span> t<span class="token punctuation">;</span>
<span class="token keyword">int</span> z<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">dfs_ww</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">,</span> <span class="token keyword">int</span> g<span class="token punctuation">,</span> <span class="token keyword">int</span> dep<span class="token punctuation">,</span> <span class="token keyword">int</span> rt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    z<span class="token punctuation">[</span>rt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>z<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">,</span> dep<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ww<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>g<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> v <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">||</span> v <span class="token operator">==</span> fa<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token function">dfs_ww</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">,</span> g<span class="token punctuation">,</span> dep <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> rt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ww<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>g<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> ww<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>g<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    h <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> R <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">>=</span> <span class="token function">max</span><span class="token punctuation">(</span>R <span class="token operator">-</span> z<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>h <span class="token operator">&lt;=</span> t <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">&lt;</span> L <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            h<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>h <span class="token operator">&lt;=</span> t <span class="token operator">&amp;&amp;</span> tmp<span class="token punctuation">[</span>q<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> tmp<span class="token punctuation">[</span>R <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            t<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        q<span class="token punctuation">[</span><span class="token operator">++</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> R <span class="token operator">-</span> i<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>h <span class="token operator">&lt;=</span> t <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> z<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>
            mares <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>mares<span class="token punctuation">,</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> tmp<span class="token punctuation">[</span>q<span class="token punctuation">[</span>h<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> tmp<span class="token punctuation">[</span>q<span class="token punctuation">[</span>h<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>R <span class="token operator">-</span> z<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> z<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>h <span class="token operator">&lt;=</span> t <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">&lt;</span> L <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            h<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>h <span class="token operator">&lt;=</span> t <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> R <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            mares <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>mares<span class="token punctuation">,</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> tmp<span class="token punctuation">[</span>q<span class="token punctuation">[</span>h<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> tmp<span class="token punctuation">[</span>q<span class="token punctuation">[</span>h<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> z<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> u<span class="token punctuation">,</span> ll k<span class="token punctuation">,</span> <span class="token keyword">int</span> g<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    u <span class="token operator">=</span> node<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>g<span class="token punctuation">]</span><span class="token punctuation">;</span>
    vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> z<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1e18</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    bucket<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ll v <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">,</span> w <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> z<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            tmp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1e18</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">dfs_dis</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> w <span class="token operator">-</span> k<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">merge</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> v <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>ww<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>g<span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">,</span> k<span class="token punctuation">,</span> g <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span>ll k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">build_tree</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">,</span> <span class="token keyword">int</span> g<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res <span class="token operator">=</span> <span class="token number">1e9</span><span class="token punctuation">;</span>
    <span class="token function">dfs_node</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> u<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> u<span class="token punctuation">,</span> g<span class="token punctuation">)</span><span class="token punctuation">;</span>
    u <span class="token operator">=</span> node<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>g<span class="token punctuation">]</span><span class="token punctuation">;</span>
    vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token function">dfs_ww</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> g<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> v <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">||</span> v <span class="token operator">==</span> fa<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token function">build_tree</span><span class="token punctuation">(</span>ww<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>g<span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">,</span> u<span class="token punctuation">,</span> g <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    n <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    L <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> R <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ll u <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> w <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">insert</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w <span class="token operator">*</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">,</span> w <span class="token operator">*</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token function">build_tree</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    ll l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">1e10</span><span class="token punctuation">,</span> mid<span class="token punctuation">,</span> ans <span class="token operator">=</span> l<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>
        mares <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1e18</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> ans <span class="token operator">=</span> mid<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.3Lf\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>lf<span class="token punctuation">)</span>ans <span class="token operator">/</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>没啥要说的，有好题继续更新。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>省选</category>
        <category>NOI9级</category>
      </categories>
  </entry>
  <entry>
    <title>四边形不等式优化 dp</title>
    <url>/2022/05/17/%E5%9B%9B%E8%BE%B9%E5%BD%A2%E4%B8%8D%E7%AD%89%E5%BC%8F%E4%BC%98%E5%8C%96-dp/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title>斜率优化 dp</title>
    <url>/2022/05/09/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96-dp/</url>
    <content><![CDATA[<p>来说一说斜率优化 dp。</p>
<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>斜率优化可以优化形如 $dp_i&#x3D;dp_j+val(j,i)$ 的 <code>1d/1d</code> 转移，其中 $val(j, i)$ 仅包含只有 $i$ 的任意次任意形式，$j$ 的任意次任意形式，$i,j$ 的任意形式的<strong>一次乘积项</strong>，<strong>不一定需要满足某种单调性</strong>。</p>
<p>通过简单的移项，得到形如 $y&#x3D;k\cdot x+b$ 的形式，其中 $x,y$ 仅包含关于 $j$ 的项，$k,b$ 仅包含关于 $i$ 的项，以 $(x,y)$ 建立平面直角坐标系，发现 $dp_i$ 的最值就是以当前的 $i$ 位置的斜率 $k$ 关于若干个转移点 $p_j(x,y)$ 所截得的截距的最值。</p>
<p>说起来比较抽象，我们直接上题目。</p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="任务安排2"><a href="#任务安排2" class="headerlink" title="任务安排2"></a><a href="https://www.acwing.com/problem/content/303/">任务安排2</a></h2><p>看到这道题目后，先考虑一个朴素的转移方程。</p>
<p>考虑记 $t$ 和 $c$ 的前缀和 $sumt$ 和 $sumc$，设 $dp_{i,j}$ 表示把前 $i$ 个任务分成 $j$ 批完成的最小费用。</p>
<p>则有 </p>
<p>$dp_{i,j}&#x3D;\min\limits_{0\le k&lt;i} { dp_{k,j-1}+(S\times j+sumt_i)* (sumc_i-sumc_k) }$</p>
<p>时间复杂度 $\mathcal{O}(n^3)$，无法接受。</p>
<p>考虑为什么要设 $dp$ 的第二维，不难发现我们需要当前分的批数得出累积了多少次的启动时间来算贡献。</p>
<p>考虑到 $j$ 只对当前这一批的启动时间造成贡献，我们可以将当前这一批的启动时间同样累积到后续任务的代价中，且<strong>后续任务的总代价为定值，即</strong> $sumc_n-sumc_j$ 那么我们可以去掉第二维。</p>
<p>设 $dp_i$ 表示完成前 $i$ 个任务的最小费用。</p>
<p>$dp_i&#x3D;\min\limits_{0\le j &lt; i}{dp_j+sumt_i*(sumc_i-sumc_j)+S*(sumc_n-sumc_j)}$</p>
<p>这种思想叫做<strong>费用提前计算</strong>，目的就是直接将为定值的贡献直接累积到最后，省略无用信息，时间复杂度 $O(n^2)$。</p>
<p>复杂度已经较优了，考虑斜率优化，适当将转移方程做一些变形。</p>
<p>$$dp_i&#x3D;dp_j+sumt_i*(sumc_i-sumc_j)+S*(sumc_n-sumc_j)$$</p>
<p>$$\Rightarrow dp_i&#x3D;dp_j+sumt_i* sumc_i-sumt_i* sumc_j+S* sumc_n-S*sumc_j$$</p>
<p>$$\Rightarrow dp_j&#x3D;(S+sumt_i)*sumc_j+dp_i-sumt_i*sumc_i-S*sumc_n$$</p>
<p>这是一个一次函数 $y&#x3D;k\cdot x+b$，其中 $ y&#x3D;dp_j, x&#x3D;sumc_j, k&#x3D;S+sumt_i, b&#x3D;dp_i-sumt_i*sumc_i-S*sumc_n $，正好满足斜率优化的形式。</p>
<p>我们将每个决策 $j$ 看作平面直角坐标系的一个点 $(x,y)$，因为求 $dp_i$ 的最小值就是求截距的最小值，所以我们以斜率为 $k$ 的直线，从下往上所触碰到的第一个点，此时的截距即可得出 $dp_i$ 的最小值。</p>
<p>不难发现 $sumc_j$ 单调递增，即 $j$ 越大，它在平面直角坐标系的横坐标就越大，即插入点依次为从左到右。</p>
<p>我们去考虑相邻的三个点，在什么情况下位于中间的点能够造成贡献。</p>
<p>注：这里造成贡献的定义为，存在一个斜率为 $k$ 的直线可以截取到这个点。</p>
<p>我们考虑将第 $1$ 个点和第 $3$ 个点连线，讨论 $2$ 号点在这条线上方还是下方：</p>
<ul>
<li>$2$ 号点在直线上方</li>
<li>$2$ 号点在直线下方</li>
</ul>
<p>所以我们得出， 当 $\dfrac{y_2-y_1}{x_2-x_1}&lt; k&lt; \dfrac{y_3-y_2}{x_3-x_2}$ 且 $2$ 号点在直线下方才有可能作出贡献，以斜率作为比较就是 $\dfrac{y_2-y_1}{x_2-x_1}&lt; \dfrac{y_3-y_2}{x_3-x_2}$，即维护一个<strong>斜率单调递增的下凸壳</strong>，这是一个十分有用的条件！加上此题的 $sumt_i$ 单调递增，我们也有了 $k$ 为单调递增的条件，那么我们只需维护一个单调队列，在取出队头两个点所形成的直线的斜率，如果已经小于等于 $k$，我们<strong>一定不会以队头作为最优决策且以后也不会</strong>，弹出队头并继续更新。对于当前进入队尾的决策点 $j$，如果斜率小于等于当前队尾两个点的斜率，那么就一直弹出，最后插入决策 $j$。</p>
<p>应该还不是太难以理解吧。</p>
<h2 id="任务安排3"><a href="#任务安排3" class="headerlink" title="任务安排3"></a><a href="https://www.acwing.com/problem/content/304/">任务安排3</a></h2><p>与上一题不同，$t$ 可以为负数，即 $sumt$ <strong>不一定单调递增</strong>，那么 $k$ 就不一定单调递增。</p>
<p>考虑 $k$ 单调递增对我们呢带来什么好处，就是可以让我们及时退出单调队列队头的决策点，那么如果没有这个条件，我们就可以不退这些决策点，维护当前的所有的 $(1\sim i-1)$ 下凸壳决策点集，然后以 $k$ 为斜率在里面二分取得最优决策点 $j$ 即可。</p>
<h2 id="CF311B-Cats-Transport"><a href="#CF311B-Cats-Transport" class="headerlink" title="CF311B Cats Transport"></a><a href="https://codeforces.com/problemset/problem/311/B">CF311B Cats Transport</a></h2><p>也是道斜率优化的裸题。	</p>
<p>考虑对每一只猫求一个启动时间 $t_i$，即只要铲屎官在 $t_i$ 时刻及以前出发，就可以接到这只猫。（原题的 $t$ 在这就没用处了）</p>
<p>将 $t$ 排序后得知，每位铲屎官所取得的猫一定是连续的一段，记 $sumt$ 为 $t$ 的前缀和。</p>
<p>设 $dp_{i,j}$ 表示前 $i$ 只猫使用 $j$ 位铲屎官的最小代价。</p>
<p>则有 $dp_{i,j}&#x3D;\min\limits_{0\le k&lt;i}{dp_{k,j-1}+(i-k)*t_i-(sumt_i-sumt_k)}$</p>
<p>简单变形后得到：$dp_{k,j-1}+sumt_k&#x3D;t_i*k+dp_i-t_i*i+sumt_i$，符合斜率优化的形式。</p>
<p>不难发现此题的斜率 $k$ 随着 $i$ 增加仍然<strong>单调不减</strong>，且横坐标 $x$ 也为<strong>单调递增</strong>，故还可沿用任务安排2中的做法。</p>
<p>时间复杂度 $\mathcal{O}(n+mp)$。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>
 
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">100005</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxp <span class="token operator">=</span> <span class="token number">105</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ll Lnf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f3f3f3f3fll</span><span class="token punctuation">;</span>
 
<span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res <span class="token operator">=</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>ch <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
ll n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> p<span class="token punctuation">;</span>
ll sumd<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll q<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> head<span class="token punctuation">,</span> tail<span class="token punctuation">;</span>
ll sumt<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxp<span class="token punctuation">]</span><span class="token punctuation">;</span>
 
<span class="token keyword">int</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> k<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
ll <span class="token function">y</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> sumt<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    n <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sumd<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sumd<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> d<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x <span class="token operator">-</span> sumd<span class="token punctuation">[</span>h<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> t <span class="token operator">+</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sumt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sumt<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> p<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        head <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> tail <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        q<span class="token punctuation">[</span><span class="token operator">++</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">&lt;</span> tail <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">y</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>head <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">y</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">x</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>head <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">x</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> head<span class="token operator">++</span><span class="token punctuation">;</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1ll</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">(</span>sumt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> sumt<span class="token punctuation">[</span>q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">y</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>=</span> Lnf<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">&lt;</span> tail <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">y</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">y</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">x</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">x</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tail <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token function">y</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">y</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tail <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">x</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">x</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> tail<span class="token operator">--</span><span class="token punctuation">;</span>
            q<span class="token punctuation">[</span><span class="token operator">++</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P5017-NOIP2018-普及组-摆渡车"><a href="#P5017-NOIP2018-普及组-摆渡车" class="headerlink" title="P5017 [NOIP2018 普及组] 摆渡车"></a><a href="https://www.luogu.com.cn/problem/P5017">P5017 [NOIP2018 普及组] 摆渡车</a></h2><p>这道题还是过于经典了，今天我们来阐述 $\mathcal{O}(T+m)$ 的斜率优化做法。这里 $T$ 是 $t_i$ 的最大值。</p>
<p>开始一直在想严格 $\mathcal{O}(n)$ 的做法，但斜率优化好像不行，就改设另外的 $dp$ 状态了。</p>
<p>记 $sum_i$ 表示来的时刻在 $[1,i]$ 的有多少人，$sumt_i$ 表示来的时刻在 $[1,i]$ 的时刻之和。</p>
<p>不难想到每次摆渡车所接的人肯定是按时刻排序后连续的一段人，设 $dp_i$ 表示接完 $[1,i]$ 时刻来的人的最小等待时间。</p>
<p>则有方程： $dp_i&#x3D;\min\limits_{0\le j\le \max(i-m,0)}{dp_j+(sum_i-sum_j)* i - (sumt_i-sumt_j)}$</p>
<p>当 $i-m&lt;0$ 时，$dp_i&#x3D;sum_i*i-sumt_i$。</p>
<p>我们继续变换式子，得到：$dp_j+sumt_j&#x3D;i*sum_j+dp_i-sum_i*i+sumt_i$</p>
<p>观察斜率和横坐标仍然单调递增，故继续使用任务安排2的做法即可。</p>
<h2 id="P3628-APIO2010-特别行动队"><a href="#P3628-APIO2010-特别行动队" class="headerlink" title="P3628 [APIO2010]特别行动队"></a><a href="https://www.luogu.com.cn/problem/P3628">P3628 [APIO2010]特别行动队</a></h2><p>这题已经说了取连续的一段人算代价了，故还可设 $dp_i$ 为前 $i$ 个人的最大战斗力。</p>
<p>令 $sumx$ 为 $x$ 的前缀和。</p>
<p>转移方程： $dp_i&#x3D;\min\limits_{0\le j&lt;i}{dp_j+a*(sumx_i-sumx_j)^2+b*(sumx_i-sumx_j)+c}$</p>
<p>提供 $i,j$ 的乘积项，有且仅在 $a*(sumx_i-sumx_j)^2$ 中提供 $-2a\cdot sumx_i\times sumx_j$，那么此题中的 $k&#x3D;-2a\cdot sumx_i,x&#x3D;sumx_j$。</p>
<p>（现在你也应该可以发现，当 $dp$ 方程转化成斜率优化的形式后，只有 $k,x$ 还在起作用）</p>
<p>与前几道题不同的是，本题的 $x$ 为单调递增，但 $k$ 却为<strong>单调递减且为负值</strong>，会不会对我们维护的东西产生影响？</p>
<p>这里我们不在举例解释，最终我们要维护一个<strong>斜率单调递减的上凸壳</strong>，感兴趣的读者自行画图理解。</p>
<p>在判掉队头的斜率时，也同样要变号，即：如果队头的两个决策点组成的直线大于等于 $k$，我们就不会以它为最优决策，弹掉队头然后继续比较。</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1000005</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> f <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            f <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res <span class="token operator">=</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>ch <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res <span class="token operator">*</span> f<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll n<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>
ll q<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> head<span class="token punctuation">,</span> tail<span class="token punctuation">;</span>
ll sumx<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

ll <span class="token function">x</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> sumx<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">y</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> a <span class="token operator">*</span> sumx<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> sumx<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> b <span class="token operator">*</span> sumx<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    n <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> f <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sumx<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sumx<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> f<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token operator">~</span><span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    head <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> tail <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    q<span class="token punctuation">[</span><span class="token operator">++</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">&lt;</span> tail <span class="token operator">&amp;&amp;</span> <span class="token function">y</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>head <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">y</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">2</span> <span class="token operator">*</span> a <span class="token operator">*</span> sumx<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">x</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>head <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">x</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> head<span class="token operator">++</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> a <span class="token operator">*</span> sumx<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> sumx<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> a <span class="token operator">*</span> sumx<span class="token punctuation">[</span>q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">*</span> sumx<span class="token punctuation">[</span>q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> a <span class="token operator">*</span> sumx<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> sumx<span class="token punctuation">[</span>q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> b <span class="token operator">*</span> sumx<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> b <span class="token operator">*</span> sumx<span class="token punctuation">[</span>q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> c<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">&lt;</span> tail <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">y</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">y</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">x</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">x</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tail <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token punctuation">(</span><span class="token function">y</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">y</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tail <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">x</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">x</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> tail<span class="token operator">--</span><span class="token punctuation">;</span>
        q<span class="token punctuation">[</span><span class="token operator">++</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P3195-HNOI2008-玩具装箱"><a href="#P3195-HNOI2008-玩具装箱" class="headerlink" title="P3195 [HNOI2008]玩具装箱"></a><a href="https://www.luogu.com.cn/problem/P3195">P3195 [HNOI2008]玩具装箱</a></h2><p>记 $sumc$ 为 $c$ 的前缀和。</p>
<p>设 $dp_i$ 表示前 $i$ 个玩具的最小花费。</p>
<p>则有方程：$dp_i&#x3D;\min\limits_{0\le j&lt;i}{dp_j+(i-j-1+sum_i-sum_j-L)^2}$。</p>
<p>我们令 $p&#x3D;i-1-L,q&#x3D;sum_j+j$，</p>
<p>$$\Rightarrow dp_i&#x3D;dp_j+(p-q)^2$$</p>
<p>$$\Rightarrow dp_i&#x3D;dp_j+p^2-2p\cdot q+q^2$$</p>
<p>$$\Rightarrow dp_j+q^2&#x3D;2p\cdot q+dp_i-p^2$$</p>
<p>其中 $k&#x3D;2p&#x3D;2\times(i-1-L),x&#x3D;q&#x3D;sum_j+j$，即 $k$ 与 $x$ 都为单调递增，用单调队列维护下凸壳即可。</p>
<h2 id="P2497-SDOI2012-基站建设"><a href="#P2497-SDOI2012-基站建设" class="headerlink" title="P2497 [SDOI2012]基站建设"></a><a href="https://www.luogu.com.cn/problem/P2497">P2497 [SDOI2012]基站建设</a></h2><p>列出转移方程：$dp_i&#x3D;\min\limits_{1\le j&lt;i}{dp_j+\dfrac{x_i-x_j}{2\sqrt{r_j}}}+v_i$，其中 $dp_1&#x3D;v_1$。</p>
<p>移项：$dp_j-\dfrac{x_j}{2\sqrt{r_j}}&#x3D;(-x_i)\times \dfrac{1}{2\sqrt{r_j}}+dp_i-v_i$</p>
<p>我们发现，斜率 $k$ 单调递减，也就是维护上凸壳，但 $x$ 却没有单调性，这时候我们考虑 CDQ 分治。</p>
<p>考虑用 $[l,mid]$ 去更新 $[mid+1,r]$，先将 $[l,mid]$ 按 $r$ 归并排序，这样我们插入时就可以按横坐标顺序插入凸包，而 $[mid+1,r]$ 就先不用排序，因为我们需要使用斜率 $k$ 的单调性去维护凸包，最终实现的时间复杂度即为 $\mathcal{O}(n\log n)$。</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">double</span> lf<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">500005</span><span class="token punctuation">;</span>

ll <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ll res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res <span class="token operator">=</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>ch <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
ll p<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> r0<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> id<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll seq<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll q<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> head<span class="token punctuation">,</span> tail<span class="token punctuation">;</span>
lf dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
lf ans <span class="token operator">=</span> <span class="token number">1e15</span><span class="token punctuation">;</span>

lf <span class="token function">x</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2.0</span> <span class="token operator">*</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>r0<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

lf <span class="token function">y</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">(</span>lf<span class="token punctuation">)</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2.0</span> <span class="token operator">*</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>r0<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">solve</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    head <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> tail <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> mid<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">&lt;</span> tail <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">y</span><span class="token punctuation">(</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">y</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token function">x</span><span class="token punctuation">(</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">x</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token punctuation">(</span><span class="token function">y</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">y</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tail <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token function">x</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">x</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tail <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> tail<span class="token operator">--</span><span class="token punctuation">;</span>
        q<span class="token punctuation">[</span><span class="token operator">++</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">&lt;</span> tail <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">y</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>head <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">y</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token function">x</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>head <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">x</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token operator">-</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> head<span class="token operator">++</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>lf<span class="token punctuation">)</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> p<span class="token punctuation">[</span>q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>r0<span class="token punctuation">[</span>q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">solve</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> pos1 <span class="token operator">=</span> l<span class="token punctuation">,</span> pos2 <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> pos <span class="token operator">=</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>pos1 <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> pos2 <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>r0<span class="token punctuation">[</span>id<span class="token punctuation">[</span>pos1<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> r0<span class="token punctuation">[</span>id<span class="token punctuation">[</span>pos2<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            seq<span class="token punctuation">[</span><span class="token operator">++</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> id<span class="token punctuation">[</span>pos1<span class="token punctuation">]</span><span class="token punctuation">,</span> pos1<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            seq<span class="token punctuation">[</span><span class="token operator">++</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> id<span class="token punctuation">[</span>pos2<span class="token punctuation">]</span><span class="token punctuation">,</span> pos2<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> pos1<span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> mid<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        seq<span class="token punctuation">[</span><span class="token operator">++</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> pos2<span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        seq<span class="token punctuation">[</span><span class="token operator">++</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        id<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> seq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    n <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r0<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	
        id<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1e15</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">solve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> r0<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.3Lf\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P2305-NOI2014-购票"><a href="#P2305-NOI2014-购票" class="headerlink" title="P2305 [NOI2014] 购票"></a><a href="https://www.luogu.com.cn/problem/P2305">P2305 [NOI2014] 购票</a></h2><p>树上斜率优化，还是有一定的难度。</p>
<p>设 $dp_u$ 表示从 $u$ 点走到 $1$ 点的最小费用。</p>
<p>则转移方程为： $dp_u&#x3D;\min\limits_{fa\in anc_u,dep_u-dep_{fa}\le l_u}{dp_{fa}+p_u*(dep_u-dep_{fa})+q_u}$</p>
<p>稍微移一下项：$dp_{fa}&#x3D;p_u*dep_{fa}+dp_u-p_u*dep_u-q_u$</p>
<p>这里的 $x$ 虽是单调递增，但斜率 $k$ 却没有单调性，所以我们需要把整个凸壳存下来然后二分，因为只用维护一头，我们可以采用单调栈存储。</p>
<p>但是在转移点的选择中还存在一个 $dep_u-dep_{fa}\le l_u$ 的限制，也就是每一个 $u$，它的转移点并不是 $1-u$ ，而有一个上限，那么我们就得尝试维护区间查询一个单调栈。</p>
<p>考虑到是树上问题，可能会有删除的操作，但我们不想写可撤销单调栈，怎么办。</p>
<p>这里有一种很好的 idea 叫做<strong>出栈序</strong>，我们先将树进行一遍 $dfs$，然后在退出这个节点时给它标号，有点后序遍历的感觉。</p>
<p>那么这是我们发现了一个神奇的性质，首先对于一个点 $u$，它的子节点所形成的若干个子树之间，两两之间的编号没有交集，这样我们在进行 $dfs$ 修改和查询时，不会查询到其它的子树上（尽管其它子树可能已经被修改），而查询的这条链的下方的节点，编号一定比整条链所有的编号要小，这条链上方的节点，编号一定比整条链所有的编号要大，这样我们在查询时，就能保证查的单调栈一定是只包含这条链的决策点的单调栈。</p>
<p>然后就比较好做了，维护一个线段树套单调栈，修改均摊 $\mathcal{O}(\log n)$，查询 $\mathcal{O}(\log^2 n)$。</p>
<p>总时间复杂度 $\mathcal{O}(n\log^2 n)$，空间复杂度 $\mathcal{O}(n\log n)$。</p>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">200005</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ll Lnf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f3f3f3f3fll</span><span class="token punctuation">;</span>

ll <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ll res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res <span class="token operator">=</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>ch <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> t<span class="token punctuation">,</span> top<span class="token punctuation">,</span> head<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> dfn<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> node<span class="token punctuation">;</span>
ll anc<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dist<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dep<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll f<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> p0<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> l<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> Edge <span class="token punctuation">{</span>
    <span class="token keyword">int</span> v<span class="token punctuation">;</span>
    ll w<span class="token punctuation">;</span>
    <span class="token keyword">int</span> next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>Edge<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> ll w<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Edge<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span>v <span class="token operator">=</span> v<span class="token punctuation">;</span>
    Edge<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">=</span> w<span class="token punctuation">;</span>
    Edge<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>
    head<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> top<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">long</span> <span class="token keyword">double</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token keyword">int</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> dep<span class="token punctuation">[</span>fa<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">long</span> <span class="token keyword">double</span> <span class="token function">y</span><span class="token punctuation">(</span><span class="token keyword">int</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>fa<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">struct</span> Stack <span class="token punctuation">{</span>
    vector<span class="token operator">&lt;</span>ll<span class="token operator">></span> stac<span class="token punctuation">;</span>
    
    <span class="token function">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        stac<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> cur <span class="token operator">=</span> stac<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">y</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">y</span><span class="token punctuation">(</span>stac<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token function">x</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">x</span><span class="token punctuation">(</span>stac<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token function">y</span><span class="token punctuation">(</span>stac<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">y</span><span class="token punctuation">(</span>stac<span class="token punctuation">[</span>cur <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token function">x</span><span class="token punctuation">(</span>stac<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">x</span><span class="token punctuation">(</span>stac<span class="token punctuation">[</span>cur <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            stac<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cur<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        stac<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
    
    ll <span class="token function">search</span><span class="token punctuation">(</span>ll k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>stac<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> stac<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">y</span><span class="token punctuation">(</span>stac<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">y</span><span class="token punctuation">(</span>stac<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token function">x</span><span class="token punctuation">(</span>stac<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">x</span><span class="token punctuation">(</span>stac<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                r <span class="token operator">=</span> mid<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> stac<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

Stack tree<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">ls</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">rs</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">>=</span> x<span class="token punctuation">)</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token function">ls</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> x<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token function">rs</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> x<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> ql<span class="token punctuation">,</span> <span class="token keyword">int</span> qr<span class="token punctuation">,</span> <span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> ql <span class="token operator">&amp;&amp;</span> r <span class="token operator">==</span> qr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> fa <span class="token operator">=</span> tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>p0<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>fa <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> Lnf<span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> dp<span class="token punctuation">[</span>fa<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">-</span> dep<span class="token punctuation">[</span>fa<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> p0<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> q<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">>=</span> qr<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token function">ls</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> ql<span class="token punctuation">,</span> qr<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> ql<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token function">rs</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> ql<span class="token punctuation">,</span> qr<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token function">ls</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> ql<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token function">rs</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> qr<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">dfs1</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">,</span> ll lstw<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    anc<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> fa<span class="token punctuation">,</span> dist<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> lstw<span class="token punctuation">,</span> dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> dep<span class="token punctuation">[</span>fa<span class="token punctuation">]</span> <span class="token operator">+</span> lstw<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>k <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        anc<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> anc<span class="token punctuation">[</span>anc<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        dist<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>anc<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dist<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ll v <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">,</span> w <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>
        <span class="token function">dfs1</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>node<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">up</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ll v <span class="token operator">=</span> u<span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span>k <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>anc<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> sum <span class="token operator">+</span> dist<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> l<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sum <span class="token operator">+</span><span class="token operator">=</span> dist<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> v <span class="token operator">=</span> anc<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">void</span> <span class="token function">dfs2</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>u <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">int</span> fa <span class="token operator">=</span> <span class="token function">up</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
         dp<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>fa<span class="token punctuation">]</span><span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    <span class="token function">update</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> v <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>
        <span class="token function">dfs2</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    n <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p0<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">insert</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">dfs1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0ll</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">dfs2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>学个斜率优化总共用了也就 $1$ 周，但博客磨蹭了好久才写完。</p>
<p>大概几个月前，在刚翻开蓝书的斜率优化时，我对它还有一定的抵触心理，觉得自己应该看不懂。</p>
<p>但现在经过一个多小时的研究，最终也是能理解了书中的意思，自己找了几道题目也能够解出来，我认为还是达到了学习的效果和目的。</p>
<p>对于学习 OI，我们不能抱有太多逃避，不然你总是也学不会，只要肯努力，肯细心琢磨，才能理解的透彻。</p>
<p>话说我觉得我应该也只是理解了斜率优化的皮毛，如果还有更好的斜率优化题目，我也会及时在此更新。</p>
<p>下一步也不知道要新学点啥，要不定个四边形不等式？</p>
<p>这里奉劝大家：复习要及时，不然退役两行泪。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>省选</category>
        <category>NOI8级</category>
      </categories>
  </entry>
  <entry>
    <title>线性基</title>
    <url>/2022/02/24/%E7%BA%BF%E6%80%A7%E5%9F%BA/</url>
    <content><![CDATA[<p>　<span id="more"></span></p>
<h1 id="一些定义"><a href="#一些定义" class="headerlink" title="一些定义"></a>一些定义</h1><h2 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h2><p>向量是一个抽象的概念，简单的说就是一个有方向有大小的量。</p>
<p>一般地，将一个 $k$ 维向量表示为 ${a_1,a_2,\cdots,a_k}$。</p>
<p>下面我们研究的均为 $1$ 维向量（其实就是普通的数）</p>
<h2 id="异或和"><a href="#异或和" class="headerlink" title="异或和"></a>异或和</h2><p>对于集合 $S&#x3D;{a_1,a_2,\cdots,a_m}$，异或和为 $a_1 \oplus a_2\oplus\cdots\oplus a_m$，其中 $\oplus$ 为按位异或运算。</p>
<h2 id="张成"><a href="#张成" class="headerlink" title="张成"></a>张成</h2><p>对于一个集合 $S$，它的所有子集的异或和组成的集合，称为集合 $S$ 的张成，记作 $\operatorname{span}(S)$。</p>
<h2 id="表出"><a href="#表出" class="headerlink" title="表出"></a>表出</h2><p>对于元素 $x$ 和集合 $S$，$x\notin S$，若 $S$ 的异或和为 $x$，则称 $x$ 能被 $S$ 表出，或称 $x$ 能被 $S$ 中的元素表出。</p>
<h2 id="线性相关"><a href="#线性相关" class="headerlink" title="线性相关"></a>线性相关</h2><p>对于一个集合 $S$，如果存在 $k\in S$，将去除元素 $k$ 后的集合记为 $S’$，若 $k\in \operatorname{span}(S’)$，则称集合 $S$ 线性相关，反之称为线性无关。</p>
<p>若 $k$ 能被 $S$ 中的其它元素表出，那么集合 $S$ 一定线性相关。</p>
<h2 id="线性基-text-Base"><a href="#线性基-text-Base" class="headerlink" title="线性基 $(\text{Base})$"></a>线性基 $(\text{Base})$</h2><p>称集合 $B$ 是集合 $S$ 的线性基，当且仅当：</p>
<ul>
<li>$B\in \operatorname{span}(S)$</li>
<li>集合 $B$ 线性无关</li>
</ul>
<p>线性基的基本性质：</p>
<ol>
<li><p>$B$ 是极小的满足线性基的集合。任何 $B$ 的真子集都不可能成为 $S$ 的线性基。</p>
</li>
<li><p>$S$ 中的任何元素都可被集合 $B$ 中的一些元素唯一表出。</p>
<blockquote>
<p>$\text{Proof:}$</p>
<p>假设 $x\in S,B&#x3D;{a_1,a_2,\cdots,a_k}$ 。</p>
<p>$x&#x3D;a_{i_1}\oplus a_{i_2}\oplus\cdots\oplus a_{i_n} -$ ① </p>
<p>$x&#x3D;a_{j_1}\oplus a_{j_2}\oplus\cdots\oplus a_{j_m} -$ ②</p>
<p>① $\oplus$ ②，得 $a_{i_1}&#x3D;a_{i_2}\oplus\cdots\oplus a_{i_n}\oplus a_{j_1}\oplus\cdots\oplus a_{j_m}$，则集合 $B$ 线性相关，与线性基定义矛盾。</p>
<p>则假设不成立，证毕。</p>
</blockquote>
</li>
<li><p>存在一个线性基 $B$，使得线性基 $B$ 中的每一个数在二进制下最高位互不相同，若有最高位相同的两个数 $a,b$，记 $c&#x3D;a\oplus b$，删除 $a$ 或 $b$ 后插入 $c$，若还有相同的就继续操作直到没有为止。</p>
<blockquote>
<p>$\text{Proof:}$</p>
<p>显然， $a$ 能被 $b,c$ 表出，则可以将 $a$ 删除。</p>
</blockquote>
</li>
<li><p>$|B|\le \log_2a$</p>
<blockquote>
<p>$\text{Proof:}$</p>
<p>由性质 $3$ 可得。</p>
</blockquote>
</li>
</ol>
<h1 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h1><p>对于一个集合 $S$，怎么构造线性基呢？</p>
<p>举个例子， $S&#x3D;{7,5,4}$</p>
<p>首先构造一张表格：</p>
<table>
<thead>
<tr>
<th></th>
<th>$j&#x3D;2$</th>
<th>$j&#x3D;1$</th>
<th>$j&#x3D;0$</th>
</tr>
</thead>
<tbody><tr>
<td>$b_2$</td>
<td>$0$</td>
<td>$0$</td>
<td>$0$</td>
</tr>
<tr>
<td>$b_1$</td>
<td>$0$</td>
<td>$0$</td>
<td>$0$</td>
</tr>
<tr>
<td>$b_0$</td>
<td>$0$</td>
<td>$0$</td>
<td>$0$</td>
</tr>
</tbody></table>
<p>我们一个一个插入，首先插入 $7$，$7&#x3D;(111)_2$。</p>
<p>$7$ 在二进制下的最高位，也就是第 $2$ 位为 $1$，则可将 $7$ 插入线性基的 $b_2$ 中，都是用二进制表示。</p>
<table>
<thead>
<tr>
<th></th>
<th>$j&#x3D;2$</th>
<th>$j&#x3D;1$</th>
<th>$j&#x3D;0$</th>
</tr>
</thead>
<tbody><tr>
<td>$b_2$</td>
<td>$1$</td>
<td>$1$</td>
<td>$1$</td>
</tr>
<tr>
<td>$b_1$</td>
<td>$0$</td>
<td>$0$</td>
<td>$0$</td>
</tr>
<tr>
<td>$b_0$</td>
<td>$0$</td>
<td>$0$</td>
<td>$0$</td>
</tr>
</tbody></table>
<p>然后插 $5$，$5&#x3D;(101)_2$。</p>
<p>首先看 $5$ 的第 $2$ 位为 $1$，但是 $b_2$ 已经有值了，那么让 $5\oplus b_2&#x3D;(010)_2$，这一步的原理就参照了线性基性质 $3$。</p>
<p>然后看第 $1$ 位，发现是 $1$，并且 $b_1$ 还没有填，那么就将 $(010)_2$ 填在 $b_1$。</p>
<table>
<thead>
<tr>
<th></th>
<th>$j&#x3D;2$</th>
<th>$j&#x3D;1$</th>
<th>$j&#x3D;0$</th>
</tr>
</thead>
<tbody><tr>
<td>$b_2$</td>
<td>$1$</td>
<td>$1$</td>
<td>$1$</td>
</tr>
<tr>
<td>$b_1$</td>
<td>$0$</td>
<td>$1$</td>
<td>$0$</td>
</tr>
<tr>
<td>$b_0$</td>
<td>$0$</td>
<td>$0$</td>
<td>$0$</td>
</tr>
</tbody></table>
<p>最后插 $4$，$4&#x3D;(100)_2$。</p>
<p>还是同样的道理，$4$ 的第 $2$ 位为 $1$，但 $b_2$ 有值，$4\oplus b_2&#x3D;(011)_2$。</p>
<p>$(011)_2$ 的第 $1$ 位为 $1$，但 $b_1$ 有值，$(011)_2\oplus b_1&#x3D;(001)_2$。</p>
<p>$(001)_2$ 的第 $0$ 位为 $1$，$b_0$ 没有值，那么 $b_0&#x3D;(001)_2$。</p>
<p>这样我们就造出了完整的线性基表：</p>
<table>
<thead>
<tr>
<th></th>
<th>$j&#x3D;2$</th>
<th>$j&#x3D;1$</th>
<th>$j&#x3D;0$</th>
</tr>
</thead>
<tbody><tr>
<td>$b_2$</td>
<td>$1$</td>
<td>$1$</td>
<td>$1$</td>
</tr>
<tr>
<td>$b_1$</td>
<td>$0$</td>
<td>$1$</td>
<td>$0$</td>
</tr>
<tr>
<td>$b_0$</td>
<td>$0$</td>
<td>$0$</td>
<td>$1$</td>
</tr>
</tbody></table>
<p>$B&#x3D;{7,2,1}$</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> maxl <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这里代表的是 a 的值域在二进制下的最大长度</span>
ll b<span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">bool</span> <span class="token function">insert</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> maxl<span class="token punctuation">;</span>j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1ll</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这是刚刚没有提到的情况，如果当前的这一位为 0，直接跳过这一位</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            x <span class="token operator">^</span><span class="token operator">=</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>复杂度 $O(\log a)$。</p>
<h1 id="text-Ex-构造：-text-Menci-线性基"><a href="#text-Ex-构造：-text-Menci-线性基" class="headerlink" title="$\text{Ex}$ 构造：$\text{Menci}$ 线性基"></a>$\text{Ex}$ 构造：$\text{Menci}$ 线性基</h1><p>$\text{Menci}$ 线性基也满足线性基的性质，同时还有一些特殊性质，具体可见<a href="https://oi.men.ci/linear-basis-notes/">线性基学习笔记 | Menci’s OI Blog</a>。</p>
<p>实现起来也相对简单，对于一个元素 $x$，若找到了这个元素应该插入的位置 $b_j$，那么先将 $x$ 与比 $x$ 位数小的数分别异或，前提是 $x$ 的这一位是 $1$。</p>
<p>然后就将比 $x$ 位数大的数与 $x$ 异或即可，前提是这些数的第 $j$ 位是 $1$。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> maxl <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>
ll b<span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">bool</span> <span class="token function">insert</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> maxl<span class="token punctuation">;</span>j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1ll</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            x <span class="token operator">^</span><span class="token operator">=</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>k <span class="token operator">&lt;</span> j<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1ll</span> <span class="token operator">&lt;&lt;</span> k<span class="token punctuation">)</span> <span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    x <span class="token operator">^</span><span class="token operator">=</span> b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>k <span class="token operator">&lt;=</span> maxl<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1ll</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span> b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    b<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> x<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>复杂度 $O(\log a)$。</p>
<h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><p>$\text{Problem 1:}$ 给定 $n$ 个数 $a_1\sim a_n$，求从中选出任意个数所能得到的最大异或值。</p>
<p>对于普通的线性基，解决方案为：</p>
<pre class=" language-cpp"><code class="language-cpp">ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> maxl<span class="token punctuation">;</span>j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> ans <span class="token operator">^</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>对于 $\text{Menci}$ 线性基，解决方案为：</p>
<pre class=" language-cpp"><code class="language-cpp">ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> maxl<span class="token punctuation">;</span>j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ans <span class="token operator">=</span> ans <span class="token operator">^</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>$\text{Problem 2:}$ 给定 $n$ 个数 $a_1\sim a_n$，求从中选出任意个数与给定数 $x$ 异或所能得到的最大异或值。</p>
<p>对于普通的线性基，解决方案为：</p>
<pre class=" language-cpp"><code class="language-cpp">ll ans <span class="token operator">=</span> x<span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> maxl<span class="token punctuation">;</span>j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> ans <span class="token operator">^</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>对于 $\text{Menci}$ 线性基，解决方案为：</p>
<pre class=" language-cpp"><code class="language-cpp">ll ans <span class="token operator">=</span> x<span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> maxl<span class="token punctuation">;</span>j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ans <span class="token operator">=</span> ans <span class="token operator">^</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>$\text{Problem 3:}$ 给定 $n$ 个数 $a_1\sim a_n$，求从中选出任意个数所能得到的最小异或值。</p>
<p>对于两种线性基，答案都为线性基中的最小元素。</p>
<p>$\text{Problem 4:}$ 给定 $n$ 个数 $a_1\sim a_n$，求 $a_1\sim a_n$ 能组成的所有异或值的个数。</p>
<p>求出线性基中的元素个数 $k$，则答案为 $2^k$。</p>
<p>$\text{Problem 5:}$ 给定 $n$ 个数 $a_1\sim a_n$，求 $a_1\sim a_n$ 能组成的所有异或值的第 $k$ 小值。</p>
<p>普通线性基不可做，而 $\text{Menci}$ 线性基的解决方案为：</p>
<pre class=" language-cpp"><code class="language-cpp">
</code></pre>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="BJWC2011-元素"><a href="#BJWC2011-元素" class="headerlink" title="[BJWC2011]元素 "></a>[<a href="https://www.luogu.com.cn/problem/P4570">BJWC2011]元素 </a></h2><p>转化题意后得：在给定的集合 $S$，选取出一个线性基 $B$，使得魔力值最大。</p>
<p>将魔力值从大到小排序，若能插入线性基，就记入答案，否则不记，最终的答案即为最大值。</p>
<p>证明很显然，因为线性基的大小是一定的，对于一个没有在线性基中的元素 $x$，一定存在一个属于线性基的元素 $y$，删除 $y$ 后 $x$ 就可被放入。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">double</span> lf<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> Inf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ll Lnf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f3f3f3fll</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> Mod <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1005</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">;</span>
ll num<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> magic<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> id<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
ll ans<span class="token punctuation">;</span>

<span class="token keyword">bool</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> magic<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> magic<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">insert</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">61</span><span class="token punctuation">;</span>j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1ll</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        
        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            x <span class="token operator">^</span><span class="token operator">=</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> 
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>k <span class="token operator">&lt;</span> j<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1ll</span> <span class="token operator">&lt;&lt;</span> k<span class="token punctuation">)</span> <span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    x <span class="token operator">^</span><span class="token operator">=</span> b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>k <span class="token operator">&lt;=</span> <span class="token number">61</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1ll</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span> b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    b<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> x<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>	
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>magic<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        id<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>id <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> id <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> compare<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ll x <span class="token operator">=</span> num<span class="token punctuation">[</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y <span class="token operator">=</span> magic<span class="token punctuation">[</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">insert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ans <span class="token operator">+</span><span class="token operator">=</span> y<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="TJOI2008-彩灯"><a href="#TJOI2008-彩灯" class="headerlink" title="[TJOI2008]彩灯"></a><a href="https://www.luogu.com.cn/problem/P3857">[TJOI2008]彩灯</a></h2><p>此题即为 $\text{Problem 4}$ ，直接求线性基即可。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">double</span> lf<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> Inf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ll Lnf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f3f3f3fll</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> Mod <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">55</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
<span class="token keyword">int</span> cnt<span class="token punctuation">;</span>
ll b<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> light<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">bool</span> <span class="token function">insert</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> n<span class="token punctuation">;</span>j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1ll</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            x <span class="token operator">^</span><span class="token operator">=</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>k <span class="token operator">&lt;</span> j<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1ll</span> <span class="token operator">&lt;&lt;</span> k<span class="token punctuation">)</span> <span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    x <span class="token operator">^</span><span class="token operator">=</span> b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>k <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1ll</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span> b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    b<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> x<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>light <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ll x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>light<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'O'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                x <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1ll</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">insert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> n<span class="token punctuation">;</span>j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cnt<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1ll</span> <span class="token operator">&lt;&lt;</span> cnt<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2008</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="WC2011-最大XOR和路径"><a href="#WC2011-最大XOR和路径" class="headerlink" title="[WC2011]最大XOR和路径"></a><a href="https://www.luogu.com.cn/problem/P4151">[WC2011]最大XOR和路径</a></h2><p>首先我们观察到一个性质，最终答案可以为 $1$ 到 $n$ 的一条简单路径，加上若干个环的值得到。因为环可以看作从这个路径上的一点出发，走完一个环后再走回到原路径中，这样路径与环之间的边会走两次，从而不会贡献在异或和中。</p>
<p>那么是不是需要将无向图中所有的环找出来，然后求线性基呢？但无向图中的环是指数级别，无法做到。</p>
<p>想想我们是如何判断一个无向图中是否有环的：每走过一点，标记一下，如果走到了有标记的点就说明有环。</p>
<p>那我们是否可以只用这些环？答案居然是可以！（具体证明略）</p>
<p>这样我们找环的时间就从指数级的复杂度降到了 $O(n)$，可以接受。</p>
<p>下面就需要找一条从 $1$ 到 $n$ 的简单路径了，但如果有多条路径可以选择应该选哪个？</p>
<p>其实任选一条就行，若有两条路径可选择，设为路径 $A$ 和路径 $B$，则 $AB$ 必然也是一个环，这个环也能被线性基表出，那么无论选 $A$ 还是选 $B$，另一个都可以通过 $AB$ 环和自己表出，故选哪条都是一样的。</p>
<p>由此就得到了一个十分容易实现的思路：记 $node_u$ 为 $1$ 节点走到 $u$ 节点的异或和， 且走过的路径为简单路径，这样找到环时会很容易计算出这个环的异或和。然后求出线性基并与 $node_n$ 取异或和最大值，这与 $\text{Problem 2}$ 相同，然后就解决了。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">double</span> lf<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> Inf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ll Lnf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f3f3f3fll</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> Mod <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">50005</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxm <span class="token operator">=</span> <span class="token number">100005</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> top<span class="token punctuation">,</span> head<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll node<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">;</span>
ll b<span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> Edge <span class="token punctuation">{</span>
    <span class="token keyword">int</span> v<span class="token punctuation">;</span>
    ll w<span class="token punctuation">;</span>
    <span class="token keyword">int</span> next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>Edge<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> maxm<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> ll w<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Edge<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span>v <span class="token operator">=</span> v<span class="token punctuation">;</span>
    Edge<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">=</span> w<span class="token punctuation">;</span>
    Edge<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>
    head<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> top<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">insert</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">61</span><span class="token punctuation">;</span>j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1ll</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            x <span class="token operator">^</span><span class="token operator">=</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>k <span class="token operator">&lt;</span> j<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1ll</span> <span class="token operator">&lt;&lt;</span> k<span class="token punctuation">)</span> <span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    x <span class="token operator">^</span><span class="token operator">=</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>k <span class="token operator">&lt;=</span> <span class="token number">61</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1ll</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span> b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    b<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> x<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> v <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>
        ll w <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">insert</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">^</span> node<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">^</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            node<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">^</span> w<span class="token punctuation">;</span>
            <span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span>
        ll w<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">,</span> <span class="token operator">&amp;</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">insert</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    node<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ans <span class="token operator">=</span> node<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">61</span><span class="token punctuation">;</span>j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> ans <span class="token operator">^</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="SCOI2016-幸运数字"><a href="#SCOI2016-幸运数字" class="headerlink" title="[SCOI2016]幸运数字"></a><a href="https://www.luogu.com.cn/problem/P3292">[SCOI2016]幸运数字</a></h2><p>此题只需使用一个新操作：合并两个线性基。</p>
<p>因为两个线性基的长度都不超过 $\log a$，那就直接暴力合并。</p>
<p>时间复杂度 $O(\log^2 a)$。</p>
<p>然后用倍增即能得到 $O(n\log n\log^2 a)$ 的优秀做法，不过题解还有更优秀的，但不是本篇文章的重点。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">double</span> lf<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> Inf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ll Lnf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f3f3f3fll</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> Mod <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">20005</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> q<span class="token punctuation">,</span> top<span class="token punctuation">,</span> head<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> lg<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> dep<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> anc<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
ll st<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
ll ans<span class="token punctuation">;</span>

<span class="token keyword">struct</span> Edge <span class="token punctuation">{</span>
    <span class="token keyword">int</span> v<span class="token punctuation">;</span>
    <span class="token keyword">int</span> next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>Edge<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Edge<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span>v <span class="token operator">=</span> v<span class="token punctuation">;</span>
    Edge<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>
    head<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> top<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx<span class="token punctuation">,</span> <span class="token keyword">int</span> idy<span class="token punctuation">,</span> ll x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">61</span><span class="token punctuation">;</span>j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1ll</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">[</span>idy<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            x <span class="token operator">^</span><span class="token operator">=</span> st<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">[</span>idy<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            st<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">[</span>idy<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 

<span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx1<span class="token punctuation">,</span> <span class="token keyword">int</span> idy1<span class="token punctuation">,</span> <span class="token keyword">int</span> idx2<span class="token punctuation">,</span> <span class="token keyword">int</span> idy2<span class="token punctuation">,</span> <span class="token keyword">int</span> idx3<span class="token punctuation">,</span> <span class="token keyword">int</span> idy3<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">61</span><span class="token punctuation">;</span>j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        st<span class="token punctuation">[</span>idx3<span class="token punctuation">]</span><span class="token punctuation">[</span>idy3<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> st<span class="token punctuation">[</span>idx1<span class="token punctuation">]</span><span class="token punctuation">[</span>idy1<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">61</span><span class="token punctuation">;</span>j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>idx2<span class="token punctuation">]</span><span class="token punctuation">[</span>idy2<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>	 <span class="token punctuation">{</span>
            <span class="token function">insert</span><span class="token punctuation">(</span>idx3<span class="token punctuation">,</span> idy3<span class="token punctuation">,</span> st<span class="token punctuation">[</span>idx2<span class="token punctuation">]</span><span class="token punctuation">[</span>idy2<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> dep<span class="token punctuation">[</span>fa<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    anc<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> fa<span class="token punctuation">;</span>
    <span class="token function">insert</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">insert</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>fa<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> k<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        anc<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> anc<span class="token punctuation">[</span>anc<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">merge</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> anc<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> u<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> v <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>v <span class="token operator">==</span> fa<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">insertb</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">61</span><span class="token punctuation">;</span>j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1ll</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            x <span class="token operator">^</span><span class="token operator">=</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">mergeb</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx<span class="token punctuation">,</span> <span class="token keyword">int</span> idy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">61</span><span class="token punctuation">;</span>j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">[</span>idy<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">insertb</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">[</span>idy<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">LCA</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>dep<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">&lt;</span> dep<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>dep<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">></span> dep<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> k <span class="token operator">=</span> lg<span class="token punctuation">[</span>dep<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">-</span> dep<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">mergeb</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">,</span> x <span class="token operator">=</span> anc<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> lg<span class="token punctuation">[</span>dep<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>k <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>anc<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">!=</span> anc<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">mergeb</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">,</span> x <span class="token operator">=</span> anc<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token function">mergeb</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">,</span> y <span class="token operator">=</span> anc<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">mergeb</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">mergeb</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    lg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        lg<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> lg<span class="token punctuation">[</span>i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">addEdge</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">addEdge</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">LCA</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">61</span><span class="token punctuation">;</span>j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> ans <span class="token operator">^</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>作为省选中相对简单的算法，线性基代码实现难度很低，在省选中相对于其它题目一般都为送分题，但线性基背后的性质和应用是我们在比赛中所应注意的，能够快速的推出题干中线性基的相关条件，就如 <a href="https://www.luogu.com.cn/problem/P4151">[WC2011]最大XOR和路径</a>，分析出不用得到所有的环而是只用标记法得出的环就可组成的线性基是解题的关键，或许在场上不能证明的结论，但希望仍能有机会在场上实现出来，所以场下的经验积累就十分重要。</p>
<p>就这样吧，跑路了，如果还有很好的题会继续更新的。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>省选</category>
        <category>NOI7级</category>
      </categories>
  </entry>
  <entry>
    <title>Codeforces Contest Practice</title>
    <url>/2022/02/02/Codeforces-Contest-Practice/</url>
    <content><![CDATA[<h1 id="Educational-Codeforces-Round-70-text-1202"><a href="#Educational-Codeforces-Round-70-text-1202" class="headerlink" title="Educational Codeforces Round 70$\text{(1202)}$"></a>Educational Codeforces Round 70$\text{(1202)}$</h1><table>
<thead>
<tr>
<th align="center">$\text{Penalty}$</th>
<th align="center">$\texttt{A}$</th>
<th align="center">$\texttt{B}$</th>
<th align="center">$\texttt{C}$</th>
<th align="center">$\texttt{D}$</th>
<th align="center">$\texttt{E}$</th>
<th align="center">$\texttt{F}$</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$251$</td>
<td align="center">$\texttt{+}$</td>
<td align="center">$\texttt{+5}$</td>
<td align="center">$\texttt{-2}$</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">$\text{00:12}$</td>
<td align="center">$\text{01:04}$</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">补题</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
</tbody></table>
<p>比赛时间：$\text{2022&#x2F;7&#x2F;21 14:30}$</p>
<h2 id="A-You-Are-Given-Two-Binary-Strings…"><a href="#A-You-Are-Given-Two-Binary-Strings…" class="headerlink" title="A. You Are Given Two Binary Strings…"></a><a href="https://codeforces.com/contest/1202/problem/A">A. You Are Given Two Binary Strings…</a></h2><p>$\text{Solution:}$</p>
<p>因为是倒序字典序最小，所以我们要尽可能消除靠后的 $1$。</p>
<p>观察到 $k$ 会让 $\text{B}$ 串向左移 $k$ 位，我们判断一下 $\text{B}$ 串的最后一个 $1$，向左移到 $\text{A}$ 串第一个能移到的 $1$ 的位置。</p>
<h2 id="B-You-Are-Given-a-Decimal-String…"><a href="#B-You-Are-Given-a-Decimal-String…" class="headerlink" title="B. You Are Given a Decimal String…"></a><a href="https://codeforces.com/contest/1202/problem/B">B. You Are Given a Decimal String…</a></h2><p>$\text{Solution:}$</p>
<p>首先不妨设 $dp_{x,y,i,j}$ 表示用 $x$ 和 $y$，从 $i$ 加到 $j$ 的最小步数。其中 $i,j$ 枚举 $0\sim100$。</p>
<p>$v_{x,y,i,j}$ 表示用 $x,y$，从末位为 $i$ 加到末位为 $j$ 的最小步数，这个可以通过 $dp$ 转移。</p>
<p>最终答案为：$\sum\limits_{i&#x3D;1}^{|s|-1}v_{x,y,s_i,s_{i+1}}$。</p>
<p>时间复杂度 $\mathcal{O}(10\times10\times100\times100+10\times10\times |s|)$。</p>
<h2 id="C-You-Are-Given-a-WASD-string…"><a href="#C-You-Are-Given-a-WASD-string…" class="headerlink" title="C. You Are Given a WASD-string…"></a><a href="https://codeforces.com/contest/1202/problem/C">C. You Are Given a WASD-string…</a></h2><p>$\text{Solution:}$</p>
<p>我们不妨假定初始位置为 $(0,0)$，在全程走到的极值坐标 $mix,mxx,miy,mxy$，那么面积为 $(mxx-mix+1)*(mxy-miy+1)$。</p>
<p>因为我们只能添加最多一步，所以答案只有可能变为 $(mxx-mix)*(mxy-miy+1)$ 或 $(mxx-mix+1)*(mxy-miy)$，我们只需判断能否在 $mix&#x2F;miy$ 加 $1$ 的同时 $mxx&#x2F;mxy$ 不变或 $mxx&#x2F;mxy$ 减 $1$ 的同时 $mix&#x2F;miy$ 不变，考场时忘记同时判断另一边不变。</p>
<h2 id="D-Print-a-1337-string…"><a href="#D-Print-a-1337-string…" class="headerlink" title="D. Print a 1337-string…"></a><a href="https://codeforces.com/contest/1202/problem/D">D. Print a 1337-string…</a></h2><p>$\text{Solution:}$</p>
<p>考虑构造序列为 $133\underbrace{77\cdots7} _ {cnt_7}\underbrace{33\cdot3}_{cnt_3}7 $。</p>
<p>得到的子序列数量为 $cnt_7+1+\dfrac{(cnt_3+2)(cnt_3+1)-1}{2}$，枚举 $cnt_3$，看 $cnt_7$ 能否满足长度在 $10^5$ 即可。</p>
<h2 id="E-You-Are-Given-Some-Strings…"><a href="#E-You-Are-Given-Some-Strings…" class="headerlink" title="E. You Are Given Some Strings…"></a><a href="https://codeforces.com/contest/1202/problem/E">E. You Are Given Some Strings…</a></h2><p>$\text{Solution:}$</p>
<p>我们不妨从文本串找到一个划分点 $i$，分成 $[1,i]$ 和 $[i+1,n]$ 两段，我们可以找所有模式串匹配前半部分的后缀的数量，所有模式串匹配后半部分前缀的数量，将两部分相乘就能得到第 $i$ 位的贡献。由于后半部分等价于前半部分翻转，所以考虑前半部分。</p>
<p>将文本串存入 trie 树，求出 fail 指针，因为失配的定义就是跳到下一个与当前串有最大公共后缀的串的编号，如果 $p$ 能匹配，那么 $fail_p$ 也可以匹配，所以 $p\rightarrow fail_p$ 作为更新，最后遍历文本串，若此时遍历到了第 $i$ 位，匹配到了 $p$ 节点，则有 $f_i&#x3D;ed_p$。</p>
<p>然后将两边都算出来就解决了这道题。</p>
<p>时间复杂度 $\mathcal{O}(|T|+\sum|S|)$。</p>
<p>$\text{Code: }$<a href="https://codeforces.com/contest/1202/submission/165291628">Submission #165291628 - Codeforces</a></p>
<h2 id="F-You-Are-Given-Some-Letters…"><a href="#F-You-Are-Given-Some-Letters…" class="headerlink" title="F. You Are Given Some Letters…"></a><a href="https://codeforces.com/contest/1202/problem/F">F. You Are Given Some Letters…</a></h2><p>$\text{Solution: }$</p>
<p>不妨考虑枚举完整的循环节数 $p$,此时对应的 $k$ 的范围为 $[l,\dfrac{n}{\lfloor\dfrac{n}{l}\rfloor}]$。</p>
<p>设一个循环节 $\texttt{a}$ 的数量为 $a’$，$\texttt{b}$ 的数量为 $b’$，则有：</p>
<p>$\lfloor\dfrac{a}{p+1}\rfloor\le a’\le \lfloor\dfrac{a}{p}\rfloor - ①$</p>
<p>$\lfloor\dfrac{b}{p+1}\rfloor\le b’\le \lfloor\dfrac{b}{p}\rfloor - ②$</p>
<p>$①+②$ 得：$\lfloor\dfrac{a+b}{p+1}\rfloor\le a’+b’\le\lfloor\dfrac{a+b}{p}\rfloor$</p>
<p>而 $k&#x3D;a’+b’$，两个范围取交则得到了循环节数量为 $p$ 时 $k$ 的取值方案，计算过后，将 $l$ 设为 $\dfrac{n}{\lfloor\dfrac{n}{l}\rfloor}+1$。</p>
<p>时间复杂度 $\mathcal{O}(\sqrt{a+b})$。</p>
<h1 id="Educational-Codeforces-Round-71-text-1207"><a href="#Educational-Codeforces-Round-71-text-1207" class="headerlink" title="Educational Codeforces Round 71$\text{(1207)}$"></a>Educational Codeforces Round 71$\text{(1207)}$</h1><p>比赛时间：$\text{2022&#x2F;1&#x2F;29 20:05}$</p>
<table>
<thead>
<tr>
<th align="center">$\text{Penalty}$</th>
<th align="center">$\texttt{A}$</th>
<th align="center">$\texttt{B}$</th>
<th align="center">$\texttt{C}$</th>
<th align="center">$\texttt{D}$</th>
<th align="center">$\texttt{E}$</th>
<th align="center">$\texttt{F}$</th>
<th align="center">$\texttt{G}$</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$251$</td>
<td align="center">$\texttt{+}$</td>
<td align="center">$\texttt{+1}$</td>
<td align="center">$\texttt{+1}$</td>
<td align="center">$\texttt{+}$</td>
<td align="center">$\texttt{+}$</td>
<td align="center">$\texttt{+1}$</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">$\text{00:03}$</td>
<td align="center">$\text{00:12}$</td>
<td align="center">$\text{00:25}$</td>
<td align="center">$\text{00:44}$</td>
<td align="center">$\text{01:01}$</td>
<td align="center">$\text{01:16}$</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">补题</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center">√</td>
</tr>
</tbody></table>
<h2 id="A-There-Are-Two-Types-Of-Burgers"><a href="#A-There-Are-Two-Types-Of-Burgers" class="headerlink" title="A. There Are Two Types Of Burgers"></a><a href="https://codeforces.com/contest/1207/problem/A">A. There Are Two Types Of Burgers</a></h2><p>$\text{Solution:}$</p>
<p>看哪个贵就先做哪个，若还有剩余的面包就再做另一个。</p>
<h2 id="B-Square-Filling"><a href="#B-Square-Filling" class="headerlink" title="B. Square Filling"></a><a href="https://codeforces.com/contest/1207/problem/B">B. Square Filling</a></h2><p>$\text{Solution:}$</p>
<p>操作次数可以达到 $n^2$，故判断一下每一个小正方形是否能进行操作，最后检查操作后的矩阵是否为所求矩阵。</p>
<p>$\text{Extention:}$</p>
<p>找到一种操作次数最少的方案。</p>
<h2 id="C-Gas-Pipeline"><a href="#C-Gas-Pipeline" class="headerlink" title="C. Gas Pipeline"></a><a href="https://codeforces.com/contest/1207/problem/C">C. Gas Pipeline</a></h2><p>$\text{Solution:}$</p>
<p>定义 $dp_{i,1&#x2F;2}$ 表示当前进行到第 $i$ 个位置，且当前的高度为 $1&#x2F;2$ 的最小费用。</p>
<p>考虑通车和不通车的情况：</p>
<ul>
<li>通车：$dp_{i,2} &#x3D; dp_{i-1,2}+a+2b$；</li>
<li>不通车：$dp_{i,1}&#x3D;\min(dp_{i-1,1}+a+b,dp_{i-1,2}+2a+b)$,$dp_{i,2}&#x3D;\min(dp_{i-1,2}+a+2b,dp_{i-1,1}+2a+2b)$。</li>
</ul>
<p>注意第一个和最后一个的高度已被确定为 $1$，所以 $dp_{0,1}&#x3D;b,dp_{0,2}&#x3D;Inf$，最后答案为 $dp_{n,1}$。</p>
<h2 id="D-Number-Of-Permutations"><a href="#D-Number-Of-Permutations" class="headerlink" title="D. Number Of Permutations"></a><a href="https://codeforces.com/contest/1207/problem/D">D. Number Of Permutations</a></h2><p>$\text{Solution:}$</p>
<p>利用容斥原理，将答案转化为求总方案数减 $a$ 排好序的方案数减 $b$ 排好序的方案数加 $a,b$ 都排好序的方案数。</p>
<p>注意 $a,b$ 可能无法同时都排好序。</p>
<h2 id="E-XOR-Guessing"><a href="#E-XOR-Guessing" class="headerlink" title="E. XOR Guessing"></a><a href="https://codeforces.com/contest/1207/problem/E">E. XOR Guessing</a></h2><p>$\text{Solution:}$ </p>
<p>观察到这个数在二进制下不超过 $14$ 位，且每次询问 $100$ 个数。</p>
<p>故第一次询问，用 $100$ 个前 $7$ 位全部为 $1$ 的数，这样这个数前 $7$ 位就可以确定。</p>
<p>第二次询问，用 $100$ 个后 $7$ 位全部为 $1$ 的数，这样这个数的后 $7$ 为也可以确定。</p>
<p>最终将两次结果拼起来即可，因为 $2^7&#x3D;128&gt;100$，故一定能找到 $100$ 个前 $7$ 位相同或 $100$ 个后 $7$ 位相同的数。</p>
<h2 id="F-Remainder-Problem"><a href="#F-Remainder-Problem" class="headerlink" title="F. Remainder Problem"></a><a href="https://codeforces.com/contest/1207/problem/F">F. Remainder Problem</a></h2><p>$\text{Solution:}$</p>
<p>本题采用根号分治。</p>
<p>我们需要额外开一个数组 $sum_{i,j}$ 表示所有下标模 $i$ 余 $j$ 的数之和，但我们只需保存 $1\le i\le \sqrt{n},0\le j&lt;i$ 的情况。</p>
<ul>
<li>进行修改操作时，枚举 $1\le i \le \sqrt{n}$ 更新 $sum_{i,x\mod i}$，复杂度 $\mathcal{O}(\sqrt{n})$；</li>
<li>进行查询操作，若 $1\le x\le \sqrt{n}$，直接查 $sum$ 即可，复杂度 $\mathcal{O}(1)$，若 $x&gt;\sqrt{n}$，暴力查询即可，复杂度 $\mathcal{O}(\sqrt{n})$。</li>
</ul>
<p>总时间复杂度 $\mathcal{O}(n\sqrt{n})$，空间复杂度 $\mathcal{O}(n)$。</p>
<p><del>终于知道时限为什么给 $4$ 秒了。</del></p>
<h2 id="G-Indie-Album"><a href="#G-Indie-Album" class="headerlink" title="*G. Indie Album"></a><a href="https://codeforces.com/contest/1207/problem/G">*G. Indie Album</a></h2><p>$\text{Solution:}$</p>
<p>一道 AC 自动机的深层运用。</p>
<p>首先对于一棵字典树，求出每个节点 $i$ 的 $fail_i$，并连一条 $fail_i \rightarrow i$ 的有向边，称新建出的树为 $fail$ 树。</p>
<p>则有，字符串 $x$  在字符串 $y$ 中出现的次数为， $fail$ 树中 $x$ 的结束节点为根的子树中 $y$ 字符串的节点的数目。</p>
<p>将询问离线，在 $i$ 字符串结尾节点打入新字符串的结尾节点，然后搜索 $Trie$ 树，每到一个节点，节点权值 $+1$，碰到查询时需要查询子树和。</p>
<p>时间复杂度 $\mathcal{O}(|T|\log|T|)$。</p>
<p>$\text{Code: }$<a href="https://codeforces.com/contest/1207/submission/145308976">Submission #145308976 - Codeforces</a></p>
<h1 id="Educational-Codeforces-Round-122-text-1633"><a href="#Educational-Codeforces-Round-122-text-1633" class="headerlink" title="Educational Codeforces Round 122$\text{(1633)}$"></a>Educational Codeforces Round 122$\text{(1633)}$</h1><table>
<thead>
<tr>
<th align="center">$\text{Penalty}$</th>
<th align="center">$\texttt{A}$</th>
<th align="center">$\texttt{B}$</th>
<th align="center">$\texttt{C}$</th>
<th align="center">$\texttt{D}$</th>
<th align="center">$\texttt{E}$</th>
<th align="center">$\texttt{F}$</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$55$</td>
<td align="center">$\texttt{+}$</td>
<td align="center">$\texttt{+}$</td>
<td align="center">$\texttt{+}$</td>
<td align="center">$\texttt{+}$</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">$\text{00:02}$</td>
<td align="center">$\text{00:06}$</td>
<td align="center">$\text{00:17}$</td>
<td align="center">$\text{00:30}$</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">补题</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
</tbody></table>
<p>比赛时间： $\text{2022&#x2F;1&#x2F;31 22:35}$</p>
<h2 id="A-Div-7"><a href="#A-Div-7" class="headerlink" title="A. Div. 7"></a><a href="https://codeforces.com/contest/1633/problem/A">A. Div. 7</a></h2><p>$\text{Solution:}$</p>
<p>对于一个数 $x$，如果它能被 $7$ 整除，则不作修改直接输出，否则调整它的个位，找到一个能被 $7$ 整除的数输出。</p>
<p>因为每连续 $7$ 个数就会有一个被 $7$ 整除，所以一定会有一个数符合要求。</p>
<h2 id="B-Minority"><a href="#B-Minority" class="headerlink" title="B. Minority"></a><a href="https://codeforces.com/contest/1633/problem/B">B. Minority</a></h2><p>$\text{Solution:}$</p>
<p>不难想到将整个字符串全部选中的贡献。</p>
<p>若 $\texttt{0}$ 和 $\texttt{1}$ 的数量相等，我们只要去掉开头或结尾就取得最优答案；</p>
<p>若 $\texttt{0}$ 和 $\texttt{1}$ 的数量不等，我们全选就可以做到最优答案。</p>
<p>可以证明其它的选择一定不优于这么选择。</p>
<h2 id="C-Kill-the-Monster"><a href="#C-Kill-the-Monster" class="headerlink" title="C. Kill the Monster"></a><a href="https://codeforces.com/contest/1633/problem/C">C. Kill the Monster</a></h2><p>$\text{Solution:}$</p>
<p>硬币的数量很少，考虑枚举用来加血的硬币的数量，然后只需判断谁能赢即可。</p>
<p>时间复杂度 $\mathcal{O}(\sum k)$。</p>
<p>$\text{Extention:}$</p>
<p>$\sum k \le 10^9$</p>
<h2 id="D-Make-Them-Equal"><a href="#D-Make-Them-Equal" class="headerlink" title="D. Make Them Equal"></a><a href="https://codeforces.com/contest/1633/problem/D">D. Make Them Equal</a></h2><p>$\text{Solution:}$</p>
<p>一个最直接的想法：对于一个值 $x$，求出从 $1$ 操作到 $x$ 的最小次数 $v_x$，然后问题就变成了你有容量为 $k$ 的背包，和 $n$ 个体积 $v_i$，价值 $c_i$ 的物品，求最大的价值。</p>
<p>这不就是一个0-1背包的事。</p>
<p>但看了看范围 $n\le10^3,k\le10^6$，0-1背包复杂度是 $\mathcal{O}(nk)$，不可过啊。</p>
<p>但当你求出 $v$ 后发现：最大的 $v_x$ 竟然不超过 $12$，也就是操作数最多不会超过 $12n$。</p>
<p>那么我们可以先求一个 $sumv$，然后与 $k$ 取 $\min$，复杂度就降到了 $\mathcal{O}(12n^2)$。</p>
<p>$\text{Code: }$<a href="https://codeforces.com/contest/1633/submission/144900381">Submission #144900381 - Codeforces</a></p>
<h2 id="E-Spanning-Tree-Queries"><a href="#E-Spanning-Tree-Queries" class="headerlink" title="E. Spanning Tree Queries"></a><a href="https://codeforces.com/contest/1633/problem/E">E. Spanning Tree Queries</a></h2><p>$\text{Solution:}$</p>
<p>暴力做法是：对于一个询问，把边权都跑出来，然后做一次最小生成树，时间复杂度 $\mathcal{O}(qm\log m)$。</p>
<p>但细想之后，发现我们并不用对于每一次询问都跑一次最小生成树，如果边的大小关系没有因为这次询问而变化，那么选出的最小生成树边集还会由上一次的边集组成。</p>
<p>那么我们如何得知边的大小关系发生了改变呢？</p>
<p>比如，对于两条边 $x$ 和 $y$，它们的边权为 $w_x$ 和 $w_y$ 且 $w_x&lt;w_y$，设当前询问的值为 $v$。</p>
<ul>
<li>当 $v&lt; w_x$ 时，$w_x-v&lt;w_y-v$；</li>
<li>当 $w_x\le v&lt; \lfloor \dfrac{w_x+w_y}{2} \rfloor+1$ 时，$v-w_x \le w_y-v$；</li>
<li>当 $\lfloor \dfrac{w_x+w_y}{2}\rfloor +1\le v&lt; w_y$ 时，$v-w_x&gt;w_y-v$；</li>
<li>当 $v\ge w_y$ 时， $v-w_x&lt;v-w_y$。</li>
</ul>
<p>所以可得，对于每两条边，共有 $4$ 种情况，所以总共的情况也只有 $m^2$ 量级，可以接受。</p>
<p>那么我们只需将原边权与 $\lfloor \dfrac{w_x+w_y}{2}\rfloor+1$ 放入一个数组并排序，再将所有询问排序。</p>
<p>当询问的值又超过了一条新边的边权，代表有边的大小关系改变，我们需要重求一遍最小生成树；若这一次询问的并没有使边的大小关系发生改变，我们仍然可以用上一次最小生成树的结果，再加上这次询问对绝对值的贡献。</p>
<p>时间复杂度 $\mathcal{O}(q\log q+m^3\log m)$。</p>
<p>但如果把优先预处理出所有最小生成树的情况，询问的时候二分出对应的情况，复杂度会变为 $\mathcal{O}(q\log m^2+m^3\log m)$，稍有优化。</p>
<p>$\text{Code: }$<a href="https://codeforces.com/contest/1633/submission/144900383">Submission #144900383 - Codeforces</a></p>
<h2 id="F-Perfect-Matching"><a href="#F-Perfect-Matching" class="headerlink" title="*F. Perfect Matching"></a><a href="https://codeforces.com/contest/1633/problem/F">*F. Perfect Matching</a></h2><p>$\text{Solution:}$</p>
<p>依题意，分析满足完美匹配的条件。</p>
<p>我们有一种贪心的策略来检查是否可以完美匹配：定义一次匹配操作为选择当前最深的激活节点，与它的父亲之间连边，并删去这两个点，重复一次匹配操作，直到激活节点全部被清空即为完美匹配。时间复杂度 $\mathcal{O}(n)$。</p>
<p>观察到 $1$ 操作次数很多，而真正要求输出方案的 $2$ 操作数目很少，考虑能否快速有效地判断当前情形是否能完美匹配。</p>
<p>因为每次激活的节点必须与之前激活的节点连通，那么每次激活都会仅有一个包含全部激活节点的连通块，且连通块也是树，暂时称为激活树，考虑激活树有什么条件才能满足完美匹配。</p>
<p>我们先令一个节点，它的子树（包括自己）的总共的激活节点的数目为奇数，称之为奇数节点，反之称为偶数节点。</p>
<p>如果这棵激活树能够完美匹配，对于每一次匹配操作，取出的子节点和父节点当且仅当子节点是父节点唯一的儿子。</p>
<p>若此子节点不是父节点唯一的儿子，由匹配操作定义，树的结构如图所示：</p>
<img src="https://s2.loli.net/2022/02/02/BjsxLPJhRmHlCYi.png" alt="CF1633F-1.png" style="zoom:50%;" />

<p>删除 $u$ 和 $v_1$ 后，$v_2$ 与 $v_3$ 必然无法形成完美匹配，与假设矛盾。</p>
<p>那么每一次匹配，一定是一个奇数节点和一个偶数节点，且在删除后，其它节点的子树（包括自己）的总共的激活结点数目要么减 $2$，要么无变化。则其余的奇偶节点仍无变化。</p>
<p>故可推出一个重要结论：若激活树能完美匹配当且仅当奇数节点数目等于偶数节点数目。</p>
<p>那么现在问题就转化为了：</p>
<ul>
<li>添加一个点，翻转它的父亲到 $1$ 节点这条路径上所有节点的状态；</li>
<li>查询一个点到 $1$ 节点这条路径上奇数节点的数目。</li>
</ul>
<p>用树剖解决即可。</p>
<p>在进行 $2$ 操作时，只需 $dfs$ 一遍，求子树 $sz$，判断这个点是否为奇数节点，如果是就将此节点和其父亲连接。</p>
<p>时间复杂度 $\mathcal{O}(n\log^2 n)$。</p>
<p>$\text{Code: }$<a href="https://codeforces.com/contest/1633/submission/144900385">Submission #144900385 - Codeforces</a></p>
<h1 id="CodeTON-Round-1-text-1656"><a href="#CodeTON-Round-1-text-1656" class="headerlink" title="CodeTON Round 1$\text{(1656)}$"></a>CodeTON Round 1$\text{(1656)}$</h1><p>比赛时间： $\text{2022&#x2F;7&#x2F;28 08:30}$</p>
<table>
<thead>
<tr>
<th align="center">$\text{Score}$</th>
<th align="center">$\texttt{A}$</th>
<th align="center">$\texttt{B}$</th>
<th align="center">$\texttt{C}$</th>
<th align="center">$\texttt{D}$</th>
<th align="center">$\texttt{E}$</th>
<th align="center">$\texttt{F}$</th>
<th align="center">$\texttt{G}$</th>
<th align="center">$\texttt{H}$</th>
<th align="center">$\texttt{I}$</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$6098$</td>
<td align="center">$\texttt{496}$</td>
<td align="center">$\texttt{976}$</td>
<td align="center">$\texttt{1404}$</td>
<td align="center">$\texttt{1696}$</td>
<td align="center">$\texttt{1530}$</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">$\text{00:04}$</td>
<td align="center">$\text{00:10}$</td>
<td align="center">$\text{00:16}$</td>
<td align="center">$\text{00:38}$</td>
<td align="center">$\text{01:37}$</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">补题</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center">√</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">.</td>
</tr>
</tbody></table>
<p>为即将到来的 CodeTON Round 2 练习一下。</p>
<h2 id="A-Good-Pairs"><a href="#A-Good-Pairs" class="headerlink" title="A. Good Pairs"></a><a href="https://codeforces.com/contest/1656/problem/A">A. Good Pairs</a></h2><p>$\text{Solution:}$</p>
<p>考虑 $|a_i-a_k|+|a_k-a_j|&#x3D;|a_i-a_j|$ 什么时候成立，即找到 $a_i\le a_k\le a_j$ 的三元组，由于题目保证有解，所以取最小值和最大值就行。</p>
<h2 id="B-Subtract-Operation"><a href="#B-Subtract-Operation" class="headerlink" title="B. Subtract Operation"></a><a href="https://codeforces.com/contest/1656/problem/B">B. Subtract Operation</a></h2><p>$\text{Solution:}$</p>
<p>考虑 $n$ 个数为 $a_1,a_2\cdots,a_n$。第一次我们消去 $a_p$，则序列变为 $a_1-a_p,a_2-a_p,\cdots,a_n-a_p$。</p>
<p>再次消掉 $a_q$，则原序列变为 $(a_1-a_p)-(a_q-a_p),(a_2-a_p)-(a_q-a_p),\cdots,(a_n-a_p)-(a_q-a_p)$ 也就是 $a_1-a_q,a_2-a_q,\cdots,a_n-a_q$，这样我们可以发现，在第 $1\sim (n-2)$ 次选择的数全部被抵消，最后剩下一个 $a_x-a_y$ 的形式，直接用 map 维护一下有没有相差为 $k$ 的数。</p>
<h2 id="C-Make-Equal-With-Mod"><a href="#C-Make-Equal-With-Mod" class="headerlink" title="C. Make Equal With Mod"></a><a href="https://codeforces.com/contest/1656/problem/C">C. Make Equal With Mod</a></h2><p>$\text{Solution:}$</p>
<p>如果序列中没有 $1$，从最大数开始，一个一个模成 $0$，没有任何问题。</p>
<p>如果序列中存在 $1$，那么就需要将所有数都变成 $1$，对于最大数，我们要模最大数减 $1$，所以我们要判断是否有大小相差为 $1$ 的数，如果没有，即能满足要求。</p>
<h2 id="D-K-good"><a href="#D-K-good" class="headerlink" title="D. K-good"></a><a href="https://codeforces.com/contest/1656/problem/D">D. K-good</a></h2><p>$\text{Solution:}$</p>
<p>如果 $n$ 是 $k$-good 数，当且仅当：</p>
<p>$n&#x3D;pk+\dfrac{k(k-1)}{2},p\in \mathbb{N}$</p>
<p>考虑进一步转化：</p>
<p>$\Rightarrow 2n&#x3D;2pk+k(k-1)$</p>
<p>$\Rightarrow 2n&#x3D;k(2p+k-1)$</p>
<p>考虑 $k$ 和 $2p+k-1$ 的奇偶性不同，则一定是 $2$ 的正整数次幂和一个奇数相乘的组合，又因为 $k&lt;2p+k-1$，取 $k&#x3D;\min(2^m,\dfrac{2n}{2^m})$，如果 $k&#x3D;1$ 则输出 $-1$。</p>
<h2 id="E-Equal-Tree-Sums"><a href="#E-Equal-Tree-Sums" class="headerlink" title="E. Equal Tree Sums"></a><a href="https://codeforces.com/contest/1656/problem/E">E. Equal Tree Sums</a></h2><p>$\text{Solution:}$</p>
<p>记 $u$ 的子节点个数为 $k$，分别为 $v_1,v_2,\cdots,v_k$，$sum_u$ 表示以 $u$ 为根的子树权值和，以 $1$ 为根节点时，以 $u$ 为划分点，有如下的式子：</p>
<p>$sum_{v_1}&#x3D;sum_{v_2}&#x3D;\cdots&#x3D;sum_{v_k}&#x3D;sum_1-sum_u$</p>
<p>$sum_u&#x3D;a_u+\sum\limits_{i&#x3D;1}^{k}sum_{v_i}$</p>
<p>则 $a_u&#x3D;sum_u-\sum\limits_{i&#x3D;1}^ksum_{v_i}$</p>
<p>$&#x3D;sum_u-k(sum_1-sum_u)$</p>
<p>$&#x3D;(k+1)sum_u-ksum_1$</p>
<p>我们不妨假设树的总权值和为 $0$，那么就有：</p>
<p>$a_u&#x3D;(k+1)sum_u$</p>
<p>$sum_{v_1}&#x3D;sum_{v_2}&#x3D;\cdots&#x3D;sum_{v_k}&#x3D;-sum_u$</p>
<p>这样 $sum_u&#x3D;(k+1)sum_u-ksum_u&#x3D;sum_u$，刚好满足。</p>
<p>具体实现的话，可以使 $sum_u&#x3D;(-1)^{dep_u}$，$sum_1&#x3D;0$，就能构造出合法权值。</p>
<h2 id="F-Parametric-MST"><a href="#F-Parametric-MST" class="headerlink" title="F. Parametric MST"></a><a href="https://codeforces.com/contest/1656/problem/F">F. Parametric MST</a></h2><p>$\text{Solution:}$</p>
<p>不妨先将 $a$ 按升序排序，考虑设 $b_u(t)&#x3D;a_u+t$。</p>
<p>那么 $w_{i,j}(t)&#x3D;(a_i+t)(a_j+t)-t^2&#x3D;b_i(t)b_j(t)-t^2$，也就是当 $i,t$ 一定时，$w_{i,j}(t)$ 有最小值：</p>
<ul>
<li>当 $b_i(t)&lt;0$ 时，取 $b(t)$ 的最大值，即 $j&#x3D;n$；</li>
<li>当 $b_i(t)&gt;0$ 时，取 $b(t)$ 的最小值，即 $j&#x3D;1$。</li>
</ul>
<p>那么我们对于一个 $t$，就有如下的连边方式：</p>
<ol>
<li>如果 $b_i(t)&lt;0,i\neq n$，$i$ 向 $n$ 连边。</li>
<li>如果 $b_i(t)&gt;0,i\neq 1$，$i$ 向 $1$ 连边。</li>
<li>如果 $(1,n)$ 间重边，删去一条。</li>
</ol>
<p>这样连边构成了一棵树，且是 $K_n(t)$ 的最小生成树。</p>
<p>我们不妨考虑当 $t$ 取 $(-\infty,-a_n)$ 与 $(-a_1,+\infty)$ 时的函数。</p>
<p>当 $t\in (-\infty,-a_n]$ 时，$b_1(t)\le b_2(t)\le \cdots\le b_n(t)&lt; 0$，那么最小生成树为 $1\sim n-1$ 向 $n$ 连边。</p>
<p>$K_n(t)&#x3D;a_n(sum-a_n)+t\cdot((n-1)a_n+(sum-a_1))$</p>
<p>$&#x3D;((n-2)a_n+sum)t+a_n(sum-a_n)$</p>
<p>这是一个一次函数的形式，当斜率 $(n-2)a_n+sum&lt;0$ 时， $\lim\limits_{t\to -\infty}K_n(t)&#x3D;+\infty$，无最大值。</p>
<p>当 $t\in[-a_1,+\infty]$ 时，同理，得斜率 $(n-2)a_1+sum&gt;0$ 时，无最大值。</p>
<p>接下来考虑 $[-a_n,-a_1]$ 的情况。</p>
<p>一个结论是 $t$ 需要取在 $-a_i$ 上，若在两个相反数之间，因为一段之间是一次函数，必定在端点上取最小值。</p>
<p>那么我们考虑 $t$ 从 $-a_1$ 开始 $-a_i\rightarrow -a_{i+1}$，函数的变化。</p>
<p>考虑 $K_n(-a_1)&#x3D;((n-2)a_1+sum)(-a_1)+a_1(sum-a_1)$</p>
<p>由于整个函数是连续的，则 $K_n(-a_2)&#x3D;((n-2)a_1+sum)(-a_2)+a_1(sum-a_1)$，即斜率暂时不变。</p>
<p>那么函数变化为：$-((n-2)a_1+sum)a_1\rightarrow-((n-2)a_1+sum)a_2$，即当前斜率 $k*(-a_2-(-a_1))$。</p>
<p>当转成新一部分的斜率时，斜率从 $((n-2)a_1+sum)$ 变为 $((n-2)a_1+(sum-a_1-a_2)+a_n-a_2)&#x3D;((n-3)a_1+sum+a_n)$，改变为 $-a_1+a_n$。</p>
<p>这样我们就解决了这道题。</p>
<p>时间复杂度上界为排序的 $\mathcal{O}(n\log n)$。</p>
<p>$\text{Code: }$	<a href="https://codeforces.com/contest/1656/submission/165986233">Submission #165986233 - Codeforces</a></p>
<h1 id="Codeforces-Global-Round-21-text-1696"><a href="#Codeforces-Global-Round-21-text-1696" class="headerlink" title="Codeforces Global Round 21$\text{(1696)}$"></a>Codeforces Global Round 21$\text{(1696)}$</h1><p>比赛时间：$\text{2022&#x2F;7&#x2F;30 08:30}$</p>
<table>
<thead>
<tr>
<th align="center">$\text{Score}$</th>
<th align="center">$\texttt{A}$</th>
<th align="center">$\texttt{B}$</th>
<th align="center">$\texttt{C}$</th>
<th align="center">$\texttt{D}$</th>
<th align="center">$\texttt{E}$</th>
<th align="center">$\texttt{F}$</th>
<th align="center">$\texttt{G}$</th>
<th align="center">$\texttt{H}$</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$4040$</td>
<td align="center">$\texttt{492}$</td>
<td align="center">$\texttt{964}$</td>
<td align="center">$\texttt{1216}$</td>
<td align="center">$\texttt{1368}$</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">$\text{00:04}$</td>
<td align="center">$\text{00:09}$</td>
<td align="center">$\text{00:39}$</td>
<td align="center">$\text{01:19}$</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">补题</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center">√</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">.</td>
</tr>
</tbody></table>
<h2 id="A-NIT-orz"><a href="#A-NIT-orz" class="headerlink" title="A. NIT orz!"></a><a href="https://codeforces.com/contest/1696/problem/A">A. NIT orz!</a></h2><p>$\text{Solution:}$</p>
<p>因为 $z$ 只能被进行<strong>与</strong>操作，也就是 $z$ 在二进制下 $1$ 的个数越来越少，所以我们不如用最开始的 $z$ 去和 $a$ 中的数进行<strong>或</strong>操作求得最大值。</p>
<h2 id="B-NIT-Destroys-the-Universe"><a href="#B-NIT-Destroys-the-Universe" class="headerlink" title="B. NIT Destroys the Universe"></a><a href="https://codeforces.com/contest/1696/problem/B">B. NIT Destroys the Universe</a></h2><p>$\text{Solution:}$</p>
<p>首先，进行两次 $l&#x3D;1,r&#x3D;n$ 的操作就能使 $a_i&#x3D;0$，所以答案上限是 $2$。</p>
<p>如果序列中只有 $1$ 段连续的不为 $0$ 的数，那么答案为 $1$，如果全 $0$ 答案是 $0$。</p>
<h2 id="C-Fishingprince-Plays-With-Array"><a href="#C-Fishingprince-Plays-With-Array" class="headerlink" title="C. Fishingprince Plays With Array"></a><a href="https://codeforces.com/contest/1696/problem/C">C. Fishingprince Plays With Array</a></h2><p>$\text{Solution:}$</p>
<p>考虑两种操作是<strong>互逆的</strong>，也就是如果我们把某个数分开，可以随时合回来。</p>
<p>那么可以先将 $a$ 序列和 $b$ 序列能拆分的全部拆分，即 $qa_i$ 和 $ta_i$ 表示 $a_i$ 能拆成的最小数和拆出的个数，$qb_i$ 和 $tb_i$ 表示 $b_i$ 能拆成的最小数和拆出的个数。</p>
<p>考虑只有一段连续相同 $qa$ 和 $qb$ 才能合并，计算 $\sum ta$，判断 $qb$ 是否等于 $qa$ 且 $\sum tb$ 是否等于 $\sum ta$，不断用指针向前移动，最后两串全部匹配成功就输出 <code>Yes</code>。</p>
<h2 id="D-Permutation-Graph"><a href="#D-Permutation-Graph" class="headerlink" title="D. Permutation Graph"></a><a href="https://codeforces.com/contest/1696/problem/D">D. Permutation Graph</a></h2><p>$\text{Solution:}$</p>
<p>我们先得到整个数组 $a$ 的最大值编号为 $id$，不难发现 $[1,id-1]$ 无法向 $[id+1,n]$ 连边，那么我们就必须先想办法从 $[1,id-1]$ 跳到 $id$ 再去跳到 $[id+1,n]$。</p>
<p>接下来去考虑 $[1,id-1]$ 中的最小值为 $p$。首先 $[1,p-1]$ 肯定可以走到 $p$，而 $p$ 肯定能跳到 $id$，所以我们就不必去管 $[p+1,id-1]$，因为答案不优。这样我们就递归到了一个更小的区间。</p>
<p>$[id+1,n]$ 的考虑也是同理，找到最小值后，但这次我们只需求靠右的区间即可。</p>
<p>本题中需要注意两个点：</p>
<ul>
<li>如果当前求的区间最大值，接下来递归时就有改求区间最小值，然后再次递归再求区间最大值，即每次最大最小转换。</li>
<li>如果当前求的最小值就在 $1$ 或 $n$，则可以省去这一步。</li>
</ul>
<p>具体维护上，带一个 log 也可以，复杂度 $\mathcal{O}(n\log n)$。</p>
<h2 id="E-Placing-Jinas"><a href="#E-Placing-Jinas" class="headerlink" title="E. Placing Jinas"></a><a href="https://codeforces.com/contest/1696/problem/E">E. Placing Jinas</a></h2><p>$\text{Solution:}$</p>
<p>首先，不难发现，本题并不是最优解问题，因为移动的步数确定，我们只要考虑移动需要多少步。</p>
<p>我们考虑 $f(x,y)$ 为点 $(x,y)$ 的操作次数，那么答案为 $\sum\limits_{i&#x3D;0}^n\sum\limits_{j&#x3D;0}^{a_i}f(i,j)$。</p>
<p>不难发现 $f(x,0)&#x3D;1,f(0,y)&#x3D;1,f(x,y)&#x3D;f(x-1,y)+f(x,y-1)$。即 $f(x,y)&#x3D;{x+y\choose x}$ 。（斜着的杨辉三角）</p>
<p>算到这是 $O(n^2)$ 的，但是推过结论的应该已经都会了，这里再来推一下：</p>
<p>考虑第 $i$ 行的贡献：</p>
<p>$\sum\limits_{j&#x3D;0}^{a_i-1}f(i,j)&#x3D;\sum\limits_{j&#x3D;0}^{a_i-1}{i+j\choose i}&#x3D;\sum\limits_{j&#x3D;0}^{a_i-1}\dfrac{A_{i+j}^i}{A_i^i}&#x3D;\dfrac{\sum\limits_{j&#x3D;0}^{a_i-1} A_{i+j}^i}{A_i^i}$</p>
<p>而 $\sum\limits_{j&#x3D;0}^{a_i-1} A_{i+j}^i$ 是整数裂项的形式，化简后为 $\dfrac{\prod\limits_{j&#x3D;a_i-1}^{a_i+i}j}{i+1}&#x3D;\dfrac{A_{a_i+i}^{a_i+i}}{(i+1)A_{a_i-1}^{a_i-1}}$</p>
<p>最终 $\sum\limits_{j&#x3D;0}^{a_i}f(i,j)&#x3D;\dfrac{A_{a_i+i}^{a_i+i}}{(i+1)A_{a_i-1}^{a_i-1}A_i^i}&#x3D;\dfrac{A_{a_i+i}^{a_i+i}}{A_{a_i-1}^{a_i-1}A_{i+1}^{i+1}}&#x3D;{a_i+i\choose a_i-1}$。</p>
<p>于是预处理阶乘和逆元，复杂度为 $\mathcal{O}(n)$。</p>
<h1 id="CodeTON-Round-2-text-1704"><a href="#CodeTON-Round-2-text-1704" class="headerlink" title="CodeTON Round 2$\text{(1704)}$"></a>CodeTON Round 2$\text{(1704)}$</h1><p>比赛时间：$\text{2022&#x2F;7&#x2F;31 22:05}$</p>
<table>
<thead>
<tr>
<th align="center">$\text{Score}$</th>
<th align="center">$\texttt{A}$</th>
<th align="center">$\texttt{B}$</th>
<th align="center">$\texttt{C}$</th>
<th align="center">$\texttt{D}$</th>
<th align="center">$\texttt{E}$</th>
<th align="center">$\texttt{F}$</th>
<th align="center">$\texttt{G}$</th>
<th align="center">$\texttt{H1}$</th>
<th align="center">$\texttt{H2}$</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$3406$</td>
<td align="center">$\texttt{489}$</td>
<td align="center">$\texttt{719}$</td>
<td align="center">$\texttt{1130}$</td>
<td align="center">$\texttt{1068}$</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">$\text{00:07}$</td>
<td align="center">$\text{00:13}$</td>
<td align="center">$\text{00:30}$</td>
<td align="center">$\text{01:44}$</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">补题</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">.</td>
</tr>
</tbody></table>
<p>打的仍然没有达到我的预期。</p>
<p>$\texttt{AB}$ 做的较慢，但靠 $\texttt{C}$ 挽救了回来，而 $\texttt{D}$ 挂了两发还是很晚才过，况且写法复杂，结论靠猜，算是实力缺陷的体现。</p>
<p>不过说实话，以现在的水平，真的无法快速想到 $\texttt{D}$ 的性质，希望能有四十分钟开出前 $4$ 题的时候吧。</p>
<h2 id="A-Two-0-1-Sequences"><a href="#A-Two-0-1-Sequences" class="headerlink" title="A. Two 0-1 Sequences"></a><a href="https://codeforces.com/contest/1704/problem/A">A. Two 0-1 Sequences</a></h2><p>$\text{Solution:}$</p>
<p>每次操作只能改 $a$ 串的前两位，所以 $a$ 的后 $m-1$ 位不能动，这样只需匹配 $a$ 和 $b$ 的后 $m-1$ 位，再看 $a$ 的 $1\sim n-m+1$ 位有没有 $b_1$。</p>
<h2 id="B-Luke-is-a-Foodie"><a href="#B-Luke-is-a-Foodie" class="headerlink" title="B. Luke is a Foodie"></a><a href="https://codeforces.com/contest/1704/problem/B">B. Luke is a Foodie</a></h2><p>$\text{Solution:}$</p>
<p>考虑如果一段连续的区间的最大值和最小值相差超过 $2x$，那么一定需要更换。那么我们只需模拟一下，看看哪些地方需要更换即可。</p>
<h2 id="C-Virus"><a href="#C-Virus" class="headerlink" title="C. Virus"></a><a href="https://codeforces.com/contest/1704/problem/C">C. Virus</a></h2><p>$\text{Solution:}$</p>
<p>用最开始被感染的房屋将所有房子划分为若干个小段，我们可以用两天把一段区间的边界给保护，这样中间全都不用保护，现在考虑进行这个操作的顺序。</p>
<p>不难想到应该从大区间往小区间封闭，因为每天每段区间会有两个房子被感染，而如果一段区间被感染完就不会再被感染，所以先去保护大区间，小区间可能在中途被感染完，损耗的房屋更少。</p>
<h2 id="D-Magical-Array"><a href="#D-Magical-Array" class="headerlink" title="D. Magical Array"></a><a href="https://codeforces.com/contest/1704/problem/D">D. Magical Array</a></h2><p>$\text{Solution:}$</p>
<p>考场上想的做法是将 $c$ 数组用反操作处理，选择最靠两段的数，把它往中间移动，最后合并的不能合为止。然后发现有 $m-1$ 个序列是一样的，找到特殊序列后，通过观察样例发现 $2$ 操作次数，就是合并后特殊序列进行多少次单独的移动得到非特殊序列，然后就通过了，做法猜的东西很多。</p>
<p>题解是这样的：</p>
<p>设每一位的权值为 $a_i\times i$。则非特殊序列的其中四个位置 $(i,i+1,j-1,j)$ 的权值为 $a_i\times i+a_{i+1}\times(i+1)+a_{j-1}\times(j-1)+a_j\times j$，进行 $(i+1,j-1)$ 操作 $1$ 后，仍然考虑这 $4$ 个位置的权值和，其它位置的权值不变。</p>
<p>$(a_i+1)\times i+(a_{i+1}-1)\times(i+1)+(a_{j-1}-1)\times(j-1)+(a_j+1)\times j$</p>
<p>$&#x3D;a_i\times i+a_{i+1}\times(i+1)+a_{j-1}\times(j-1)+a_j\times j+i-(i+1)-(j-1)+j$</p>
<p>$&#x3D;a_i\times i+a_{i+1}\times(i+1)+a_{j-1}\times(j-1)+a_j\times j$</p>
<p>所以在操作后总权值不变，这样求出 $\sum a_i\times i$ 就能找出特殊数组。</p>
<p>考虑进行一次操作 $2$ 权值的变化情况，考虑 $(i,i+1,j-2,j)$。</p>
<p>$(a_i+1)\times i+(a_{i+1}-1)\times(i+1)+(a_{j-2}-1)\times(j-2)+(a_j+1)\times j$</p>
<p>$&#x3D;a_i\times i+a_{i+1}\times(i+1)+a_{j-2}\times(j-2)+a_j\times j+i-(i+1)-(j-2)+j$</p>
<p>$&#x3D;a_i\times i+a_{i+1}\times(i+1)+a_{j-2}\times(j-2)+a_j\times j+1$</p>
<p>每次 $2$ 操作后，数组的总权值和加 $1$，这样我们用非特殊序列的权值和减特殊序列的权值和，即能得到 $2$ 操作次数。</p>
<p>这个方法完美的避开了具体的构造方案，对序列定义一个权值，使操作有了固定的性质，成为了一个充要条件。</p>
<p>时间复杂度 $\mathcal{O}(n)$。</p>
<h2 id="E-Count-Seconds"><a href="#E-Count-Seconds" class="headerlink" title="E. Count Seconds"></a><a href="https://codeforces.com/contest/1704/problem/E">E. Count Seconds</a></h2><p>$\text{Solution:}$</p>
<p>首先<strong>只有一个点没有出边</strong>，称其为汇点。</p>
<p>我们考虑先模拟前 $n$ 轮，目的是如果经过 $n$ 轮后，$a_u$ 仍然有值，那么 $u$ 到汇点整条上路径的点值都会大于 $0$，保证每个不为 $0$ 的位置能直接贡献到汇点。</p>
<p>然后还剩下的每一点权值都能多撑一个单位的时间，跑个拓扑排序计算总和即可，别忘了加上开始模拟的时间。</p>
<p>如果模拟不到 $n$ 轮就结束了，记得特判。</p>
<p>时间复杂度 $\mathcal{O}(n^2)$。</p>
<h2 id="F-Colouring-Game"><a href="#F-Colouring-Game" class="headerlink" title="F. Colouring Game"></a><a href="https://codeforces.com/contest/1704/problem/F">F. Colouring Game</a></h2><p>$\text{Solution:}$</p>
<p>一次操作最少可改变自己的 $1$ 个字符，如果 $\texttt{R}$ 和 $\texttt{B}$ 的个数不同，那么一定个数多的赢。</p>
<p>当 $\texttt{R}$ 和 $\texttt{B}$ 的个数相同时，记一段 $\texttt{RBRB}\cdots$  的长度为 $l$。那么每次每个人都会选择一段 $\texttt{RB}$ 或 $\texttt{BR}$ 消掉，两人可以同时操作且操作后局面相同，是公平博弈论，可以求 $SG$ 函数。</p>
<p>$SG_l&#x3D;\text{mex}(SG_{i-1}\oplus SG_{l-i-1})$</p>
<p>求出 $SG$ 后发现，当 $l\ge 69$ 时，有长度为 $34$ 的循环节，所以只用打表前 $34\times3&#x3D;102$ 位 $SG$ 就足够。</p>
<h1 id="Codeforces-Round-809-Div-2-text-1706"><a href="#Codeforces-Round-809-Div-2-text-1706" class="headerlink" title="Codeforces Round #809 (Div. 2)$\text{(1706)}$"></a>Codeforces Round #809 (Div. 2)$\text{(1706)}$</h1><p>比赛时间：$\text{2022&#x2F;7&#x2F;18 22:35}$</p>
<table>
<thead>
<tr>
<th align="center">$\text{Score}$</th>
<th align="center">$\texttt{A}$</th>
<th align="center">$\texttt{B}$</th>
<th align="center">$\texttt{C}$</th>
<th align="center">$\texttt{D1}$</th>
<th align="center">$\texttt{D2}$</th>
<th align="center">$\texttt{E}$</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$2214$</td>
<td align="center">$\texttt{494}$</td>
<td align="center">$\texttt{920}$</td>
<td align="center">$\texttt{800}$</td>
<td align="center">$\texttt{-1}$</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">$\text{00:03}$</td>
<td align="center">$\text{00:20}$</td>
<td align="center">$\text{01:00}$</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">补题</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
</tbody></table>
<p>这打的是什么垃圾，策略有误而且能力还有欠缺。</p>
<h2 id="A-Another-String-Minimization-Problem"><a href="#A-Another-String-Minimization-Problem" class="headerlink" title="A. Another String Minimization Problem"></a><a href="https://codeforces.com/contest/1706/problem/A">A. Another String Minimization Problem</a></h2><p>$\text{Solution:}$</p>
<p>按题意模拟，注意要先改靠前的位置。</p>
<h2 id="B-Making-Towers"><a href="#B-Making-Towers" class="headerlink" title="B. Making Towers"></a><a href="https://codeforces.com/contest/1706/problem/B">B. Making Towers</a></h2><p>$\text{Solution:}$</p>
<p>考虑一个相同颜色的塔，由于必须得连着，只能先往右&#x2F;左走几次，到下一行后再往左&#x2F;有走几次，也就是说只有每两个之间相距偶数个才能放在同一列上。</p>
<p>随便写写就过了。</p>
<h2 id="C-Qpwoeirut-And-The-City"><a href="#C-Qpwoeirut-And-The-City" class="headerlink" title="C. Qpwoeirut And The City"></a><a href="https://codeforces.com/contest/1706/problem/C">C. Qpwoeirut And The City</a></h2><p>$\text{Solution:}$</p>
<p>这题开始以为需要 dp，但其实只需要模拟，因为偶数的情况看似复杂，实际上只有 $2$ 类：</p>
<ul>
<li>全都在奇数或偶数格；</li>
<li>有一对相距两格且<strong>前者必须在奇数格上</strong>，而其余<strong>位置固定</strong>。</li>
</ul>
<p>这样就很好写了，忘记前缀和优化还挂了一发，真是服了。</p>
<p>时间复杂度 $\mathcal{O}(n)$。</p>
<h2 id="D-Chopping-Carrots"><a href="#D-Chopping-Carrots" class="headerlink" title="D. Chopping Carrots"></a><a href="https://codeforces.com/contest/1706/problem/D2">D. Chopping Carrots</a></h2><p>$\text{Solution:}$</p>
<p>简单版做法很多，由于对于 $\lfloor \dfrac{a_i}{p_i}\rfloor$，不同的取值最多只有 $2\sqrt{a_i}$，直接将所有取值都记下来，按<a href="https://www.luogu.com.cn/problem/P7514">P7514 [省选联考 2021 A&#x2F;B 卷] 卡牌游戏</a>做即可。</p>
<p>复杂版无法支持我们存储所有取值，那么我们可以枚举 $\lfloor \dfrac{a_1}{p_1}\rfloor$ 的所有可能取值，记为 $b$，然后找到 $a_2\sim a_n$ 得到的小于等于 $b$ 的最大值和大于等于 $b$ 的最小值，再用双指针更新答案。时间复杂度 $\mathcal{O}(\sqrt{a_1}\times n\log n)$，自带大常数容易被卡常。</p>
<p>下面参考题解的 $\text{Solution 2}$，可以作为一个很好的 $\text{idea}$。</p>
<blockquote>
<p>假定 $v$ 为 $\lfloor \dfrac{a_i}{p_i}\rfloor$ 的最大值，则我们只需最大化 $\lfloor \dfrac{a_i}{p_i}\rfloor$ 的最小值。</p>
<p>考虑如果 $1\le a_i\le v$，则我们希望将 $p_i$ 取为 $1$，取 $2$ 及以上答案不优。</p>
<p>如果 $v+1\le a_i\le 2v$，则我们希望将 $p_i$ 取为 $2$，以此类推。</p>
<p>如果 $(u-1)\cdot v+1\le a_i \le u\cdot v$，则我们希望将 $p_i$ 取为 $u$。</p>
<p>但是我们如何对于满足 $(u-1)\cdot v+1\le a_i \le u\cdot v$ 的所有的 $a_i$ 计算最小值？不难发现，这些数的 $p_i$ 均取 $u$，所以我们只需求出这部分数的最小值即可。</p>
<p>记 $next_i$ 为所有 $a_i$ 中大于等于 $i$ 的最小值，这可以通过预处理轻松求出，这样，我们对于 $u&#x3D;1\sim k$，查询 $next_{(u-1)\cdot v+1}$ 就能得到。</p>
<p>两个重要的细节：</p>
<ol>
<li>如果存在 $a_i\ge(v+1)\cdot k$，那么 $v$ 就不可能作为最大值，直接跳过。</li>
<li>对于某个 $v$，我们只需要检查满足 $(u-1)\cdot v+1\le a_n$ 的 $u$，更大的没有意义。</li>
</ol>
<p>最后时间复杂度 $\mathcal{O}(\sum\limits_{i&#x3D;1}^{a_n}\dfrac{a_n}{a_i})&#x3D;\mathcal{O}(a_n \log a_n)$。</p>
</blockquote>
<p>这个复杂度居然连根号都不带，不得不说非常优秀。</p>
<h2 id="E-Qpwoeirut-and-Vertices"><a href="#E-Qpwoeirut-and-Vertices" class="headerlink" title="E. Qpwoeirut and Vertices"></a><a href="https://codeforces.com/contest/1706/problem/E">E. Qpwoeirut and Vertices</a></h2><p>$\text{Solution:}$</p>
<p>考虑将第 $i$ 条给定的边给定一个边权 $i$，然后跑一个最小生成树。通过最小生成树的性质，任意两点之间都有唯一路径，且涵盖的边权最大值尽可能小，正好符合我们的要求。</p>
<p>我们通过倍增求最近公共祖先，就能有两点之间的路径上的边权最大值，考虑如何拓展到 $[l,r]$ 区间任意两点。</p>
<p>由于我们只需对所有被经过的边取最大值，我们可以只去求相邻两点的最近公共祖先，就能涵盖到所有要求的路径。（想一想应该也可以理解）</p>
<p>最后用倍增就能得到答案。</p>
<p>时间复杂度 $\mathcal{O}(n\log n)$。</p>
<h1 id="Codeforces-Round-808-text-1707"><a href="#Codeforces-Round-808-text-1707" class="headerlink" title="Codeforces Round #808$\text{(1707)}$"></a>Codeforces Round #808$\text{(1707)}$</h1><p>比赛时间：$\text{2022&#x2F;7&#x2F;16 22:35}$</p>
<table>
<thead>
<tr>
<th align="center">$\text{Score}$</th>
<th align="center">$\texttt{2A}$</th>
<th align="center">$\texttt{2B}$</th>
<th align="center">$\texttt{2C&#x2F;1A}$</th>
<th align="center">$\texttt{2D&#x2F;1B}$</th>
<th align="center">$\texttt{2E&#x2F;1C}$</th>
<th align="center">$\texttt{2F&#x2F;1D}$</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$1452$</td>
<td align="center">$\texttt{492}$</td>
<td align="center">$\texttt{960}$</td>
<td align="center">$\texttt{-3}$</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">$\text{00:04}$</td>
<td align="center">$\text{00:10}$</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">补题</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">.</td>
</tr>
</tbody></table>
<h2 id="2A-Difference-Operations"><a href="#2A-Difference-Operations" class="headerlink" title="2A. Difference Operations"></a><a href="https://codeforces.com/contest/1708/problem/A">2A. Difference Operations</a></h2><p>$\text{Solution:}$</p>
<p>不妨从 $a_2$ 开始考虑，因为 $a_2$ 进行的操作只有减去 $a_1$，所以 $a_2$ 必须是 $a_1$ 的倍数，然后我们就可以将 $a_2$ 减去若干个 $a_1$ 后变成 $a_1$。</p>
<p>考虑 $a_3$ 及以后的数也是如此，所以序列满足条件当且仅当 $a_i$ 都是 $a_1$ 的倍数，其中 $2\le i\le n$。</p>
<h2 id="2B-Difference-of-GCDs"><a href="#2B-Difference-of-GCDs" class="headerlink" title="2B. Difference of GCDs"></a><a href="https://codeforces.com/contest/1708/problem/B">2B. Difference of GCDs</a></h2><p>$\text{Solution:}$</p>
<p>显然 $\gcd(i,a_i) \le \min(i,a_i)\le i$，又因为题目要求 $\forall 1\le i\le n$，$\gcd(i, a_i)$ 互不相等，所以 $\gcd(i,a_i)&#x3D;i$。</p>
<p>那么只需在 $l\sim r$ 看有没有 $i$ 的倍数即可，否则输出 <code>-1</code>。</p>
<h2 id="2C-x2F-1A-Doremy’s-IQ"><a href="#2C-x2F-1A-Doremy’s-IQ" class="headerlink" title="2C&#x2F;1A. Doremy’s IQ"></a><a href="https://codeforces.com/contest/1707/problem/A">2C&#x2F;1A. Doremy’s IQ</a></h2><p>$\text{Solution:}$</p>
<p>场上被骗的一道题目，如果正向考虑，肯定是希望做减智商的测试越晚越好，但不容易实现。</p>
<p>那就反向考虑，设初始智商为 $0$，倒向做测试，遇到做不动的智商 $+1$，智商最多加到 $q$，这样如果我们遇到一个做不动的测试，但智商还没加到 $q$，那么我们一定要去做，因为智商越高，后面更有可能完成更多测试。</p>
<p>时间复杂度 $\mathcal{O}(n)$。</p>
<h2 id="2D-x2F-1B-Difference-Array"><a href="#2D-x2F-1B-Difference-Array" class="headerlink" title="2D&#x2F;1B. Difference Array"></a><a href="https://codeforces.com/contest/1707/problem/B">2D&#x2F;1B. Difference Array</a></h2><p>$\text{Solution:}$</p>
<p>不妨来证明暴力做法复杂度的正确性。</p>
<p>我们设每次操作后并忽略 $0$ 的 $a$ 数组总和为 $S$，$S&#x3D;\sum\limits_{i&#x3D;1}^ma_i$，且根据题意有 $\forall1&lt;i\le m$，$a_{i+1}-a_{i}&gt;0$。</p>
<p>$S&#x3D;\sum\limits_{i&#x3D;1}^ma_i\ge m-1+a_m$</p>
<p>那么差分一次后的数组变为 $a_2-a_1,a_3-a_2,\cdots,a_m-a_{m-1}$，现在的总和 $S’&#x3D;a_m-a_1\le a_m$。</p>
<p>原本大于等于 $a_m+m-1$，现在小于等于 $a_m$，说明每次至少减少了 $m-1$，在第一次差分后，数组总和不超过 $a_n$，那么最坏情况的复杂度就为 $\mathcal{O}(A\log A)$，其中 $A&#x3D;\max(n,a_n)$。</p>
<h2 id="2E-x2F-1C-DFS-Trees"><a href="#2E-x2F-1C-DFS-Trees" class="headerlink" title="2E&#x2F;1C. DFS Trees"></a><a href="https://codeforces.com/contest/1707/problem/C">2E&#x2F;1C. DFS Trees</a></h2><p>$\text{Solution:}$</p>
<p>这题有个结论：如果 $\text{findMST(u)}$ 得到的生成树为最小生成树，那么图中没有交叉边。</p>
<p>关于交叉边的定义，我们可以用一个例子理解。</p>
<img src="https://s2.loli.net/2022/07/18/doOfyY3MSw2NZqb.jpg" alt="CF1707C-1.jpg" style="zoom:50%;" />

<p>白边为生成树边，则红边为交叉边，而蓝边不是交叉边，即交叉边的最近公共祖先不为边的端点。</p>
<p>至于上面的结论为什么成立，现在还不太知道，先硬记一下吧。</p>
<p>那么对于每条非树边，如果能作为以 $u$ 为根的生成树的交叉边，那么 $\text{findMST(u)}$ 就得不到最小生成树。</p>
<p>我们以 $1$ 为根节点，跑出最小生成树，对于一条非树边 $(u,v)$：</p>
<ul>
<li>$lca&#x3D;u$ 或 $lca&#x3D;v$，那么以 $u,v$ 这条路径中间的点（不包括 $u,v$）为根，$(u,v)$ 就会作为一条交叉边，这些点都得不到最小生成树。</li>
<li>否则，那么从 $1$ 到 $u$ 的父节点和 $1$ 到 $v$ 的父节点的路径就全部得不到最小生成树。</li>
</ul>
<p>最后统计答案即可，维护方法有很多，时间复杂度 $\mathcal{O}(n\log n)$。</p>
<h1 id="Educational-Codeforces-Round-132-text-1709"><a href="#Educational-Codeforces-Round-132-text-1709" class="headerlink" title="Educational Codeforces Round 132$\text{(1709)}$"></a>Educational Codeforces Round 132$\text{(1709)}$</h1><p>比赛时间：$\text{2022&#x2F;7&#x2F;21 22:35}$</p>
<table>
<thead>
<tr>
<th align="center">$\text{Penalty}$</th>
<th align="center">$\texttt{A}$</th>
<th align="center">$\texttt{B}$</th>
<th align="center">$\texttt{C}$</th>
<th align="center">$\texttt{D}$</th>
<th align="center">$\texttt{E}$</th>
<th align="center">$\texttt{F}$</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$112$</td>
<td align="center">$\texttt{+}$</td>
<td align="center">$\texttt{+}$</td>
<td align="center">$\texttt{+}$</td>
<td align="center">$\texttt{+1}$</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">$\text{00:03}$</td>
<td align="center">$\text{00:16}$</td>
<td align="center">$\text{00:33}$</td>
<td align="center">$\text{00:50}$</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">补题</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center">√</td>
<td align="center">.</td>
</tr>
</tbody></table>
<h2 id="A-Three-Doors"><a href="#A-Three-Doors" class="headerlink" title="A. Three Doors"></a><a href="https://codeforces.com/contest/1709/problem/A">A. Three Doors</a></h2><p>$\text{Solution:}$</p>
<p><del>太难了，不会做。</del></p>
<h2 id="B-Also-Try-Minecraft"><a href="#B-Also-Try-Minecraft" class="headerlink" title="B. Also Try Minecraft"></a><a href="https://codeforces.com/contest/1709/problem/B">B. Also Try Minecraft</a></h2><p>$\text{Solution:}$</p>
<p>考虑记录一个前缀和后缀和表示到达某处的花费，然后就能 $O(1)$ 查询。</p>
<h2 id="C-Recover-an-RBS"><a href="#C-Recover-an-RBS" class="headerlink" title="C. Recover an RBS"></a><a href="https://codeforces.com/contest/1709/problem/C">C. Recover an RBS</a></h2><p>$\text{Solution;}$</p>
<p>考虑括号匹配的另一种理解：将左括号看作 <code>+1</code>，右括号看作 <code>-1</code>，保证所有前缀和大于等于 $0$，且总和为 $0$。</p>
<p>那么贪心地考虑，将左括号尽量地靠左，才能更有机会合法，那么我们找最优的两种即可。</p>
<h2 id="D-Rorororobot"><a href="#D-Rorororobot" class="headerlink" title="D. Rorororobot"></a><a href="https://codeforces.com/contest/1709/problem/D">D. Rorororobot</a></h2><p>$\text{Solution:}$</p>
<p>先跳到当前列的最高处，判断移动的列之间是否有被挡住的地方，即维护静态区间最大值，用了 st 表，时间复杂度 $\mathcal{O}{(n\log n)}$。</p>
<h2 id="E-XOR-Tree"><a href="#E-XOR-Tree" class="headerlink" title="E. XOR Tree"></a><a href="https://codeforces.com/contest/1709/problem/E">E. XOR Tree</a></h2><p>$\text{Solution:}$</p>
<p>记 $dist_u$ 表示 $1\sim u$ 路径异或和。</p>
<p>考虑 $(u,v)$ 之间路径的异或和 $dist_u\oplus dist_v\oplus a_{\text{lca(u,v)}}$。</p>
<p>可以证明如果只改变改变 $a_u$ 的取值，就能使以 $u$ 为根的子树<strong>不存在</strong>路径异或和为 $0$ 的点对。</p>
<p>我们可以对每一个节点开一个 set 表示以 $u$ 到 $u$ 子树内一点能表示出的所有的异或值，记为 $s_u$，然后对于 $u$ 的子节点 $v$，考虑是否有 $x\in s_u,y\in s_v,x\oplus y\oplus a_u&#x3D;0$，如果存在，说明我们必须修改 $a_u$，修改后清空 $s_u$；如果不存在，将 $s_v$ 合并入 $s_u$。</p>
<p>最后用 dsu on tree，将复杂度优化至 $\mathcal{O}(n\log^2 n)$。</p>
<p>$\text{Code: }$<a href="https://codeforces.com/contest/1709/submission/165254294">Submission #165254294 - Codeforces</a></p>
<h1 id="Codeforces-Round-845-Div-2-text-1777"><a href="#Codeforces-Round-845-Div-2-text-1777" class="headerlink" title="Codeforces Round #845 (Div. 2)$\text{(1777)}$"></a>Codeforces Round #845 (Div. 2)$\text{(1777)}$</h1><p>比赛时间：$\text{2023&#x2F;1&#x2F;21 22:35}$</p>
<table>
<thead>
<tr>
<th align="center">$\text{Score}$</th>
<th align="center">$\texttt{A}$</th>
<th align="center">$\texttt{B}$</th>
<th align="center">$\texttt{C}$</th>
<th align="center">$\texttt{D}$</th>
<th align="center">$\texttt{E}$</th>
<th align="center">$\texttt{F}$</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$4434$</td>
<td align="center">$496$</td>
<td align="center">$\texttt{972}$</td>
<td align="center">$\texttt{1374}$</td>
<td align="center">$\texttt{1592}$</td>
<td align="center">$\texttt{-4}$</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">$\text{00:02}$</td>
<td align="center">$\text{00:07}$</td>
<td align="center">$\text{00:21}$</td>
<td align="center">$\text{00:51}$</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">补题</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
</tbody></table>
<p>又是一年除夕夜，又是一次上分场。</p>
<p><img src="https://cdnjson.com/images/2023/01/22/image.png"></p>
<p>其中后两题用的算法贴合联赛知识点，不得不说是一场适合国人的良心场。</p>
<h2 id="A-Everybody-Likes-Good-Arrays"><a href="#A-Everybody-Likes-Good-Arrays" class="headerlink" title="A. Everybody Likes Good Arrays!"></a><a href="https://codeforc.es/contest/1777/problem/A">A. Everybody Likes Good Arrays!</a></h2><p>$\text{Solution:}$</p>
<p>本题只要观察出 “奇 $\times$ 奇 $&#x3D;$ 奇，偶 $\times$ 偶 $&#x3D;$ 偶” 的性质后，直接统计相邻两数的奇偶性相同的对数即可。</p>
<p>时间复杂度 $\mathcal{O}(n)$。</p>
<h2 id="B-Emordnilap"><a href="#B-Emordnilap" class="headerlink" title="B. Emordnilap"></a><a href="https://codeforc.es/contest/1777/problem/B">B. Emordnilap</a></h2><p>$\text{Solution:}$</p>
<p>我们将逆序对 $(i,j)$ 分为三类：$(i&lt;j)$</p>
<ul>
<li>$1\leq i&lt;j\leq n$</li>
<li>$1\leq i\leq n,n+1\leq j\leq 2n$</li>
<li>$n+1\leq i&lt;j\leq 2n$</li>
</ul>
<p>观察可知，对于 $n+1\leq i&lt;j\leq 2n$ 的逆序对，<strong>一一对应</strong>一个 $1\leq i&lt;j\leq n$ 的正序对，那么第一类和第三类的总数为 ${n\choose2}$。</p>
<p>而第二类是在序列的两边分开选的，因此对于 $p_i$ 来说，满足的 $j$ 有 $(p_i-1)$ 个，那么第二类的总数为 $\sum\limits_{i&#x3D;1}^n(i-1)&#x3D;\dfrac{(n-1)n}{2}$。</p>
<p>因此对于任何一个序列，逆序对数都是 ${n\choose 2} + \dfrac{(n-1)n}{2}&#x3D;(n-1)\cdot n$，那么总数就为 $n!\cdot (n-1)\cdot n$。</p>
<p>时间复杂度 $\mathcal{O(n)}$。</p>
<h2 id="C-Quiz-Master"><a href="#C-Quiz-Master" class="headerlink" title="C. Quiz Master"></a><a href="https://codeforc.es/contest/1777/problem/C">C. Quiz Master</a></h2><p>$\text{Solution:}$</p>
<p>观察到本题要求极差最小，如果你做过<a href="https://www.luogu.com.cn/problem/P7514">P7514 [省选联考 2021 A&#x2F;B 卷] 卡牌游戏</a>，那么就显然发现是一道双指针题。</p>
<p>本题不需要二分，对于左端点 $i$，找到第一个满足的右端点 $j$，更新答案，然后移动左端点至 $i+1$ 继续找即可。</p>
<p>判断合法的方法：维护一个桶，添加一个数就将它的所有因数扔到桶里，并统计有多少个桶是不空的，删除同理。如果前 $[1,m]$ 的桶不空，说明当前时刻合法。</p>
<p>时间复杂度 $\mathcal{O}(n\sqrt{n})&#x2F;\mathcal{O(n\log n)}$ 。</p>
<h2 id="D-Score-of-a-Tree"><a href="#D-Score-of-a-Tree" class="headerlink" title="D. Score of a Tree"></a><a href="https://codeforc.es/contest/1777/problem/D">D. Score of a Tree</a></h2><p>$\text{Solution:}$</p>
<p>样例答案居然是 $32$ 的倍数！</p>
<p>这题我是这么考虑的，考虑拆贡献计算，对于一个节点 $u$，对于 $u$ 子树内的某一层（记为 $dep$），当且仅当在某一时刻 $t_0$（更具体地，$t_0&#x3D;dep-dep_u$，即这一层的深度减 $u$ 节点的深度），$dep$ 这层上的节点同时合并到 $u$ 节点并贡献给 $u$ 一个 $0$ 或 $1$，不妨设这一层有 $sz$ 个节点。</p>
<p>我们尝试计数有多少种局面使得 $dep$ 这一层贡献 $u$ 时的答案为 $1$？根据 xor 的结合律，显然当 $sz$ 个节点中有<strong>奇数</strong>个 $1$ 时 xor 和为 $1$，那么这 $sz$ 个点的选择方案为 ${sz\choose 1}+{sz\choose 3}+{sz\choose 5}+\cdots&#x3D;2^{sz-1}$，而剩余 $(n-sz-1)$ 个点可随意选择（注意我们统计的是初始 $n$ 个节点的局面数而不是单看这一层有多少种不同的局面），所以总局面数为 $2^{sz-1}\cdot 2^{n-sz}&#x3D;2^{n-1}$。</p>
<p><del>此时观察样例确实是 32 的倍数。</del></p>
<p>那么对于节点 $u$，它子树内每一层都会对 $u$ 产生 $2^{n-1}$ 贡献，记 $f_u$ 表示 $u$ 子树内的最深深度，那么最终答案就是 $2^{n-1}\times \sum\limits_{u&#x3D;1}^n (f_u-dep_u+1)$。</p>
<p>时间复杂度 $\mathcal{O}(n)$。</p>
<h2 id="E-Edge-Reverse"><a href="#E-Edge-Reverse" class="headerlink" title="E. Edge Reverse"></a><a href="https://codeforc.es/contest/1777/problem/E">E. Edge Reverse</a></h2><p>要求最大值最小，先二分一手去掉这个限制。</p>
<p>那么边权 $w_i\leq mid$ 的都变成了双向边，在这样的一张图上问是否存在一个节点能到达其它全部节点？</p>
<p>考虑先将所有双向边相连的点用并查集合并起来，因为此时并查集内的点相互可达。</p>
<p>然后变成了一张只包含有向边的图，我们在上面找到所有强联通分量，一个强联通分量内的点是相互可达的。</p>
<p>而注意到强联通分量缩点后的图是 DAG，那么存在一个节点能到达其它全部节点等价于 <strong>DAG 上只有一个入度为</strong> $0$ <strong>的点</strong>。</p>
<p>时间复杂度 $\mathcal{O}(n\log n)$。</p>
<p><del>好不容易看到一个最近刚学的算法结果写挂了，纯傻逼。</del></p>
<h2 id="F-Comfortably-Numb"><a href="#F-Comfortably-Numb" class="headerlink" title="F. Comfortably Numb"></a><a href="https://codeforc.es/contest/1777/problem/F">F. Comfortably Numb</a></h2><p>我们可以借用笛卡尔树形结构理解。</p>
<p>对于一段区间 $[l,r]$ 的最大值下标 $p$，我们考虑 $i\in[l,p],j\in[p,r]$ 的答案贡献，此时 $i\sim j$ 的最大值已确定为 $a_p$。</p>
<p>那么问题就变成了 $sum_{i-1}\oplus sum_j\oplus a_p$ 的最大值是多少，由于对于 01-trie 上的查询复杂度稳定 $\mathcal{O}(\log 10^9)$，我们递归维护 $[l,p-1]$ 和 $[p+1,r]$ 的 trie 树，然后选择 $[l,p]$ 和 $[p,r]$ 较短长度的一边，枚举每一个下标，并在另一边的 trie 上查询即可。</p>
<p>因此最终实现时，我们先递归解决 $[l,p-1]$ 和 $[p+1,r]$，最后才能将左右 trie 树合并。</p>
<p>由于枚举的较短一边，可以证明最坏情况下的复杂度为 $\mathcal{O}(n\log n\log 10^9)$。</p>
<p>注意 trie 树中一些边界的点可能没有维护（如 $sum_{l-1},sum_p$），需要再单独贡献一次。</p>
<p>$\text{Code: }$<a href="https://codeforc.es/contest/1777/submission/190055840">Submission #190055840 - Codeforces (Unofficial mirror by Menci)</a></p>
]]></content>
      <categories>
        <category>codeforces题解</category>
      </categories>
  </entry>
  <entry>
    <title>后缀数组(SA)/后缀自动机(SAM)</title>
    <url>/2021/12/13/suffix-array/</url>
    <content><![CDATA[<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><blockquote>
<p>给定长度为 $n$ 的字符串，请把这个字符串的所有 $n$ 个非空后缀按字典序（用 ASCII 数值比较）从小到大排序，然后按顺序输出排名。位置编号为 $1$ 到 $n$。 </p>
<p>对于 $100%$ 的数据，$n\le10^6$。</p>
</blockquote>
<p>暴力怎么做？<del>暴力是不是，加边，加边，加边，然后，并查集查询。</del></p>
<p>不难想到用 $\text{sort}$ 进行排序，我们可以用哈希和二分优化，复杂度 $O(n\log^2n)$。</p>
<p>对于一般的题目，暴力与正解往往有所关联，但是…</p>
<p>好了，下面正式开始介绍算法。</p>
<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>记 $suf(i)$ 表示字符串 $s[i, n]$ 所对应的子串，同时也称以 $n$ 为结尾的子串为<strong>字符串的后缀</strong>。</p>
<p>定义 $SA_i$ 表示排名第 $i$ 的后缀的开始位置。$SA_i$ 建立的是 “排名 $\rightarrow$ 位置” 映射关系。</p>
<p>定义 $rk_i$ 表示 $suf(i)$ 这个后缀在所有后缀中的字典序排名。$rk_i$ 建立的是 “位置 $\rightarrow$ 排名” 映射关系。</p>
<h1 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h1><p>我们采用的是倍增思想，如需对字符串 $s&#x3D;\texttt{abcaabc}$ 排序。</p>
<p>首先我们先对每个后缀的前 $1$ 位进行比较，若相等则他们的排名一样。</p>
<p><img src="https://s2.loli.net/2021/12/13/iz5qtBnZSjh3uvf.png"></p>
<p>然后比较前 $2$ 位时，我们就可以用两个连续的 $1$ 位字符拼接，这样每一位就有了一个二元组，然后我们用二元组排名。</p>
<p><img src="https://s2.loli.net/2021/12/13/b8Ylh4NQOUTAgic.png"></p>
<p>注意，如果没有完整的话就补 $0$。</p>
<p>然后继续比较前 $4$ 位。</p>
<p><img src="https://s2.loli.net/2021/12/13/gJkv4jeRusyX2O5.png"></p>
<p>这时你突然发现，好像所有位置的排名都不一样了！那么算法就结束了。</p>
<h1 id="代码（全文背诵）"><a href="#代码（全文背诵）" class="headerlink" title="代码（全文背诵）"></a>代码（全文背诵）</h1><p>在具体实现时，对二元组排序我们采用基数排序，先排第二维后排第一维，排序复杂度 $\mathcal{O}(n\log n)\rightarrow \mathcal{O}(n)$，加上倍增总时间复杂度为 $\mathcal{O}(n\log n)$，一般情况下足够使用。而因为常数较大，代码进行了卡常操作，因此部分实现原理可能并不显然，推荐采用理解思路+记忆细节的方式完成代码。（作者暂时也并未深究）</p>
<p>进行压行处理后 <code>suffixArray()</code> 函数仅有 $20$ 行，十分容易记忆，<strong>一定要全文背诵！一定要全文背诵！一定要全文背诵！</strong></p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> sa<span class="token punctuation">[</span><span class="token number">1000005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rk<span class="token punctuation">[</span><span class="token number">2000005</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 注意 rk 和 oldrk 需要开 2 倍字符串长度。</span>
<span class="token keyword">int</span> cnt<span class="token punctuation">[</span><span class="token number">1000005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> id<span class="token punctuation">[</span><span class="token number">1000005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> px<span class="token punctuation">[</span><span class="token number">1000005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> oldrk<span class="token punctuation">[</span><span class="token number">2000005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>oldrk<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> oldrk<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> oldrk<span class="token punctuation">[</span>x <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">==</span> oldrk<span class="token punctuation">[</span>y <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">suffixArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    m <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> t<span class="token punctuation">;</span>	
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">++</span>cnt<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> cnt<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> sa<span class="token punctuation">[</span>cnt<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">=</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">></span> n <span class="token operator">-</span> j<span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> id<span class="token punctuation">[</span><span class="token operator">++</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>	
            <span class="token keyword">if</span><span class="token punctuation">(</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> j<span class="token punctuation">)</span> id<span class="token punctuation">[</span><span class="token operator">++</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> j<span class="token punctuation">;</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>cnt<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">++</span>cnt<span class="token punctuation">[</span>px<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rk<span class="token punctuation">[</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> cnt<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> sa<span class="token punctuation">[</span>cnt<span class="token punctuation">[</span>px<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>oldrk<span class="token punctuation">,</span> rk<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> oldrk<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> 
            rk<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cmp</span><span class="token punctuation">(</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> sa<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">?</span> t <span class="token operator">:</span> <span class="token operator">++</span>t<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>小建议：不要在做题时直接套用模板，每一次都要认真手打。我的真实体验是做 $3$ 道题就能完全自己写对模板。</p>
<h1 id="text-Height"><a href="#text-Height" class="headerlink" title="$\text{Height}$"></a>$\text{Height}$</h1><p>假设现在给你这么一道题：在 $\mathcal{O}(n\log n)-\mathcal{O}(1)$ 的复杂度求出 $\text{lcp}(suf(i), suf(j))$，很显然你想不到这和 SA 有什么关系，那么接下来我们引入新定义。</p>
<p>记 $height_i$ 表示 $suf(SA_i)$ 与 $suf(SA_{i-1})$ 的最长公共前缀长度，即 $\text{lcp}(suf(SA_i), suf(SA_{i-1}))$，那么有结论：</p>
<p>$\text{lcp}(suf(i),suf(j))&#x3D;\min\limits_{rk_i&lt;k\leq rk_j}height_k$，这里假设 $rk_i&lt;rk_j$，那么为什么有这个结论呢，我们需要证明：</p>
<blockquote>
<p>记 $s_1&#x3D;suf(i),s_2&#x3D;suf(j),s_3&#x3D;suf(k)$。</p>
<p>有 $\forall s_1&lt;s_2&lt;s_3,\text{ s.t. } \text{lcp}(s_1,s_3)&#x3D;\min(\text{lcp}(s_1,s_2),\text{lcp}(s_2,s_3))$。</p>
</blockquote>
<p>对于这个命题，我们只需分类讨论即可。大致根据 $\text{lcp}(s_1,s_2)$ 和 $\text{lcp}(s_2,s_3)$ 的大小关系分为 $3$ 种简单的小情况：</p>
<img src="https://cdnjson.com/images/2023/01/16/height.png" alt="height.png" style="zoom:80%;" />

<p>上图分别对应 $\text{lcp}(s_1,s_2)&gt;\text{lcp}(s_2,s_3)$，$\text{lcp}(s_1,s_2)&lt;\text{lcp}(s_2,s_3)$ 和 $\text{lcp}(s_1,s_2)&#x3D;\text{lcp}(s_2,s_3)$ 的情况。</p>
<p>特别说明 $\text{lcp}(s_1,s_2)&#x3D;\text{lcp}(s_2,s_3)$ 的情况，因为 $s_1&lt;s_2&lt;s_3$，所以 $s_1$ 和 $s_3$ 下一个字符不能相同，因此满足 $\text{lcp}(s_1,s_3)&#x3D;\min(\text{lcp}(s_1,s_2),\text{lcp}(s_2,s_3))$。</p>
<p>那么任意两个后缀，它们的最长公共前缀就成了 $height$ 上的 RMQ 问题，因此能 $\mathcal{O}(n\log n)-\mathcal{O}(1)$ 解决。</p>
<h2 id="新的问题：如何求出-text-Height-数组"><a href="#新的问题：如何求出-text-Height-数组" class="headerlink" title="新的问题：如何求出 $\text{Height}$ 数组"></a>新的问题：如何求出 $\text{Height}$ 数组</h2><p>不要高兴太早，现在我们还需要以较低的复杂度求出 $\text{Height}$ 数组。</p>
<p>暴力 $\mathcal{O}(n^2)$ 留给读者思考，我们接下来证明下一个结论：</p>
<blockquote>
<p>$\forall i\in[1,n],\text{ s.t. }height_{rk_i}\geq height_{rk_{i-1}}-1$</p>
</blockquote>
<p>我们考虑 $suf(k)$ 与 $suf(i-1)$ 的最长公共前缀，$suf(k)$ 表示在按<strong>字典序顺序</strong>排在 $suf(i-1)$ 的前一个的后缀，此时最长公共前缀显然为 $height_{rk_{i-1}}$。</p>
<p>分情况讨论一下：</p>
<ol>
<li><p>$suf(k)$ 与 $suf(i-1)$ 的首字母不相同，那么此时 $height_{rk_{i-1}}&#x3D;0$，一定有 $height_{rk_i}\geq 0&gt;height_{rk_{i-1}}$。</p>
</li>
<li><p>$suf(k)$ 与 $suf(i-1)$ 的首字母相同，此时我们有必要讨论 $suf(k+1)$ 与 $suf(i)$ 的关系。</p>
<p>观察到两个后缀均去掉了首字母，得 $\text{lcp}(suf(k+1),suf(i))&#x3D;height_{rk_{i-1}}-1$。</p>
<p>又因为 $suf(k)$ 的排名小于 $suf(i-1)$，则去掉首字母的排名 $suf(k+1)$ 小于 $suf(i)$，那么根据上面刚证明的结论，一定有：</p>
<p>$\text{lcp}(suf(rk_i-1),suf(i))\geq \text{lcp}(suf(k+1),suf(i))$，代入整理后可得：</p>
<p>$hright_{rk_i}\geq height_{rk_{i-1}}-1$。</p>
</li>
</ol>
<p>综上，任何情况下，都有 $height_{rk_i}\geq height_{rk_{i-1}}-1$。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>那么现在我们只需按 $rk_1\sim rk_n$ 顺序求 $height$ 数组，根据<strong>摊还</strong>分析，复杂度就是 $\mathcal{O}(n)$。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    j <span class="token operator">=</span> sa<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i <span class="token operator">+</span> k<span class="token punctuation">]</span> <span class="token operator">==</span> str<span class="token punctuation">[</span>j <span class="token operator">+</span> k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>k<span class="token punctuation">;</span>
    height<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>现在你已点亮了关于 SA 的所有技能点！<del>（SAM 应该还有新的）</del></p>
<p>下面你就可以快乐的刷题，大部分题用完 SA 后会转化为另一道可出在联赛的题目。</p>
<h1 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h1><p>注意下文中复杂度的 $n$ 均指进行 SA 的字符串长度。<del>貌似复杂度都一样</del></p>
<h2 id="P3809-【模板】后缀排序"><a href="#P3809-【模板】后缀排序" class="headerlink" title="P3809 【模板】后缀排序"></a><a href="https://www.luogu.com.cn/problem/P3809">P3809 【模板】后缀排序</a></h2><p>直接上 SA 板子即可，最后输出的即为 $SA$ 数组。</p>
<p>时间复杂度 $\mathcal{O}(n\log n)$。</p>
<h2 id="P2870-USACO07DEC-Best-Cow-Line-G"><a href="#P2870-USACO07DEC-Best-Cow-Line-G" class="headerlink" title="P2870 [USACO07DEC]Best Cow Line G"></a><a href="https://www.luogu.com.cn/problem/P2870">P2870 [USACO07DEC]Best Cow Line G</a></h2><p>观察到字典序具有贪心性，考虑从两个中选择令答案较优的那个，具体来说：</p>
<p>设当前字符串剩余 $s[l,r]$，那么如何决策选择 $l$ 还是 $r$？</p>
<p>当 $s_l$  和 $s_r$ 不一样时，根据贪心我们选择较小的那个。</p>
<p>如果一样时，我们就得根据 $s_{l+1}$ 和 $s_{r-1}$ 来决策选择 $s_l$ 还是 $s_r$，如果还是相同就继续比较 $s_{l+2}&#x3D;s_{r-2}$，最后直到比较出大小为止。</p>
<p>观察到这一过程就是在比较 $l\rightarrow r$ 和 $r\rightarrow l$ 这两段字符的字典序排名。</p>
<p>我们将原串倒过来，使用后缀数组，这样就有了原串后缀和<strong>原串前缀</strong>的排名，按上述流程操作时比较 $rk$ 即可。</p>
<p>时间复杂度 $\mathcal{O}(n\log n)$。代码是远古时期（2021-12-14）写的，就不放了。</p>
<h2 id="P2408-不同子串个数"><a href="#P2408-不同子串个数" class="headerlink" title="P2408 不同子串个数"></a><a href="https://www.luogu.com.cn/problem/P2408">P2408 不同子串个数</a></h2><p>给定一个长为 $n$ 的字符串，求不同的子串个数。</p>
<p>观察到 $height_i&#x3D;\text{lcp}(suf(sa_i),suf(sa_{i-1}))$，那么对于 $suf(sa_i)$ 和 $suf(s_{i-1})$ 来说，有长度 $height_i$ 的公共部分，也就是有 $height_i$ 个重复子串，那么最终答案即为：$\dfrac{n(n+1))}{2}-\sum\limits_{i&#x3D;1}^n height_i$。</p>
<p>时间复杂度 $\mathcal{O}(n\log n)$。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
<span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> sa<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rk<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> id<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> px<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> oldrk<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>oldrk<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> oldrk<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> oldrk<span class="token punctuation">[</span>x <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">==</span> oldrk<span class="token punctuation">[</span>y <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">suffixArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    m <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> t<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">++</span>cnt<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> cnt<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> sa<span class="token punctuation">[</span>cnt<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">=</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">></span> n <span class="token operator">-</span> j<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> id<span class="token punctuation">[</span><span class="token operator">++</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> j<span class="token punctuation">)</span> id<span class="token punctuation">[</span><span class="token operator">++</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> j<span class="token punctuation">;</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>cnt<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">++</span>cnt<span class="token punctuation">[</span>px<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rk<span class="token punctuation">[</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> cnt<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> sa<span class="token punctuation">[</span>cnt<span class="token punctuation">[</span>px<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>oldrk<span class="token punctuation">,</span> rk<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> oldrk<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
            rk<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cmp</span><span class="token punctuation">(</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> sa<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">?</span> t <span class="token operator">:</span> <span class="token operator">++</span>t<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        j <span class="token operator">=</span> sa<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i <span class="token operator">+</span> k<span class="token punctuation">]</span> <span class="token operator">==</span> str<span class="token punctuation">[</span>j <span class="token operator">+</span> k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>k<span class="token punctuation">;</span>
        height<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    cin <span class="token operator">>></span> n <span class="token operator">>></span> <span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">suffixArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ll sum <span class="token operator">=</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span>n <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sum <span class="token operator">-</span><span class="token operator">=</span> height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    
    cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P2852-USACO06DEC-Milk-Patterns-G"><a href="#P2852-USACO06DEC-Milk-Patterns-G" class="headerlink" title="P2852 [USACO06DEC]Milk Patterns G"></a><a href="https://www.luogu.com.cn/problem/P2852">P2852 [USACO06DEC]Milk Patterns G</a></h2><p>这题考查了一点关于 $\text{Height}$ 的应用。</p>
<p>我们思考 $\text{Height}$ 的定义，是排名相邻的两个串的最长公共前缀，而由于后缀按字典序排名后，<strong>具有一段相同前缀</strong>的字符串必定是挨在一起的！</p>
<p><img src="https://cdnjson.com/images/2023/01/17/image349c8ca202722b36.png"></p>
<p>那么我们可以二分一个长度 $l$，把 $height_i&lt;l$ 的位置称之为 “断点”，这样所有后缀被我们分成了若干组，可以证明每个后缀的相同一段前缀在原字符串上的位置是不同的。</p>
<p>那么我们看是否有一组的数量到达 $k$ 即可。时间复杂度 $\mathcal{O}(n\log n)$。</p>
<p>有了这种想法后我们发现可以完全不用二分。我们对相邻的 $k$ 个对应的 $(k-1)$ 个 $height_i$ 取最小值就是相邻 $k$ 个的贡献的答案，最终所有答案求最大值即可。用单调队列维护，复杂度为 $\mathcal{O}(n)$，但由于求 SA 的瓶颈，复杂度仍为 $\mathcal{O}(n\log n)$。</p>
<h2 id="P5546-POI2000-公共串"><a href="#P5546-POI2000-公共串" class="headerlink" title="P5546 [POI2000]公共串"></a><a href="https://www.luogu.com.cn/problem/P5546">P5546 [POI2000]公共串</a></h2><p>这题展现了关于 SA 做题的另一技巧。</p>
<p>观察到最长公共子串显然是可以 SA 求的，但是不在一个字符串啊，只有在一个字符串上才能进行排名。</p>
<p>不难想到<strong>将所有字符串拼接起来并在字符串之间加一个未出现字符</strong>，此时再进行排序我们就有了所有字符串的所有后缀的字典序关系。</p>
<p>然后双指针更新答案即可，我们要保证区间内包含了所有字符串的后缀至少一个。时间复杂度 $\mathcal{O}(n\log n)$。</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> q<span class="token punctuation">;</span>
<span class="token keyword">int</span> str<span class="token punctuation">[</span><span class="token number">10105</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> Tmp<span class="token punctuation">[</span><span class="token number">2005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> pos<span class="token punctuation">[</span><span class="token number">10105</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bucket<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tot<span class="token punctuation">;</span>
<span class="token keyword">int</span> lg2<span class="token punctuation">[</span><span class="token number">10105</span><span class="token punctuation">]</span><span class="token punctuation">,</span> st<span class="token punctuation">[</span><span class="token number">10105</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> sa<span class="token punctuation">[</span><span class="token number">10105</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rk<span class="token punctuation">[</span><span class="token number">20205</span><span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span><span class="token number">10105</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> id<span class="token punctuation">[</span><span class="token number">10105</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">[</span><span class="token number">10105</span><span class="token punctuation">]</span><span class="token punctuation">,</span> px<span class="token punctuation">[</span><span class="token number">10105</span><span class="token punctuation">]</span><span class="token punctuation">,</span> oldrk<span class="token punctuation">[</span><span class="token number">20205</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>oldrk<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> oldrk<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> oldrk<span class="token punctuation">[</span>x <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">==</span> oldrk<span class="token punctuation">[</span>y <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">suffixArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    m <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">300</span> <span class="token operator">+</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> t<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">++</span>cnt<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> cnt<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> sa<span class="token punctuation">[</span>cnt<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">=</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">></span> n <span class="token operator">-</span> j<span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> id<span class="token punctuation">[</span><span class="token operator">++</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> j<span class="token punctuation">)</span> id<span class="token punctuation">[</span><span class="token operator">++</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> j<span class="token punctuation">;</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>cnt<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">++</span>cnt<span class="token punctuation">[</span>px<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rk<span class="token punctuation">[</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> cnt<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> sa<span class="token punctuation">[</span>cnt<span class="token punctuation">[</span>px<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>oldrk<span class="token punctuation">,</span> rk<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> oldrk<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
            rk<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cmp</span><span class="token punctuation">(</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> sa<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">?</span> t <span class="token operator">:</span> <span class="token operator">++</span>t<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        j <span class="token operator">=</span> sa<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i <span class="token operator">+</span> k<span class="token punctuation">]</span> <span class="token operator">==</span> str<span class="token punctuation">[</span>j <span class="token operator">+</span> k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>k<span class="token punctuation">;</span>
        height<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">que</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">></span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> lg2<span class="token punctuation">[</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">min</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> st<span class="token punctuation">[</span>r <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    cin <span class="token operator">>></span> q<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> q<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cin <span class="token operator">>></span> <span class="token punctuation">(</span>Tmp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> l <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>Tmp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> l<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            str<span class="token punctuation">[</span><span class="token operator">++</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> Tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> pos<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        str<span class="token punctuation">[</span><span class="token operator">++</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">127</span> <span class="token operator">+</span> j<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">suffixArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    lg2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        lg2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> lg2<span class="token punctuation">[</span>i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> st<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> n <span class="token operator">&amp;&amp;</span> tot <span class="token operator">&lt;</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>pos<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> tot<span class="token operator">++</span><span class="token punctuation">;</span> 
            bucket<span class="token punctuation">[</span>pos<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token function">que</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>pos<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> tot<span class="token operator">--</span><span class="token punctuation">;</span>
        bucket<span class="token punctuation">[</span>pos<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    
    cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P4248-AHOI2013-差异"><a href="#P4248-AHOI2013-差异" class="headerlink" title="P4248 [AHOI2013] 差异"></a><a href="https://www.luogu.com.cn/problem/P4248">P4248 [AHOI2013] 差异</a></h2><p>本题实际上又是个一眼题。</p>
<p>$\text{len}$ 的贡献显然是好算的，每个 $\text{len}(suf(i))$ 贡献 $(n-1)$ 次，所以所有的贡献加起来为 $\dfrac{(n-1)\cdot n\cdot (n+2)}{2}$。</p>
<p>接下来考虑计算 $\sum\limits_{i&lt;j}\text{lcp(suf(i),suf(j))}$，实际上这就是对区间最小值进行求和，那么我们要找到每一个 $height_i$ 第一个左边比它大的位置 $L_i$ 和第一个右边比它大的位置 $R_i$，那么 $height_i$ 的贡献就是 $height_i\times (i-L_i)\times(R_i-i)$。注意还要乘上题目式子中的 $2$。</p>
<p>求出 $L_i$ 和 $R_i$ 是一个使用单调栈维护的经典问题，不作赘述。</p>
<p>时间复杂度 $\mathcal{O}(n\log n)$。</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
<span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">500005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> sa<span class="token punctuation">[</span><span class="token number">500005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rk<span class="token punctuation">[</span><span class="token number">1000005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span><span class="token number">500005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> id<span class="token punctuation">[</span><span class="token number">500005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">[</span><span class="token number">500005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> px<span class="token punctuation">[</span><span class="token number">500005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> oldrk<span class="token punctuation">[</span><span class="token number">1000005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>oldrk<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> oldrk<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> oldrk<span class="token punctuation">[</span>x <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">==</span> oldrk<span class="token punctuation">[</span>y <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">suffixArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    m <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> t<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">++</span>cnt<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> cnt<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> sa<span class="token punctuation">[</span>cnt<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">=</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">></span> n <span class="token operator">-</span> j<span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> id<span class="token punctuation">[</span><span class="token operator">++</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> j<span class="token punctuation">)</span> id<span class="token punctuation">[</span><span class="token operator">++</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> j<span class="token punctuation">;</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>cnt<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">++</span>cnt<span class="token punctuation">[</span>px<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rk<span class="token punctuation">[</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> cnt<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> sa<span class="token punctuation">[</span>cnt<span class="token punctuation">[</span>px<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>oldrk<span class="token punctuation">,</span> rk<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> oldrk<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
            rk<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cmp</span><span class="token punctuation">(</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> sa<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">?</span> t <span class="token operator">:</span> <span class="token operator">++</span>t<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        j <span class="token operator">=</span> sa<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i <span class="token operator">+</span> k<span class="token punctuation">]</span> <span class="token operator">==</span> str<span class="token punctuation">[</span>j <span class="token operator">+</span> k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>k<span class="token punctuation">;</span>
        height<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> stac<span class="token punctuation">[</span><span class="token number">500005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> top<span class="token punctuation">;</span>
<span class="token keyword">int</span> L<span class="token punctuation">[</span><span class="token number">500005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> R<span class="token punctuation">[</span><span class="token number">500005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    cin <span class="token operator">>></span> <span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    n <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">suffixArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        L<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> R<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>top <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> height<span class="token punctuation">[</span>stac<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">></span> height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            R<span class="token punctuation">[</span>stac<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">,</span> top<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>top <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> L<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> stac<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>
        stac<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ll ans <span class="token operator">=</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span>n <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ans <span class="token operator">-</span><span class="token operator">=</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span>height<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> L<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>R<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    
    cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P2463-SDOI2008-Sandy-的卡片"><a href="#P2463-SDOI2008-Sandy-的卡片" class="headerlink" title="P2463 [SDOI2008] Sandy 的卡片"></a><a href="https://www.luogu.com.cn/problem/P2463">P2463 [SDOI2008] Sandy 的卡片</a></h2><p>本题中需要注意相同子串的定义：两个子串长度相同且一个串的全部元素加上一个数就会变成另一个串。</p>
<p>那么我们可以将每个串的差分求出来，然后依次拼接，按 P5546 [POI2000]公共串 的方法求出来的答案加 $1$ 就是本题答案。</p>
<p>时间复杂度 $\mathcal{O}(n\log n)$。</p>
<h2 id="CF204E-Little-Elephant-and-Strings"><a href="#CF204E-Little-Elephant-and-Strings" class="headerlink" title="CF204E Little Elephant and Strings"></a><a href="https://www.luogu.com.cn/problem/CF204E">CF204E Little Elephant and Strings</a></h2><p>我们先把所有包含<strong>恰好</strong> $k$ <strong>个串的后缀</strong>所在的排名区间找到，那么一个后缀对其所在串的贡献就是此后缀所在的所有区间 $\text{height}$ 最小值中的最大值。那么找到了所有区间后，我们考虑依次对每个后缀维护答案。</p>
<p>不难发现区间左右指针单调（非严格）递增，因此相当于维护滑动窗口区间最大值，用单调队列即可。</p>
<p>时间复杂度 $\mathcal{O}(n\log n)$。</p>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> q<span class="token punctuation">,</span> k<span class="token punctuation">;</span>
<span class="token keyword">int</span> str<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> lst<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> Tmp<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span> adj<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> pos<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bucket<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tot<span class="token punctuation">;</span>
pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> que<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> head<span class="token punctuation">,</span> tail<span class="token punctuation">;</span>
<span class="token keyword">int</span> lg2<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> st<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> sa<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rk<span class="token punctuation">[</span><span class="token number">400005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> id<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> px<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> oldrk<span class="token punctuation">[</span><span class="token number">400005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

ll sum<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>oldrk<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> oldrk<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> oldrk<span class="token punctuation">[</span>x <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">==</span> oldrk<span class="token punctuation">[</span>y <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">suffixArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    m <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">300</span> <span class="token operator">+</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> t<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">++</span>cnt<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> cnt<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> sa<span class="token punctuation">[</span>cnt<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">=</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">></span> n <span class="token operator">-</span> j<span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> id<span class="token punctuation">[</span><span class="token operator">++</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> j<span class="token punctuation">)</span> id<span class="token punctuation">[</span><span class="token operator">++</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> j<span class="token punctuation">;</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>cnt<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">++</span>cnt<span class="token punctuation">[</span>px<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rk<span class="token punctuation">[</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> cnt<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> sa<span class="token punctuation">[</span>cnt<span class="token punctuation">[</span>px<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>oldrk<span class="token punctuation">,</span> rk<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> oldrk<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
            rk<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cmp</span><span class="token punctuation">(</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> sa<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">?</span> t <span class="token operator">:</span> <span class="token operator">++</span>t<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        j <span class="token operator">=</span> sa<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i <span class="token operator">+</span> k<span class="token punctuation">]</span> <span class="token operator">==</span> str<span class="token punctuation">[</span>j <span class="token operator">+</span> k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>k<span class="token punctuation">;</span>
        height<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">></span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> lst<span class="token punctuation">[</span>pos<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-</span> sa<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> lg2<span class="token punctuation">[</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">min</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> st<span class="token punctuation">[</span>r <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    cin <span class="token operator">>></span> q <span class="token operator">>></span> k<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> q<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cin <span class="token operator">>></span> <span class="token punctuation">(</span>Tmp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> l <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>Tmp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> l<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            str<span class="token punctuation">[</span><span class="token operator">++</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> Tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> pos<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        lst<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">;</span>
        str<span class="token punctuation">[</span><span class="token operator">++</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">300</span> <span class="token operator">+</span> j<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">suffixArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    lg2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        lg2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> lg2<span class="token punctuation">[</span>i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> st<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 求出所有恰好包含 k 个串的后缀的区间 [l, r]</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>pos<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> tot<span class="token operator">++</span><span class="token punctuation">;</span>
        bucket<span class="token punctuation">[</span>pos<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>tot <span class="token operator">>=</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>tot <span class="token operator">==</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                adj<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token function">query</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保存区间 [j, i]</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>pos<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>tot <span class="token operator">==</span> k<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
                tot<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            bucket<span class="token punctuation">[</span>pos<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    head <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> tail <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">&lt;=</span> tail <span class="token operator">&amp;&amp;</span> que<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">&lt;</span> i<span class="token punctuation">)</span> <span class="token operator">++</span>head<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> p<span class="token operator">:</span> adj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">&lt;=</span> tail <span class="token operator">&amp;&amp;</span> que<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">&lt;</span> p<span class="token punctuation">.</span>second<span class="token punctuation">)</span> <span class="token operator">--</span>tail<span class="token punctuation">;</span>
            que<span class="token punctuation">[</span><span class="token operator">++</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">&lt;=</span> tail<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sum<span class="token punctuation">[</span>pos<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> que<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> q<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    
    cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P2178-NOI2015-品酒大会"><a href="#P2178-NOI2015-品酒大会" class="headerlink" title="P2178 [NOI2015] 品酒大会"></a><a href="https://www.luogu.com.cn/problem/P2178">P2178 [NOI2015] 品酒大会</a></h2><p>求完 SA 后，先考虑如何求方案数。</p>
<p>我们先考虑<strong>恰好是</strong> “$k$ 相似” 的方案是多少，如果能求，那么做后缀和后就得到答案数组。</p>
<p>注意到 $\text{lcp}(suf(i),suf(j))$  是区间最小值 $\text{Height}$ 的形式，那么第一反应到<strong>离线涨水+并查集维护</strong>的做法。</p>
<p>具体来说，维护并查集表示其中一部分后缀，并同时维护并查集大小。</p>
<p>按 $\text{Height}$ 从大到小倒序合并，当我们合并到 $k$ 时，所有 $k+1\sim n$ 的连续后缀已经合并完成。</p>
<p>那么当我们找到 $Height_i&#x3D;k$ 时，把 $suf(sa_i)$ 后缀和 $suf(sa_{i+1})$ 后缀所在的并查集合并起来，方案数贡献大小就是两个并查集大小相乘，这样我们就能维护全部方案。</p>
<p>这样的话最大美味度也能维护，但注意到<strong>美味度有负数</strong>，需要同时维护并查集内最大值和最小值，贡献时最小值$\times$最小值和最大值$\times$最大值都能贡献。</p>
<p>时间复杂度 $\mathcal{O}(n\log n)$。</p>
<h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
<span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">300005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">300005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> adj<span class="token punctuation">[</span><span class="token number">300005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> sa<span class="token punctuation">[</span><span class="token number">300005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rk<span class="token punctuation">[</span><span class="token number">600005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span><span class="token number">300005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> id<span class="token punctuation">[</span><span class="token number">300005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">[</span><span class="token number">300005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> px<span class="token punctuation">[</span><span class="token number">300005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> oldrk<span class="token punctuation">[</span><span class="token number">600005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> fa<span class="token punctuation">[</span><span class="token number">300005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sz<span class="token punctuation">[</span><span class="token number">300005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Min<span class="token punctuation">[</span><span class="token number">300005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Max<span class="token punctuation">[</span><span class="token number">300005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
ll sum<span class="token punctuation">[</span><span class="token number">300005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> seq<span class="token punctuation">[</span><span class="token number">300005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">==</span> u<span class="token punctuation">)</span> <span class="token keyword">return</span> u<span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">return</span> fa<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> ancu <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">,</span> ancv <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    sum<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span>sz<span class="token punctuation">[</span>ancu<span class="token punctuation">]</span> <span class="token operator">*</span> sz<span class="token punctuation">[</span>ancv<span class="token punctuation">]</span><span class="token punctuation">;</span>
    seq<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>seq<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span>Min<span class="token punctuation">[</span>ancu<span class="token punctuation">]</span> <span class="token operator">*</span> Min<span class="token punctuation">[</span>ancv<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span>Max<span class="token punctuation">[</span>ancu<span class="token punctuation">]</span> <span class="token operator">*</span> Max<span class="token punctuation">[</span>ancv<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Min<span class="token punctuation">[</span>ancv<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>Min<span class="token punctuation">[</span>ancv<span class="token punctuation">]</span><span class="token punctuation">,</span> Min<span class="token punctuation">[</span>ancu<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Max<span class="token punctuation">[</span>ancv<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>Max<span class="token punctuation">[</span>ancv<span class="token punctuation">]</span><span class="token punctuation">,</span> Max<span class="token punctuation">[</span>ancu<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sz<span class="token punctuation">[</span>ancv<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> sz<span class="token punctuation">[</span>ancu<span class="token punctuation">]</span><span class="token punctuation">,</span> fa<span class="token punctuation">[</span>ancu<span class="token punctuation">]</span> <span class="token operator">=</span> ancv<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>oldrk<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> oldrk<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> oldrk<span class="token punctuation">[</span>x <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">==</span> oldrk<span class="token punctuation">[</span>y <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">suffixArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    m <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> t<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">++</span>cnt<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> cnt<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> sa<span class="token punctuation">[</span>cnt<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">=</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">></span> n <span class="token operator">-</span> j<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> id<span class="token punctuation">[</span><span class="token operator">++</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> j<span class="token punctuation">)</span> id<span class="token punctuation">[</span><span class="token operator">++</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> j<span class="token punctuation">;</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>cnt<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">++</span>cnt<span class="token punctuation">[</span>px<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rk<span class="token punctuation">[</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> cnt<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> sa<span class="token punctuation">[</span>cnt<span class="token punctuation">[</span>px<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>oldrk<span class="token punctuation">,</span> rk<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> oldrk<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
            rk<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cmp</span><span class="token punctuation">(</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> sa<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">?</span> t <span class="token operator">:</span> <span class="token operator">++</span>t<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        j <span class="token operator">=</span> sa<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i <span class="token operator">+</span> k<span class="token punctuation">]</span> <span class="token operator">==</span> str<span class="token punctuation">[</span>j <span class="token operator">+</span> k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>k<span class="token punctuation">;</span>
        height<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    cin <span class="token operator">>></span> n <span class="token operator">>></span> <span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">suffixArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        fa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">,</span> sz<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> Min<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Max<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        adj<span class="token punctuation">[</span>height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>seq<span class="token punctuation">,</span> <span class="token operator">~</span><span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>seq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> n<span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">:</span> adj<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">merge</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> sum<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> seq<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>seq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> seq<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> seq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P2336-SCOI2012-喵星球上的点名"><a href="#P2336-SCOI2012-喵星球上的点名" class="headerlink" title="P2336 [SCOI2012] 喵星球上的点名"></a><a href="https://www.luogu.com.cn/problem/P2336">P2336 [SCOI2012] 喵星球上的点名</a></h2><p>我们把所有串接起来拼 SA，一个喵星人的姓和名之间也要插字符分开。</p>
<p>那么对于一个询问，我们在 SA 中找到极大区间 $[L,R]$ 使得这个区间的最长公共前缀恰好等于询问串长度，那么这就说明这个区间内的所包括的任意一个喵星人都可以在这个询问串下答到。</p>
<p>由于一个喵星人有两个串，不唯一对应，我们将两问转化为如下问题：</p>
<ul>
<li>询问区间 $[L,R]$ 有多少种不同的颜色。</li>
<li>询问每种颜色在多少个不同的区间。</li>
</ul>
<p>如果你做过<a href="https://www.luogu.com.cn/problem/P1972">P1972 [SDOI2009] HH的项链</a>，那么这题就迎刃而解了。</p>
<p>时间复杂度 $\mathcal{O}(n\log n)$。</p>
<h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> q1<span class="token punctuation">,</span> q2<span class="token punctuation">;</span>
<span class="token keyword">int</span> Len<span class="token punctuation">[</span><span class="token number">400005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> str<span class="token punctuation">[</span><span class="token number">400005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> lst<span class="token punctuation">[</span><span class="token number">400005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> D<span class="token punctuation">;</span>
<span class="token keyword">int</span> pre<span class="token punctuation">[</span><span class="token number">400005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> appear<span class="token punctuation">[</span><span class="token number">400005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> pos<span class="token punctuation">[</span><span class="token number">400005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> lg2<span class="token punctuation">[</span><span class="token number">400005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> st<span class="token punctuation">[</span><span class="token number">400005</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> sa<span class="token punctuation">[</span><span class="token number">400005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rk<span class="token punctuation">[</span><span class="token number">800005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span><span class="token number">400005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> id<span class="token punctuation">[</span><span class="token number">400005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">[</span><span class="token number">400005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> px<span class="token punctuation">[</span><span class="token number">400005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> oldrk<span class="token punctuation">[</span><span class="token number">800005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> ans<span class="token punctuation">[</span><span class="token number">400005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span> qu<span class="token punctuation">[</span><span class="token number">400005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> adj<span class="token punctuation">[</span><span class="token number">400005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> bucket<span class="token punctuation">[</span><span class="token number">4000005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> c<span class="token punctuation">[</span><span class="token number">400005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">lowbit</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">upd</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> x<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> v<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">que</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> x<span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">-</span><span class="token operator">=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res<span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>oldrk<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> oldrk<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> oldrk<span class="token punctuation">[</span>x <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">==</span> oldrk<span class="token punctuation">[</span>y <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">suffixArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    m <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">10000</span> <span class="token operator">+</span> D<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> t<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">++</span>cnt<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> cnt<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> sa<span class="token punctuation">[</span>cnt<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">=</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">></span> n <span class="token operator">-</span> j<span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> id<span class="token punctuation">[</span><span class="token operator">++</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> 
            <span class="token keyword">if</span><span class="token punctuation">(</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> j<span class="token punctuation">)</span> id<span class="token punctuation">[</span><span class="token operator">++</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> j<span class="token punctuation">;</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>cnt<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">++</span>cnt<span class="token punctuation">[</span>px<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rk<span class="token punctuation">[</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> cnt<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> sa<span class="token punctuation">[</span>cnt<span class="token punctuation">[</span>px<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>oldrk<span class="token punctuation">,</span> rk<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> oldrk<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> 
            rk<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cmp</span><span class="token punctuation">(</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> sa<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">?</span> t <span class="token operator">:</span> <span class="token operator">++</span>t<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        j <span class="token operator">=</span> sa<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i <span class="token operator">+</span> k<span class="token punctuation">]</span> <span class="token operator">==</span> str<span class="token punctuation">[</span>j <span class="token operator">+</span> k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>k<span class="token punctuation">;</span>
        height<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> posl <span class="token operator">=</span> i<span class="token punctuation">,</span> posr <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// height[posl, posr)</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>posl <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> st<span class="token punctuation">[</span>posl <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                posl <span class="token operator">-</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        posl <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>posr <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> n <span class="token operator">&amp;&amp;</span> st<span class="token punctuation">[</span>posr<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                posr <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>posl <span class="token operator">&lt;=</span> posr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        qu<span class="token punctuation">[</span>posr <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>posl <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> pos<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        adj<span class="token punctuation">[</span>posr<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>posl <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bucket<span class="token punctuation">[</span>posl <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    cin <span class="token operator">>></span> q1 <span class="token operator">>></span> q2<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> q1<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> l<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> l<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> l<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cin <span class="token operator">>></span> str<span class="token punctuation">[</span><span class="token operator">++</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span> pos<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        str<span class="token punctuation">[</span><span class="token operator">++</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10000</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">++</span>D<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cin <span class="token operator">>></span> l<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> l<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cin <span class="token operator">>></span> str<span class="token punctuation">[</span><span class="token operator">++</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span> pos<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        str<span class="token punctuation">[</span><span class="token operator">++</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10000</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">++</span>D<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> q1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> q1 <span class="token operator">+</span> q2<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> l<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> l<span class="token punctuation">;</span> Len<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> l<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cin <span class="token operator">>></span> str<span class="token punctuation">[</span><span class="token operator">++</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span> pos<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        lst<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">;</span>
        str<span class="token punctuation">[</span><span class="token operator">++</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10000</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">++</span>D<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">suffixArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    lg2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        lg2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> lg2<span class="token punctuation">[</span>i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> st<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> q1 <span class="token operator">||</span> lst<span class="token punctuation">[</span>pos<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-</span> sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> Len<span class="token punctuation">[</span>pos<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token function">work</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> Len<span class="token punctuation">[</span>pos<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>appear<span class="token punctuation">[</span>pos<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> appear<span class="token punctuation">[</span>pos<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        appear<span class="token punctuation">[</span>pos<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> q1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">upd</span><span class="token punctuation">(</span>pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">upd</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> p<span class="token operator">:</span> qu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ans<span class="token punctuation">[</span>p<span class="token punctuation">.</span>second<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">que</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>	
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">upd</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token operator">:</span> adj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">upd</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> q1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ans<span class="token punctuation">[</span>pos<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">que</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">que</span><span class="token punctuation">(</span>pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> q1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> q1 <span class="token operator">+</span> q2<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> q1<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
     
    
    cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P4770-NOI2018-你的名字"><a href="#P4770-NOI2018-你的名字" class="headerlink" title="P4770 [NOI2018] 你的名字"></a><a href="https://www.luogu.com.cn/problem/P4770">P4770 [NOI2018] 你的名字</a></h2><p>给定串 $S$，每次询问 $[l,r]$ 和一个串 $T$，问 $T$ 的本质不同的子串有多少个不能匹配 $S[l\sim r]$ 的一部分。</p>
<p>考虑第一手容斥，转化为求 $T$ 的本质不同的子串有多少个能完全匹配 $S[l\sim r]$ 的一部分。</p>
<p>那么我们可以对于每个询问串后缀，求出 $p_i$ 代表当前询问串 $suf(i)$ 能够匹配 $S[l\sim r]$ 的最长长度。</p>
<p>本题中 $p$ 存在 $p_{rk_i}\geq p_{rk_{i-1}}-1$ 的性质（证明略），那么我们可以同样按照 $rk$ 从小到大求能以 $\mathcal{O}(|T|)$ 的速度找到 $p$，然后我们需要考虑如何进行检查是否合法。</p>
<p>我们记当前所做的 $p_i$ 对应的询问串的后缀为 $A$，那么相当于我们要找到 $S$ 的后缀 $B$，使得 $\text{lcp}(A,B)&#x3D;|A|$ 且 $B$ 的首字母位置在 $S$ 的 $[l,r-p_i+1]$ 区间中。</p>
<p>首先我们可以通过倍增的方式找到区间 $[posl,posr]$ 使得它们的最长公共前缀为 $|A|$，而每一个位置相当于对应一个 $sa_i$ 的权值，代表这个后缀的开始位置，也就是说，我们用区间查询 $[posl,posr]$ 看里面是否存在 $i\in [posl,posr],\text{ s.t. }sa_i\in[l,r-p_i+1]$，这个东西我们直接上主席树维护，那么如果找到，说明 $p_i$ 长度仍可以变大，然后依次判断所有的即可。</p>
<p>注意最后找到所有 $p_i$ 后，答案的贡献与本质不同子串的计算不要重叠，具体可参考代码上实现。</p>
<p>时间复杂度 $\mathcal{O}(n\log n)$，空间复杂度 $\mathcal{O}(n\log n)$，代码常数较大。</p>
<h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> q<span class="token punctuation">;</span>
<span class="token keyword">int</span> str<span class="token punctuation">[</span><span class="token number">1600005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> be<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ed<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> Tmp<span class="token punctuation">[</span><span class="token number">1000005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> L<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> R<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> pos<span class="token punctuation">[</span><span class="token number">1600005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> nxt<span class="token punctuation">[</span><span class="token number">1600005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> head<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Val<span class="token punctuation">[</span><span class="token number">1600005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> appear<span class="token punctuation">[</span><span class="token number">1600005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> lstl<span class="token punctuation">,</span> lstr<span class="token punctuation">;</span>

<span class="token keyword">int</span> st<span class="token punctuation">[</span><span class="token number">1600005</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">lg2</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">31</span> <span class="token operator">-</span> <span class="token function">__builtin_clz</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token function">lg2</span><span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">min</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> st<span class="token punctuation">[</span>r <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> sa<span class="token punctuation">[</span><span class="token number">1600005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rk<span class="token punctuation">[</span><span class="token number">3200005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span><span class="token number">1600005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> id<span class="token punctuation">[</span><span class="token number">1600005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">[</span><span class="token number">1600005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> px<span class="token punctuation">[</span><span class="token number">1600005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> oldrk<span class="token punctuation">[</span><span class="token number">3200005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>oldrk<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> oldrk<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> oldrk<span class="token punctuation">[</span>x <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">==</span> oldrk<span class="token punctuation">[</span>y <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">suffixArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    m <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">300</span> <span class="token operator">+</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> t<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">++</span>cnt<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> cnt<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> sa<span class="token punctuation">[</span>cnt<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">=</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">></span> n <span class="token operator">-</span> j<span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> id<span class="token punctuation">[</span><span class="token operator">++</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>	
        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> j<span class="token punctuation">)</span> id<span class="token punctuation">[</span><span class="token operator">++</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> j<span class="token punctuation">;</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>cnt<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">++</span>cnt<span class="token punctuation">[</span>px<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rk<span class="token punctuation">[</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> cnt<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> sa<span class="token punctuation">[</span>cnt<span class="token punctuation">[</span>px<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>oldrk<span class="token punctuation">,</span> rk<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> oldrk<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
            rk<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cmp</span><span class="token punctuation">(</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> sa<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">?</span> t <span class="token operator">:</span> <span class="token operator">++</span>t<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        j <span class="token operator">=</span> sa<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i <span class="token operator">+</span> k<span class="token punctuation">]</span> <span class="token operator">==</span> str<span class="token punctuation">[</span>j <span class="token operator">+</span> k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>k<span class="token punctuation">;</span>
        height<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> rt<span class="token punctuation">[</span><span class="token number">1600005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> node<span class="token punctuation">;</span>

<span class="token keyword">struct</span> SegMent <span class="token punctuation">{</span>
    <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> cnt<span class="token punctuation">;</span>
<span class="token punctuation">}</span>tree<span class="token punctuation">[</span><span class="token number">20000005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">ls</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">rs</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span><span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">pushup</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt <span class="token operator">=</span> tree<span class="token punctuation">[</span><span class="token function">ls</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cnt <span class="token operator">+</span> tree<span class="token punctuation">[</span><span class="token function">rs</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cnt<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> q <span class="token operator">=</span> <span class="token operator">++</span>node<span class="token punctuation">;</span>
    tree<span class="token punctuation">[</span>q<span class="token punctuation">]</span>	<span class="token operator">=</span> tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> q<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">ins</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    p <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">=</span> <span class="token function">ins</span><span class="token punctuation">(</span><span class="token function">ls</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">=</span> <span class="token function">ins</span><span class="token punctuation">(</span><span class="token function">rs</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">pushup</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">que</span><span class="token punctuation">(</span><span class="token keyword">int</span> p1<span class="token punctuation">,</span> <span class="token keyword">int</span> p2<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> ql<span class="token punctuation">,</span> <span class="token keyword">int</span> qr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> ql <span class="token operator">&amp;&amp;</span> r <span class="token operator">==</span> qr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> tree<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt <span class="token operator">-</span> tree<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">>=</span> qr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">que</span><span class="token punctuation">(</span><span class="token function">ls</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ls</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> ql<span class="token punctuation">,</span> qr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> ql<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">que</span><span class="token punctuation">(</span><span class="token function">rs</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rs</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> ql<span class="token punctuation">,</span> qr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">que</span><span class="token punctuation">(</span><span class="token function">ls</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ls</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> ql<span class="token punctuation">,</span> mid<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">que</span><span class="token punctuation">(</span><span class="token function">rs</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rs</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> qr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">chk</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> ql<span class="token punctuation">,</span> <span class="token keyword">int</span> qr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> posl <span class="token operator">=</span> p<span class="token punctuation">,</span> posr <span class="token operator">=</span> p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">>=</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token function">lg2</span><span class="token punctuation">(</span>p <span class="token operator">-</span> lstl <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>posl <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> st<span class="token punctuation">[</span>posl <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                posl <span class="token operator">-</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        posl <span class="token operator">=</span> p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token function">lg2</span><span class="token punctuation">(</span>lstr <span class="token operator">-</span> p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>posr <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> n <span class="token operator">&amp;&amp;</span> st<span class="token punctuation">[</span>posr<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                posr <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>posl <span class="token operator">></span> posr<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">que</span><span class="token punctuation">(</span>rt<span class="token punctuation">[</span>posl <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rt<span class="token punctuation">[</span>posr <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> ql<span class="token punctuation">,</span> qr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    cin <span class="token operator">>></span> <span class="token punctuation">(</span>Tmp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> l <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>Tmp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> l<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        str<span class="token punctuation">[</span><span class="token operator">++</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> Tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    str<span class="token punctuation">[</span><span class="token operator">++</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>
    cin <span class="token operator">>></span> q<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> q<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cin <span class="token operator">>></span> <span class="token punctuation">(</span>Tmp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>></span> L<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>></span> R<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        be<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> l <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>Tmp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> l<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            str<span class="token punctuation">[</span><span class="token operator">++</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> Tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> pos<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        ed<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">;</span>
        str<span class="token punctuation">[</span><span class="token operator">++</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">300</span> <span class="token operator">+</span> j<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">suffixArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> st<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token string">'z'</span> <span class="token operator">||</span> pos<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> rt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rt<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> rt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">ins</span><span class="token punctuation">(</span>rt<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">[</span>pos<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> head<span class="token punctuation">[</span>pos<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        head<span class="token punctuation">[</span>pos<span class="token punctuation">[</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> q<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ll sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> pp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token punctuation">;</span> i <span class="token operator">=</span> nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sum <span class="token operator">+</span><span class="token operator">=</span> ed<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> Val<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> sum <span class="token operator">-</span><span class="token operator">=</span> Val<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> pp <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> be<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> ed<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            k <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            lstl <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> lstr <span class="token operator">=</span> n<span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">+</span> k <span class="token operator">&lt;=</span> ed<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> L<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> k <span class="token operator">&lt;=</span> R<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">chk</span><span class="token punctuation">(</span>rk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> L<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> R<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> k<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">++</span>k<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 按顺序求 p[rk[i]] 的过程</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>rk<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> pp<span class="token punctuation">)</span> sum <span class="token operator">-</span><span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">-</span> Val<span class="token punctuation">[</span>rk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> sum <span class="token operator">-</span><span class="token operator">=</span> k<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        cout <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>SA 的求解思路为倍增求长度为 $2^k$ 子串的字典序。</li>
<li>求 SA 复杂度 $\mathcal{O}(n\log n)$ ，一般作为整体代码瓶颈。</li>
<li>求 $\text{Height}$ 复杂度 $\mathcal{O}(n)$，注意式子 $height_{rk_i}\geq height_{rk_{i-1}}-1$ 的具体意义，和一些题目上的拓展应用（P4770 中 $p_{rk_i}\geq p_{rk_{i-1}}-1$ 就有类似性质）</li>
<li>求 $\text{lcp}$ 复杂度 $\mathcal{O}(n\log n)-\mathcal{O}(1)$</li>
<li>注意 $\text{lcp}$ 是区间最小值 $\text{Height}$ 的应用。（如用 $height_i\geq k$ 条件二分分组，离线涨水，或者 $\sum\text{lcp}(suf(i),suf(j))\Rightarrow \min\limits_{rk_i&lt;k\leq rk_j}height_k$ 等等）</li>
<li>将 SA 问题转化为区间维护询问问题（CF204E 可转化为单调队列维护区间最大值，P2336 可转化为“HH的项链”经典区间维护问题）</li>
</ul>
<h1 id="参考致谢"><a href="#参考致谢" class="headerlink" title="参考致谢"></a>参考致谢</h1><ol>
<li>教练的 ppt</li>
<li><a href="https://www.luogu.com.cn/blog/xMinh/solution-p3809">xMinh 的博客</a></li>
<li><a href="https://www.luogu.com.cn/blog/Crabby-Maskiv/solution-cf204e">Crabby-Maskiv 的博客</a>，学长 Orz</li>
<li><a href="https://www.luogu.com.cn/blog/Mrsrz/solution-p4770">机巧人偶珂愛</a></li>
<li>…</li>
</ol>
<h1 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h1><p>话说 SAM 啥时候更。。</p>
<p>活过省选再说。</p>
<p>​	</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>省选</category>
        <category>NOI8级</category>
      </categories>
  </entry>
  <entry>
    <title>Manacher 算法</title>
    <url>/2021/12/08/Manacher-%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>马  拉  车</p>
<span id="more"></span>

<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><blockquote>
<p>给定一个字符串 $s$，求它的最长回文子串的长度。$|s|\le 10^7$</p>
</blockquote>
<p>我们需要找到一种线性解法，那就是 $\text{Manacher}$。</p>
<h2 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h2><p>首先回顾回文串的定义，即正序和倒序的字符串一模一样，如 $\texttt{abcba}$。</p>
<p>不难发现每个回文串都有一个对称中心，有时是一个确定的字符，有时对称位不在字符上（长度为偶数）。</p>
<p>因此为了方便，在每两个字符之间加一个相同的字符，这样对称位一定在字符上。</p>
<p>求解时要借助 $p[],mid,mx$，$p_i$ 表示以 $i$ 为中心的<strong>向一个方向的延伸的最长长度而不是整个回文串的长度</strong>，或者可理解为 $p_i&#x3D;\dfrac{len+1}{2}$。</p>
<p>不难发现最终的答案为 $\max(p_i)-1$，那么问题转化为求解 $p$。</p>
<p>那我们先继续说剩下两个：$mx$ 表示**当前的回文串中出现的最右端 $+1$**，$mid$ 表示 <strong>$mx$ 出现的最远的对称中心</strong> 。</p>
<p>然后我们枚举 $i$ 并分类讨论：</p>
<p>① 当 $i$ 在 $mid$ 和 $mx$ 之间，作出 $i$ 关于 $mid$ 的对称点 $j$。</p>
<p><img src="https://s2.loli.net/2021/12/09/P6p1eymH3NTBWGM.png"></p>
<p>假设以 $j$ 为对称中心的最长回文子串为红色部分，那么以 $i$ 为对称中心的最长回文子串一定为相应的紫色部分且不会更长，这个由对应的定义可以证明。</p>
<p><img src="https://s2.loli.net/2021/12/09/Lqo7hEmYpGrCnvb.png"></p>
<p>那如果出现这种情况？</p>
<p><img src="https://s2.loli.net/2021/12/09/xTzjWwgDY6eF5RK.png"></p>
<p>因为当前的只判断到 $mx$ 以前，超过的部分需要充重新判断，这块直接暴力比对即可。</p>
<p>② 当 $i$ 超过 $mx$ 时，重新从最小开始比较即可。</p>
<p>当当前判断到的位置超过 $mx$ 时，更新一下新的 $mx$ 和 $mid$ 即可。</p>
<h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>因为判断过的位置不会再重复判断，所以是线性的复杂度。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> n<span class="token punctuation">,</span> p<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> s<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">manacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> mx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'!'</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'|'</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        s<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> ss<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'|'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    s<span class="token punctuation">[</span>n <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'?'</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>mx <span class="token operator">></span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> mid <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">,</span> mx <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i <span class="token operator">+</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">+</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> mx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            mx <span class="token operator">=</span> i <span class="token operator">+</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> mid <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>省选</category>
        <category>NOI8级</category>
      </categories>
  </entry>
  <entry>
    <title>NOIP2021 游记</title>
    <url>/2021/11/21/NOIP2021-%E6%B8%B8%E8%AE%B0/</url>
    <content><![CDATA[<p>　<span id="more"></span></p>
<p>早上很早就到了 rdf，在大门前碰到了 $\text{smallfang}$，他说他打完 $\text{NOIP}$ 后就不能继续 OI 了，可能重心还是在中考，祝 Ta 中考 AK！</p>
<p><del>考前没说不让用键盘，好评</del></p>
<p>8:30 $T1$ 开题，<del>感觉是个不可做题</del>，$30$ 分钟后跑去看 $T2$。</p>
<p>$T2$ 乍一看没啥思路，但发现大的 $val$ 不会影响到小 $val$，把能想到的状态放在 $dp$ 状态里就有了一个空间 $O(n^3m)$，时间 $O(n^4m)$ 的 nb 做法，推了 $10$ 分钟式子 $+$ $20$ 分钟写代码 $+$ $10$ 分钟调代码就过了大样例。</p>
<p>此时再回头看 $T1$，发现预处理加二分查询貌似可行，看了下循环内层不超过 $5\times10^7$ 次。其实可以优化至 $2\times10^7$ 次以内，但反正能过，码了 $10$ 分钟，特判了 $10000001$ 并过了大样例，此时大约为 10:20。</p>
<p>感觉这场是个起飞场，去了个厕所后回来看 $T3$，$T3$ 一开始也在往奇怪 dp 想，想了 $30$ 分钟后也没有什么合适的状态和转移方程，于是立马开始打暴力，大概是 dfs 并用 map 判重复序列，然后打完这个后又打了一个思路差不多的暴力进行对拍，此时大约为 11:50。</p>
<p>然后去看 $T4$，几分钟后发现只会暴力，并且感觉这题细节很多，贼难写，于是上了个厕所开始全力冲。</p>
<p>一直冲到了 12:40，但仍没有过样例，于是我先去检查了前 $3$ 题，$T1$ 与 $T2$ 目测后感觉没错，$T3$ 拍了几千组没有拍挂，平均用时在 $0.5s$ 以内，于是把这 $3$ 题都交了，然后接着回来调。</p>
<p>遗憾的是，直到 12:55，我也没有调出来。于是我进行了最后的检查如看代码是否可以通过编译、数组是否开小、是否会爆 int，以及数组内存问题，再用仅存的时间调试 $T4$，希望能出现奇迹。</p>
<p>考试结束了，调出 $T4$ 的希望破灭了。</p>
<h2 id="赛后"><a href="#赛后" class="headerlink" title="赛后"></a>赛后</h2><p>考后校内 OIer 群就刷炸了，一如既往的潜水观察（</p>
<p>感觉大家都考的不是很好，我在同届都能 rk4 了。</p>
<p>预估得分 $100+100+?+0$</p>
<p>跑了个民间数据，全 BJ 我能卡进前 $50$，初中能排在十几名。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>今年联赛发挥的虽然没达到既定目标，但我认为这次发挥已经比平时训练要好了。</p>
<p>几个考试时的问题：</p>
<ol>
<li>$T1$ 耽误的时间相对较多，并没有迅速的估计出一个合理复杂度的算法。</li>
<li>$T3$ 并没有想出一些更优的做法（简单说就是算法的性价比较低），如可以尝试随机化算法，能用更少的时间同样获得不错的分数。</li>
<li>基本的搜索还是不够熟练，要不然是可以再拿到 $24$ 分的。</li>
<li><del>比赛时忘记吃巧克力了。</del></li>
</ol>
<p>那就这样吧，等官方成绩和排名出来后更新一波，最后祝各位都能取得理想的成绩！</p>
<h2 id="text-Update"><a href="#text-Update" class="headerlink" title="$\text{Update}$"></a>$\text{Update}$</h2><p>草，$100+100+20+0&#x3D;220$，萎的彻底。</p>
<p>人均分数高于民间数据，tmd</p>
]]></content>
      <categories>
        <category>比赛游记</category>
      </categories>
  </entry>
  <entry>
    <title>数位 dp</title>
    <url>/2021/06/06/%E6%95%B0%E4%BD%8D-dp/</url>
    <content><![CDATA[<p><del>感觉数位DP用记忆化搜索挺简单的。</del></p>
<span id="more"></span>

<h1 id="数位DP记忆化搜索模板"><a href="#数位DP记忆化搜索模板" class="headerlink" title="数位DP记忆化搜索模板"></a>数位DP记忆化搜索模板</h1><pre class=" language-cpp"><code class="language-cpp">ll n<span class="token punctuation">,</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//代表当前到了第 pos 位,某种状态 state 时的答案,state可以为多个状态。</span>

ll <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> state<span class="token punctuation">,</span> <span class="token keyword">bool</span> lead<span class="token punctuation">,</span> <span class="token keyword">bool</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//pos,state 同上,lead 代表是否有前导0,limit 代表是否可以取到原数。</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>pos <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//所有数位搜索完成</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>lead <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>state<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//记忆化</span>
    <span class="token keyword">int</span> up<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit<span class="token punctuation">)</span> up <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这一位可以取 0~9</span>
    <span class="token keyword">else</span> up <span class="token operator">=</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//否则不能超过要求数位</span>
    ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> up<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        特殊判断<span class="token punctuation">;</span>
        ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos<span class="token number">-1</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token punctuation">(</span>lead <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里的 state 是更新后的 state。</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

ll <span class="token function">solve</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
        x <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="P2657-SCOI2009-windy数"><a href="#P2657-SCOI2009-windy数" class="headerlink" title="P2657 [SCOI2009]windy数"></a><a href="https://www.luogu.com.cn/problem/P2657">P2657 [SCOI2009]windy数</a></h2><p>$dp[pos][state]$ 表示当前位为 $pos$,$pos+1$ 位选择 $state$,然后和当前位的选择判断即可。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>
ll a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

ll <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> state<span class="token punctuation">,</span> <span class="token keyword">bool</span> lead<span class="token punctuation">,</span> <span class="token keyword">bool</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pos <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>lead <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> up<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit<span class="token punctuation">)</span> up <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> up <span class="token operator">=</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
    ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> up<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>i <span class="token operator">-</span> state<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>	
        <span class="token keyword">if</span><span class="token punctuation">(</span>lead <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos<span class="token number">-1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos<span class="token number">-1</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>lead<span class="token punctuation">)</span>
        dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>state<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">solve</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
        x <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P4124-CQOI2016-手机号码"><a href="#P4124-CQOI2016-手机号码" class="headerlink" title="P4124 [CQOI2016]手机号码"></a><a href="https://www.luogu.com.cn/problem/P4124">P4124 [CQOI2016]手机号码</a></h2><p>$dp[pos][num1][num2][used4][used8][triple]$ 表示当前位为 $pos$,$pos+1$ 位为 $num1$,$pos+2$ 位为 $num2$,是否有$4$,是否有$8$,是否有三位连续的数。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
ll a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

ll <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">,</span> <span class="token keyword">bool</span> used4<span class="token punctuation">,</span> <span class="token keyword">bool</span> used8<span class="token punctuation">,</span> <span class="token keyword">bool</span> triple<span class="token punctuation">,</span> <span class="token keyword">bool</span> lead<span class="token punctuation">,</span> <span class="token keyword">bool</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pos <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> triple<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>lead <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>num1<span class="token punctuation">]</span><span class="token punctuation">[</span>num2<span class="token punctuation">]</span><span class="token punctuation">[</span>used4<span class="token punctuation">]</span><span class="token punctuation">[</span>used8<span class="token punctuation">]</span><span class="token punctuation">[</span>triple<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>num1<span class="token punctuation">]</span><span class="token punctuation">[</span>num2<span class="token punctuation">]</span><span class="token punctuation">[</span>used4<span class="token punctuation">]</span><span class="token punctuation">[</span>used8<span class="token punctuation">]</span><span class="token punctuation">[</span>triple<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> up<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit<span class="token punctuation">)</span> up <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> up <span class="token operator">=</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
    ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> up<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>used4 <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>used8 <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>lead <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> used4<span class="token punctuation">,</span> used8<span class="token punctuation">,</span> triple<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos<span class="token number">-1</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> num1<span class="token punctuation">,</span> <span class="token punctuation">(</span>used4 <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">||</span> i <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>used8 <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">||</span> i <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>triple <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">||</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> num1 <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>lead<span class="token punctuation">)</span>  
        dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>num1<span class="token punctuation">]</span><span class="token punctuation">[</span>num2<span class="token punctuation">]</span><span class="token punctuation">[</span>used4<span class="token punctuation">]</span><span class="token punctuation">[</span>used8<span class="token punctuation">]</span><span class="token punctuation">[</span>triple<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">solve</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
        x <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P2602-ZJOI2010-数字计数"><a href="#P2602-ZJOI2010-数字计数" class="headerlink" title="P2602 [ZJOI2010]数字计数"></a><a href="https://www.luogu.com.cn/problem/P2602">P2602 [ZJOI2010]数字计数</a></h2><p>本来我的状态为 $dp[pos]$ 表示当前位为 $pos$,含有查找数位的数量。</p>
<p>但是在记忆化时有一个问题</p>
<p>假设我要去找$1$的个数</p>
<p>例如$11110…$,$10234…$这两个数都已经搜了$5$位,则这两个数的状态都是一样的,但很明显前者$1$的数量要比后者的多,所以这个状态不对。</p>
<p>那么怎么才是对的呢?</p>
<p>发现 $11000…$,$12410…$这两个数当前$1$的个数一样,而最后总共$1$的个数应该也是一样的</p>
<p>那么状态定义 $dp[pos][cnt]$ 表示当前位 $pos$,含有 $cnt$ 个查找数位的数量。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>
ll a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

ll <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">,</span> ll cnt<span class="token punctuation">,</span> <span class="token keyword">bool</span> lead<span class="token punctuation">,</span> <span class="token keyword">bool</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pos <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>lead <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>limit <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> up<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit<span class="token punctuation">)</span> up <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> up <span class="token operator">=</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
    ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> up<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>lead <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos<span class="token number">-1</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos<span class="token number">-1</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> cnt <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> key<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>lead <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>limit<span class="token punctuation">)</span> 
        dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">solve</span><span class="token punctuation">(</span>ll x<span class="token punctuation">,</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
        x <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P3286-SCOI2014-方伯伯的商场之旅"><a href="#P3286-SCOI2014-方伯伯的商场之旅" class="headerlink" title="P3286 [SCOI2014]方伯伯的商场之旅"></a><a href="https://www.luogu.com.cn/problem/P3286">P3286 [SCOI2014]方伯伯的商场之旅</a></h2><p><del>梁伯伯</del></p>
<p>借用老师的题解:<br><img src="https://img-kysic-1258722770.file.myqcloud.com/d0b0e8e60ef66b503fa13f804bfb0b61/b1cec811ab3b8.PNG"><br><img src="https://img-kysic-1258722770.file.myqcloud.com/e48dab3ea9c3a8965bd693921a62478e/b7289476c6401.PNG"><br><img src="https://img-kysic-1258722770.file.myqcloud.com/87884a1b3b1ea5ed83a6c7a9b4f83c4a/f82dca87f180a.PNG"></p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxsum <span class="token operator">=</span> <span class="token number">4000</span><span class="token punctuation">;</span>
ll k<span class="token punctuation">,</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxsum<span class="token punctuation">]</span><span class="token punctuation">;</span>

ll <span class="token function">dfs1</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> ll sum<span class="token punctuation">,</span> <span class="token keyword">bool</span> lead<span class="token punctuation">,</span> <span class="token keyword">bool</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pos <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>lead <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>sum<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>sum<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> up<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit<span class="token punctuation">)</span> up <span class="token operator">=</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> up <span class="token operator">=</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
    ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> up<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>lead <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs1</span><span class="token punctuation">(</span>pos<span class="token number">-1</span><span class="token punctuation">,</span> sum<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs1</span><span class="token punctuation">(</span>pos<span class="token number">-1</span><span class="token punctuation">,</span> sum <span class="token operator">+</span> i <span class="token operator">*</span> <span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>lead<span class="token punctuation">)</span>
        dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>sum<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">dfs2</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> ll state<span class="token punctuation">,</span> <span class="token keyword">bool</span> lead<span class="token punctuation">,</span> <span class="token keyword">bool</span> limit<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>state <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pos <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> state<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>lead <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>state<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> up<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit<span class="token punctuation">)</span> up <span class="token operator">=</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> up <span class="token operator">=</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
    ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> up<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>lead <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs2</span><span class="token punctuation">(</span>pos<span class="token number">-1</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pos <span class="token operator">>=</span> key<span class="token punctuation">)</span> ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs2</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> state <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs2</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> state <span class="token operator">-</span> i<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>lead<span class="token punctuation">)</span>
        dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>state<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">solve</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> x <span class="token operator">%</span> k<span class="token punctuation">;</span>
        x <span class="token operator">/</span><span class="token operator">=</span> k<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ll ans <span class="token operator">=</span> <span class="token function">dfs1</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> top<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ans <span class="token operator">-</span><span class="token operator">=</span> <span class="token function">dfs2</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P4317-花神的数论题"><a href="#P4317-花神的数论题" class="headerlink" title="P4317 花神的数论题"></a><a href="https://www.luogu.com.cn/problem/P4317">P4317 花神的数论题</a></h2><p>双倍经验题。</p>
<p>状态同 P2602 [ZJOI2010]数字计数。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
ll a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

ll <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> ll cnt<span class="token punctuation">,</span> <span class="token keyword">bool</span> lead<span class="token punctuation">,</span> <span class="token keyword">bool</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pos <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>cnt<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>lead <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> up<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit<span class="token punctuation">)</span> up <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> up <span class="token operator">=</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
    ll ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> up<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>lead <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">*</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
        <span class="token keyword">else</span> ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">*</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> cnt <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>lead<span class="token punctuation">)</span>
        dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">solve</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">;</span>
        x <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P4999-烦人的数学作业"><a href="#P4999-烦人的数学作业" class="headerlink" title="P4999 烦人的数学作业"></a><a href="https://www.luogu.com.cn/problem/P4999">P4999 烦人的数学作业</a></h2><p>思路同 P2602 [ZJOI2010]数字计数。</p>
<p>设状态 $dp[pos][sum]$ 表示当前位为 $pos$,数字和为 $sum$ 的答案。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">20</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxsum <span class="token operator">=</span> <span class="token number">200</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>
ll a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxsum<span class="token punctuation">]</span><span class="token punctuation">;</span>

ll <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> sum<span class="token punctuation">,</span> <span class="token keyword">bool</span> lead<span class="token punctuation">,</span> <span class="token keyword">bool</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pos <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>lead <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>sum<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>sum<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> up<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit<span class="token punctuation">)</span> up <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> up <span class="token operator">=</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
    ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> up<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> sum <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span>lead <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>lead<span class="token punctuation">)</span>
        dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>sum<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">solve</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
        x <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="T180087-花式打牌"><a href="#T180087-花式打牌" class="headerlink" title="T180087 花式打牌"></a><a href="https://www.luogu.com.cn/problem/T180087">T180087 花式打牌</a></h2><p>这题我想吐槽一下,比赛的时候一直在想容斥,结果喜提$0$分qwq</p>
<p>但如果将每种牌选出的数量当做一个数位,发现可以用数位 dp</p>
<p>考虑分 $\text{op}$ 去写。</p>
<p>$\text{op}&#x3D;1$,状态 $dp[pos][rest][ok]$ 表示当前位为 $pos$,剩余 $rest$ 张,是否有炸弹。</p>
<p>$\text{op}&#x3D;2$,状态 $dp[pos][rest][last][ok]$ 表示当前位为 $pos$,剩余 $rest$ 张,$pos+1$ 位为 $last$,是否有飞机。</p>
<p>$\text{op}&#x3D;3$,发现用四维状态表示前四位的选择空间开销过大,但其实可以只用一维表示已经连续了几种牌。</p>
<p>$\text{op}&#x3D;4$ </p>
<p>若将状态定为 $dp[pos][rest][cnt][last][ok1][ok2][ok3]$ 表示当前位为 $pos$,剩余 $rest$ 张,已经连续了 $cnt$ 为,上一位为 $last$,是否有炸弹,是否有飞机,是否有顺子,则空间过大。</p>
<p>但由于最后选择中不能有飞机和顺子,所以只有出现了飞机和顺子,最后这种选择一定不符合要求。</p>
<p>故可省掉 $ok2$,$ok3$。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxk <span class="token operator">=</span> <span class="token number">1500</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>	
<span class="token keyword">int</span> dp1<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxk<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp2<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxk<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp3<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxk<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp4<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxk<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">dfs1</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> rest<span class="token punctuation">,</span> <span class="token keyword">bool</span> ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>rest <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> pos <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>rest <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ok<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>dp1<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>ok<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp1<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>ok<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span> <span class="token function">dfs1</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> rest <span class="token operator">-</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span>ok <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">||</span> i <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
    dp1<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>ok<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">dfs2</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> rest<span class="token punctuation">,</span> <span class="token keyword">int</span> last<span class="token punctuation">,</span> <span class="token keyword">bool</span> ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>rest <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> pos <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>rest <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">!</span>ok<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>dp2<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token punctuation">[</span>ok<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp2<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token punctuation">[</span>ok<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span> <span class="token function">dfs2</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> rest <span class="token operator">-</span> i<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span>ok <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">||</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> last <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
    dp2<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token punctuation">[</span>ok<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">dfs3</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> rest<span class="token punctuation">,</span> <span class="token keyword">int</span> cnt<span class="token punctuation">,</span> <span class="token keyword">bool</span> ok<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>rest <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> pos <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>rest <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">!</span>ok<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>dp3<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">[</span>ok<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp3<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">[</span>ok<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span>cnt<span class="token punctuation">;</span>
        ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span> <span class="token function">dfs3</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> rest <span class="token operator">-</span> i<span class="token punctuation">,</span> cnt <span class="token operator">+</span> k<span class="token punctuation">,</span> <span class="token punctuation">(</span>ok <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">||</span> cnt <span class="token operator">+</span> k <span class="token operator">>=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    dp3<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">[</span>ok<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">int</span> <span class="token function">dfs4</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> rest<span class="token punctuation">,</span> <span class="token keyword">int</span> cnt<span class="token punctuation">,</span> <span class="token keyword">int</span> last<span class="token punctuation">,</span> <span class="token keyword">bool</span> ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>rest <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> pos <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>rest <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ok<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>dp4<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token punctuation">[</span>ok<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp4<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token punctuation">[</span>ok<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span>cnt<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>cnt <span class="token operator">+</span> k <span class="token operator">>=</span> <span class="token number">5</span> <span class="token operator">||</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> last <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
            ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span> <span class="token function">dfs4</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> rest <span class="token operator">-</span> i<span class="token punctuation">,</span> cnt <span class="token operator">+</span> k<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span>ok <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">||</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    dp4<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token punctuation">[</span>ok<span class="token punctuation">]</span><span class="token operator">=</span>ans<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> opt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>opt <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">memset</span><span class="token punctuation">(</span>dp1<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token function">dfs1</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> x <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>opt <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">memset</span><span class="token punctuation">(</span>dp2<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token function">dfs2</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> x <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>opt <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">memset</span><span class="token punctuation">(</span>dp3<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token function">dfs3</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> x <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>opt <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">memset</span><span class="token punctuation">(</span>dp4<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token function">dfs4</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> x <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P3413-SAC-1-萌数"><a href="#P3413-SAC-1-萌数" class="headerlink" title="P3413 SAC#1 - 萌数"></a><a href="https://www.luogu.com.cn/problem/P3413">P3413 SAC#1 - 萌数</a></h2><p>可以用所有数减去不含回文子串的个数。</p>
<p>那么如何判断是否有回文子串?</p>
<p>因为一个回文串,必定中间的$2$位或$3$位回文,那么如果一个数的任意连续$3$位都不一样,则不是回文串。</p>
<p>定义状态为 $dp[pos][num1][num2]$ 表示当前位为 $pos$,$pos+1$ 位为 $num1$,$pos+2$ 位为 $num2$。</p>
<p>答案可能会很大,一些优化:</p>
<ul>
<li>一般最终答案都是 $solve(r)-solve(l-1)$,那么可以改为 $solve(r)-solve(l)+check(l)$<br> 即单独判断 $l$,不用去写处理 $l-1$。</li>
<li>数的总个数也很多,所以可以在读入的时候先对 $l$ 和 $r$ 进行取模。</li>
</ul>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1000</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> l<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> r<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

ll <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">,</span> <span class="token keyword">bool</span> lead<span class="token punctuation">,</span> <span class="token keyword">bool</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pos <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>lead <span class="token operator">&amp;&amp;</span> num1 <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> num2 <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>num1<span class="token punctuation">]</span><span class="token punctuation">[</span>num2<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>num1<span class="token punctuation">]</span><span class="token punctuation">[</span>num2<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> up<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit<span class="token punctuation">)</span> up <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> up <span class="token operator">=</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
    ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> up<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>lead <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
            <span class="token keyword">else</span> ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">!=</span> num1 <span class="token operator">&amp;&amp;</span> i <span class="token operator">!=</span> num2<span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> num1<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>lead <span class="token operator">&amp;&amp;</span> num1 <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> num2 <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>num1<span class="token punctuation">]</span><span class="token punctuation">[</span>num2<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">char</span> num<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>len <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cin <span class="token operator">>></span> <span class="token punctuation">(</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token punctuation">(</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ll numl <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> numr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        numl <span class="token operator">=</span> <span class="token punctuation">(</span>numl <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        numr <span class="token operator">=</span> <span class="token punctuation">(</span>numr <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
    <span class="token keyword">bool</span> ok <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> l<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">||</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> l<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    len <span class="token operator">=</span> <span class="token punctuation">(</span>numr <span class="token operator">-</span> numl <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> Mod<span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>len <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token function">solve</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">solve</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span> <span class="token operator">+</span> ok<span class="token punctuation">)</span> <span class="token operator">+</span> Mod<span class="token punctuation">)</span> <span class="token operator">%</span> Mod <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P3303-SDOI2013-淘金"><a href="#P3303-SDOI2013-淘金" class="headerlink" title="P3303 [SDOI2013]淘金"></a><a href="https://www.luogu.com.cn/problem/P3303">P3303 [SDOI2013]淘金</a></h2><p>黑题数位dp,<del>但其实还是比较简单的</del> <img src="https://啧.tk/jk"></p>
<p>由于 $f(x)$ 是 $x$ 的各位数字相乘,则我们可以统计每个数的$0\sim9$的个数,并且也能记忆化。</p>
<p>状态 $dp[pos][num1][num2][num3][num4][num5][num6][num7][num8][num9]$ 表示当前位为 $pos$,$1\sim9$ 各用了 $num_1 \sim num_9$ 次的数的个数。</p>
<p>由于 $f(x)&#x3D;0$ 不在坐标轴范围内,则在搜索时判断即可。</p>
<p>然后愉快的发现: $N \le 10^{12}$。明显爆炸。</p>
<p>有没有方法优化呢?</p>
<p>后来想到:</p>
<blockquote>
<ul>
<li>一个数位$9$等价于两个数位$3$</li>
<li>一个数位$8$等价于三个数位$2$</li>
<li>一个数位$6$等价于一个数位$2$和一个数位$3$</li>
<li>一个数位$4$等价于两个数位$2$</li>
<li>数位$1$不会对 $f(x)$ 做出贡献</li>
</ul>
</blockquote>
<p>那么我们就可以将 $num4$,$num6$,$num8$,$num9$ 转化为 $num2$ 与 $num3$。并将 $num1$ 删除。</p>
<p>状态转化为 $dp[pos][num2][num3][num5][num7]$</p>
<p>$13^{10} \rightarrow 13\times 39\times 26\times 13\times 13$</p>
<p>现在我们就有了最终所有的 $f(x)$,但答案是二维的,并且让你取前 $k$ 大的和。</p>
<p>二维可以直接用 $\sum\limits_{i&#x3D;1}^n \sum\limits_{j&#x3D;1}^n num_{f_i}\times num_{f_j}$ 得到,那么如何统计答案？</p>
<p>可以二分答案一个 $mid$,看有多少个值 $\ge mid$,最终找到恰好有 $k$ 个的情况即可。</p>
<p>注意:本题居然爆long long了,使用了一下__int128</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">inline</span> ll <span class="token function">min</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> a <span class="token operator">&lt;</span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token keyword">inline</span> ll <span class="token function">max</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> a <span class="token operator">></span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token keyword">inline</span> ll <span class="token function">abs</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> x <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> x <span class="token operator">:</span> <span class="token operator">-</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> Mod <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxlen <span class="token operator">=</span> <span class="token number">40</span> <span class="token operator">*</span> <span class="token number">27</span> <span class="token operator">*</span> <span class="token number">14</span> <span class="token operator">*</span> <span class="token number">14</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> top<span class="token punctuation">,</span> len<span class="token punctuation">;</span>
ll n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span> <span class="token operator">*</span> maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> maxnum<span class="token punctuation">;</span>
__int128 num<span class="token punctuation">[</span>maxlen<span class="token punctuation">]</span><span class="token punctuation">,</span> sum<span class="token punctuation">[</span>maxlen<span class="token punctuation">]</span><span class="token punctuation">;</span>

ll <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">,</span> <span class="token keyword">int</span> num3<span class="token punctuation">,</span> <span class="token keyword">int</span> num5<span class="token punctuation">,</span> <span class="token keyword">int</span> num7<span class="token punctuation">,</span> <span class="token keyword">bool</span> lead<span class="token punctuation">,</span> <span class="token keyword">bool</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pos <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>num2 <span class="token operator">+</span> num3 <span class="token operator">+</span> num5 <span class="token operator">+</span> num7 <span class="token operator">+</span> lead <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>lead <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>num2<span class="token punctuation">]</span><span class="token punctuation">[</span>num3<span class="token punctuation">]</span><span class="token punctuation">[</span>num5<span class="token punctuation">]</span><span class="token punctuation">[</span>num7<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>num2<span class="token punctuation">]</span><span class="token punctuation">[</span>num3<span class="token punctuation">]</span><span class="token punctuation">[</span>num5<span class="token punctuation">]</span><span class="token punctuation">[</span>num7<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> up<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit<span class="token punctuation">)</span> up <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> up <span class="token operator">=</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
    ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> up<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> lead <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num3<span class="token punctuation">,</span> num5<span class="token punctuation">,</span> num7<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num3<span class="token punctuation">,</span> num5<span class="token punctuation">,</span> num7<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> num2 <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> num2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> num3<span class="token punctuation">,</span> num5<span class="token punctuation">,</span> num7<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> num3 <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>num2<span class="token punctuation">,</span> num3 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> num5<span class="token punctuation">,</span> num7<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> num2 <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> num2 <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> num3<span class="token punctuation">,</span> num5<span class="token punctuation">,</span> num7<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> num5 <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num3<span class="token punctuation">,</span> num5 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> num7<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">6</span> <span class="token operator">&amp;&amp;</span> num2 <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> num3 <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> num2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> num3 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> num5<span class="token punctuation">,</span> num7<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">7</span> <span class="token operator">&amp;&amp;</span> num7 <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num3<span class="token punctuation">,</span> num5<span class="token punctuation">,</span> num7 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">8</span> <span class="token operator">&amp;&amp;</span> num2 <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">)</span> ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> num2 <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">,</span> num3<span class="token punctuation">,</span> num5<span class="token punctuation">,</span> num7<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">9</span> <span class="token operator">&amp;&amp;</span> num3 <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num3 <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> num5<span class="token punctuation">,</span> num7<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>lead<span class="token punctuation">)</span> 
        dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>num2<span class="token punctuation">]</span><span class="token punctuation">[</span>num3<span class="token punctuation">]</span><span class="token punctuation">[</span>num5<span class="token punctuation">]</span><span class="token punctuation">[</span>num7<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">int</span> num2<span class="token punctuation">,</span><span class="token keyword">int</span> num3<span class="token punctuation">,</span><span class="token keyword">int</span> num5<span class="token punctuation">,</span><span class="token keyword">int</span> num7<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ll ans <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num3<span class="token punctuation">,</span> num5<span class="token punctuation">,</span> num7<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    num<span class="token punctuation">[</span><span class="token operator">++</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">;</span>
    maxnum <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxnum<span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">split</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
        x <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span>__int128 x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>x<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x <span class="token operator">=</span> <span class="token operator">-</span>x<span class="token punctuation">;</span>
    <span class="token function">write</span><span class="token punctuation">(</span>x <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">putchar</span><span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span>__int128 x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len<span class="token punctuation">,</span> tag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> tag <span class="token operator">&lt;=</span> len<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>tag <span class="token operator">&lt;=</span> len <span class="token operator">&amp;&amp;</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> num<span class="token punctuation">[</span>tag<span class="token punctuation">]</span> <span class="token operator">&lt;</span> x<span class="token punctuation">)</span> tag<span class="token operator">++</span><span class="token punctuation">;</span>
        tot <span class="token operator">+</span><span class="token operator">=</span> len <span class="token operator">-</span> tag <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> tot <span class="token operator">&lt;</span> k<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">split</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>num2 <span class="token operator">&lt;=</span> <span class="token number">39</span><span class="token punctuation">;</span>num2<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>num3 <span class="token operator">&lt;=</span> <span class="token number">26</span><span class="token punctuation">;</span>num3<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>num5 <span class="token operator">&lt;=</span> <span class="token number">13</span><span class="token punctuation">;</span>num5<span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num7 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>num7 <span class="token operator">&lt;=</span> <span class="token number">13</span><span class="token punctuation">;</span>num7<span class="token operator">++</span><span class="token punctuation">)</span>	
                    <span class="token function">solve</span><span class="token punctuation">(</span>num2<span class="token punctuation">,</span> num3<span class="token punctuation">,</span> num5<span class="token punctuation">,</span> num7<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> num <span class="token operator">+</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    __int128 l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>r <span class="token operator">=</span> <span class="token function">__int128</span><span class="token punctuation">(</span>maxnum<span class="token punctuation">)</span> <span class="token operator">*</span> maxnum<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> val<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> r <span class="token operator">=</span> mid<span class="token punctuation">;</span>
        <span class="token keyword">else</span> l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    val <span class="token operator">=</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len<span class="token punctuation">;</span>i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>sum<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
    ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> num <span class="token operator">+</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">*</span> val <span class="token operator">/</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> num<span class="token punctuation">;</span>
        ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> Mod <span class="token operator">*</span> sum<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
        cnt <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>len <span class="token operator">-</span> id <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>cnt <span class="token operator">></span> k<span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ans <span class="token operator">-</span> val <span class="token operator">%</span> Mod <span class="token operator">*</span> <span class="token punctuation">(</span>cnt <span class="token operator">-</span> k<span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">)</span> <span class="token operator">+</span> Mod<span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre>
<h1 id="总结-amp-吐槽"><a href="#总结-amp-吐槽" class="headerlink" title="总结&amp;吐槽"></a>总结&amp;吐槽</h1><p>总的来说,数位dp可以直接套用记忆化模板,考虑好状态设计就行了,所以我认为还是一个简单的dp类型。</p>
<p>费了一下午的时间终于把坑给补上了,电脑都没电了qwq</p>
<p>还有两周就小中考和学校期末考试了,可能暑假之前就不能更新新的文章了,不过<a href="https://wyy-oier.github.io/2021/02/28/2021%E5%B9%B4%E7%9B%AE%E6%A0%87/">2021年目标</a>还是会更新的。</p>
<p>顺便安排一下接下来学习笔记的内容:</p>
<ol>
<li>树链剖分</li>
<li>可持久化系列</li>
</ol>
<p>大概就是这样了,最后祝大家的小中考能有一个完美的成绩~</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>省选</category>
        <category>NOI7级</category>
      </categories>
  </entry>
  <entry>
    <title>中国剩余定理(CRT)/扩展中国剩余定理(EXCRT)</title>
    <url>/2020/11/18/%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86-CRT-%E6%89%A9%E5%B1%95%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86-EXCRT/</url>
    <content><![CDATA[<p>一元线性同余方程组问题最早可见于中国南北朝时期（公元5世纪）的数学著作《孙子算经》卷下第二十六题，叫做“物不知数”问题，原文如下：</p>
<blockquote>
<p>$有物不知其数，三三数之剩二，五五数之剩三，七七数之剩二。问物几何？$</p>
</blockquote>
<p>即，一个整数除以三余二，除以五余三，除以七余二，求这个整数。《孙子算经》中首次提到了同余方程组问题，以及以上具体问题的解法，因此在中文数学文献中也会将中国剩余定理称为孙子定理。<br>                                        　　　　　　 　　　　　　　　　　　　　　　　　　　　  　　　　　———摘自教练的PPT</p>
<!--less-->

<h1 id="text-crt"><a href="#text-crt" class="headerlink" title="$\text{crt}$"></a>$\text{crt}$</h1><p>中国剩余定理(crt),即让你求解一个关于 $x$ 的同余方程：​</p>
<p>$x\equiv a_1 \pmod{m_1}$</p>
<p>$x\equiv a_2 \pmod{m_2}$</p>
<p>$…$</p>
<p>$x\equiv a_n \pmod{m_n}$</p>
<p>且保证 ${ m_1,m_2…m_n }$ <strong>两两互质</strong>。</p>
<hr>
<p>我们先考虑一个例子：</p>
<p>$x\equiv 2\pmod{3}$</p>
<p>$x\equiv 3\pmod{5}$</p>
<p>$x\equiv 4\pmod{7}$</p>
<p>如果用小奥方法，就是将 $x&#x3D;2$ 不断地加 $3$,发现当 $x&#x3D;8$ 时同时满足第二个式子,然后不停地加 $\operatorname{lcm}(3,5)$，当 $x&#x3D;53$ 时发现全部满足。</p>
<p>我们知道 $a,b,c…| \operatorname{lcm}(a,b,c…)$</p>
<p>所以我们定义 $M_1&#x3D;\operatorname{lcm}(5,7),M_2&#x3D;\operatorname{lcm}(3,7),M_3&#x3D;\operatorname{lcm}(3,5)$</p>
<p>对于第①个式子,我们只需要满足 $t_1M_1\equiv 2 \pmod{m_1}$ ；</p>
<p>对于第②个式子,我们只需要满足 $t_2M_2\equiv 3 \pmod{m_2}$ ；</p>
<p>对于第③个式子,我们只需要满足 $t_3M_3\equiv 4 \pmod{m_3}$ 。</p>
<p>发现可以用 $\operatorname{exgcd}$ 求关于 $t_i$ 的同余方程 $t_iM_i\equiv 1 \pmod{m_i}$ 的最小正整数解</p>
<hr>
<p>那么最终的答案公式应为:</p>
<p>$$(t_1M_1a_1+t_2M_2a_2+…+t_nM_na_n)%\operatorname{lcm(m_1,m_2,…,m_n)}$$</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span>
LL n<span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>m<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>M<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ans<span class="token punctuation">,</span>lcm<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
LL <span class="token function">exgcd</span><span class="token punctuation">(</span>LL a<span class="token punctuation">,</span>LL b<span class="token punctuation">,</span>LL <span class="token operator">&amp;</span>x<span class="token punctuation">,</span>LL <span class="token operator">&amp;</span>y<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> a<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    LL x1<span class="token punctuation">,</span>y1<span class="token punctuation">;</span>
    LL ans<span class="token operator">=</span><span class="token function">exgcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token operator">%</span>b<span class="token punctuation">,</span>x1<span class="token punctuation">,</span>y1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    x<span class="token operator">=</span>y1<span class="token punctuation">;</span>
    y<span class="token operator">=</span>x1<span class="token operator">-</span>a<span class="token operator">/</span>b<span class="token operator">*</span>y1<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>lcm<span class="token operator">*</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        LL x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>total<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>i<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
            total<span class="token operator">*</span><span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        M<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>total<span class="token punctuation">;</span>
        <span class="token function">exgcd</span><span class="token punctuation">(</span>M<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">%</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        ans<span class="token operator">=</span><span class="token punctuation">(</span>ans<span class="token operator">+</span>x<span class="token operator">*</span>M<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>lcm<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h1 id="text-excrt"><a href="#text-excrt" class="headerlink" title="$\text{excrt}$"></a>$\text{excrt}$</h1><p>$\text{excrt}$ 与 $\text{crt}$ 唯一的区别是 $m_i$ 是否两两互质。</p>
<p>考虑去解决其中的两个方程：</p>
<p>$$\begin{cases} x \equiv a_1 \pmod{m_1} \ x \equiv a_2 \pmod{m_2} \end{cases}$$</p>
<p>其中 $\gcd(m_1,m_2)$ 不一定为 $1$。</p>
<p>考虑转化，将式子改写为：</p>
<p>$$\begin{cases} x&#x3D;k_1m_1+a_1 \ x&#x3D;k_2m_2+a_2\end{cases}$$</p>
<p>$$\Rightarrow k_1m_1-k_2m_2&#x3D;a_2-a_1$$</p>
<p>这是二元一次方程基本形式，使用 $\text{exgcd}$ 解决，注意若 $a_2-a_1$ 不为 $\gcd(m_1,m_2)$ 的倍数时无解。</p>
<p>然后我们找到一个满足上述方程的解集中 $k_1$ 的最小非负整数解，然后代入至 $x&#x3D;k_1m_1+a_1$ 求出 $x$，此时 $x$ 对两个方程同时满足，记得出的值为 $x’$。</p>
<p>那么我们可以将这两个方程合并为一个方程：$x\equiv x’ \pmod{\operatorname{lcm}(m_1,m_2)}$。</p>
<p>以此类推合并完所有方程就可以求出最终的答案。</p>
<h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><p><a href="https://www.luogu.com.cn/problem/P4777">P4777 【模板】扩展中国剩余定理</a></p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">double</span> lf<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> Inf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ll Lnf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f3f3f3fll</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> Mod <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">100005</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">;</span>
<span class="token keyword">bool</span> f <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

ll <span class="token function">exgcd</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">,</span> ll <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> ll <span class="token operator">&amp;</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> a<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ll d <span class="token operator">=</span> <span class="token function">exgcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ll z <span class="token operator">=</span> x<span class="token punctuation">;</span>
    x <span class="token operator">=</span> y<span class="token punctuation">,</span> y <span class="token operator">=</span> z <span class="token operator">-</span> y <span class="token operator">*</span> <span class="token punctuation">(</span>a <span class="token operator">/</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> d<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">mul</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">,</span> ll p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    a <span class="token operator">%</span><span class="token operator">=</span> p<span class="token punctuation">,</span> b <span class="token operator">%</span><span class="token operator">=</span> p<span class="token punctuation">;</span>
    ll c <span class="token operator">=</span> <span class="token punctuation">(</span>lf<span class="token punctuation">)</span>a <span class="token operator">*</span> b <span class="token operator">/</span> p<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">*</span> b <span class="token operator">-</span> c <span class="token operator">*</span> p <span class="token operator">+</span> p<span class="token punctuation">)</span> <span class="token operator">%</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span>ll <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> ll <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> ll tm<span class="token punctuation">,</span> ll ta<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ll k<span class="token punctuation">,</span> tk<span class="token punctuation">,</span> g <span class="token operator">=</span> <span class="token function">exgcd</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> tm<span class="token punctuation">,</span> k<span class="token punctuation">,</span> tk<span class="token punctuation">)</span><span class="token punctuation">,</span> lcm <span class="token operator">=</span> m <span class="token operator">/</span> g <span class="token operator">*</span> tm<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">-</span> ta<span class="token punctuation">)</span> <span class="token operator">%</span> g <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        f <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    k <span class="token operator">=</span> <span class="token function">mul</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token punctuation">(</span>ta <span class="token operator">-</span> a<span class="token punctuation">)</span> <span class="token operator">/</span> g<span class="token punctuation">,</span> tm <span class="token operator">/</span> g<span class="token punctuation">)</span><span class="token punctuation">;</span>
    a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">mul</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> m<span class="token punctuation">,</span> lcm<span class="token punctuation">)</span> <span class="token operator">+</span> a<span class="token punctuation">)</span> <span class="token operator">%</span> lcm<span class="token punctuation">;</span>
    m <span class="token operator">=</span> lcm<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a <span class="token operator">+</span><span class="token operator">=</span> m<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">excrt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ll a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> ta<span class="token punctuation">,</span> tm<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>tm<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ta<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">solve</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> a<span class="token punctuation">,</span> tm<span class="token punctuation">,</span> ta<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">excrt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>省选</category>
        <category>NOI7级</category>
      </categories>
  </entry>
  <entry>
    <title>NOIP2020 游记</title>
    <url>/2020/10/13/NOIP2020-%E6%B8%B8%E8%AE%B0/</url>
    <content><![CDATA[<p>　<span id="more"></span><br><del>看到初赛过了直接前来写游记。</del></p>
<h4 id="2020-10-01-2020-10-07"><a href="#2020-10-01-2020-10-07" class="headerlink" title="2020.10.01~2020.10.07"></a>2020.10.01~2020.10.07</h4><p>去了计蒜客上课。复习了一些学过的算法,对初赛帮助不太大。</p>
<p>所以我就去看了我们教练整理的初赛复习知识,又结合了信息学奥赛一本通,感觉提升了不少。</p>
<h4 id="2020-10-08"><a href="#2020-10-08" class="headerlink" title="2020.10.08"></a>2020.10.08</h4><p>和同学们参加洛谷举办的<a href="https://www.luogu.com.cn/problem/U134036">初赛模拟赛</a>得84分,感觉被大佬们dd了。</p>
<h4 id="2020-10-10"><a href="#2020-10-10" class="headerlink" title="2020.10.10"></a>2020.10.10</h4><p>晚上又在<strong>洛谷<del>(没)</del>有题</strong>中做了两套提高组试题,感觉状态还行。</p>
<h4 id="2020-10-11"><a href="#2020-10-11" class="headerlink" title="2020.10.11"></a>2020.10.11</h4><p>上午9:30开始考提高组。</p>
<p>选择题比往年善良多了，只错了香农那道题。阅读程序的最后一题和完善程序的最后一题还是很毒瘤的,部分都是直接瞎蒙的，应该也没对多少，剩下的用草稿纸慢慢推就行了。</p>
<p>考完回家吃了饭,<del>写了会学校作业</del>稍微歇了歇就去考普及。</p>
<p>普及也非常的良心,头一次出现阅读程序的两题我都做过。不过考试还有最后5分钟的时候,我成功睿智的把两道题给改错了。艹</p>
<p>等着发成绩吧。</p>
<h4 id="2020-10-13"><a href="#2020-10-13" class="headerlink" title="2020.10.13"></a>2020.10.13</h4><p>成绩这么快就发了,还好我都过了。<br><a href="http://www.student.gov.cn/art/2020/10/13/art_24163_469681.html">北京分数线</a><br>看起来北京好弱啊,提高分数线比去年低多了,不过我们信竞队还是有很强的大佬。</p>
<hr>
<center> $初赛告一段落,游记暂时停更。$ </center>

<hr>
<h4 id="2020-11-07"><a href="#2020-11-07" class="headerlink" title="2020.11.07"></a>2020.11.07</h4><p>终于到了CSP复赛的日子。</p>
<p>上午考普及。</p>
<p><del>T1比往年要难啊</del>,搞了$10$分钟才弄出来。</p>
<p>T2开始我想的是用过$sort$来排序,时间复杂度 $O(n^2logn)$。</p>
<p>一看就暴毙了啊,过了一会儿想到用插入排序将新来的数插入数组中,时间复杂度 $O(n^2)$。</p>
<p>很明显只有85分,但是当时我没有想到更好的方法,于是去搞T3。</p>
<p>然而T3搞了两个小时只打了$30$的暴力,我人没了。</p>
<p>做T4的时候只有10分钟了,打暴力也来不及了,于是输出样例骗分滚粗。</p>
<p>出来后发现,T2原来用桶维护就行了,复杂度 $O(600n)$。艹我没想出来</p>
<p>还有巨佬T2写了平衡树。。。CCCCCOrz</p>
<p>T4是个简单动态规划,早知道先做T4了。</p>
<p>预估:$100+85+30+0&#x3D;215$</p>
<p>下午考提高。</p>
<p>第一次考提高有点紧张,进考场前还碰到了 yxx 巨佬,$rp++$</p>
<p>T1是个大模拟,堪称全场最恶心的题,考试时调了$3$小时才过了大样例。中间电脑卡死了半小时艹</p>
<p>T2相对就简单多了,但是大样例没有过。最后没有时间打T3T4的暴力。</p>
<p>考后发现洛谷上一堆人问候T1的出题人,确实很缺德。</p>
<p>预估:$100+0+0+0&#x3D;100$</p>
<h4 id="2020-11-30"><a href="#2020-11-30" class="headerlink" title="2020.11.30"></a>2020.11.30</h4><p>普及:$100+85+30+0&#x3D;215$</p>
<p>提高:$80+40+0+0&#x3D;120$</p>
<p>提高居然比预测的高人傻了。。。</p>
<p>我们教练预测 1&#x3D; 分数线$140$, yxx $135$估计心态要崩了。</p>
<h4 id="2020-12-04"><a href="#2020-12-04" class="headerlink" title="2020.12.04"></a>2020.12.04</h4><p>最重要的 NOIP 终于要来了,狂刷模板(学过的):</p>
<p><img src="/test2.jpg"></p>
<p><del>貌似也没刷几道</del></p>
<h4 id="2020-12-05"><a href="#2020-12-05" class="headerlink" title="2020.12.05"></a>2020.12.05</h4><blockquote>
<p>终于到了,决战的日子。</p>
</blockquote>
<p><strong>8:30</strong> 开始考试。</p>
<p><strong>8:30 $\sim$ 9:20</strong></p>
<p>T1开题,一道图上的拓扑排序,主要处理好分数转化就行了,但我用的是dfs,我以为最后几个点可能会T,预计80$\sim$100pts。</p>
<p><strong>9:20 $\sim$ 10:10</strong> </p>
<p>T2开题,一道字符串匹配问题,貌似用KMP算法可以100,但我们教练没给我们讲,于是写了个32分的 $O(n^3)$ 。一直在想复杂度问题,浪费了很长时间。</p>
<p><strong>10:10 $\sim$ 10:20</strong></p>
<p>优化了桶数组,时间复杂度 $O(n^2)$,预计得分48。</p>
<p><strong>10:20 $\sim$ 10:55</strong></p>
<p>发现可以只用一种字符,可以用 $O(n \surd{n})$ 解决,预计得分56。</p>
<p><strong>10:55 $\sim$ 11:00</strong> 歇了会儿,去了个厕所。</p>
<p><strong>11:0011:40</strong> T3搞了40分钟,毫无头绪。</p>
<p><strong>11:40</strong></p>
<p>一人发了个面包和两个士力架 <strong>(CCF真良心?)</strong> 后来被收回去一个士力架 <strong>(“猿”形毕露)</strong><br>吃着面包看T4。</p>
<p><strong>11:40 $\sim$ 12:40</strong></p>
<p>cnm理解题意用了20分钟。有很多维度?</p>
<p>发现 $k\le 5$ 时暴力可做,于是开始肝,直接 $k&#x3D;1,2,3,4,5$ 暴力分支模拟,</p>
<p>预计得分30。</p>
<p><strong>12:40 $\sim$ 12:57</strong></p>
<p>其实最后20分钟都是检查,但我分成了两部分。</p>
<hr>
<hr>
<hr>
<p><strong>12:57~13:00</strong></p>
<p>我做了我这一次比赛最正确的决定。</p>
<p>我打开了提交网站,打开了T1,把<strong>网站上</strong>T1的代码复制到guide里,又把三组样例提交了一遍,惊奇的发现,第二组样例过不去!!!</p>
<p>我TM懵了,又试了第三组样例,还是不对,这时我的腿已经不由自主地抖动,不能因为一点失误导致了 $100\rightarrow 0$ 的惨案。</p>
<p>冷静下来后,我突然发现,这个错误跟我一开始调T1时的错误一样,这给了我调的希望,经过2分钟的浏览,我发现了错误,改正了之后又提交了回去,此时距离结束还有40多秒。</p>
<p>(不过为什么前面那段时间没检查出来。。。但是后面发生的事情充分说明了我前面17分钟的检查等于啥都没干)</p>
<p><strong>13:00</strong> 结束考试。</p>
<p><strong>赛后</strong></p>
<p>有人一直在讨论关于T1的题意,于是我对我的代码进行了回忆,经过 $n$ 次反复横跳,感觉还是没错…</p>
<p>但是T1貌似能卡高精度,我只开了long long,看来是躲不过去了。。。</p>
<p>预估:$80 \sim 100+56+0+30&#x3D;166\sim 186$</p>
<h4 id="2020-12-06"><a href="#2020-12-06" class="headerlink" title="2020.12.06"></a>2020.12.06</h4><p>BJ发代码了。。。</p>
<p>评测后发现,T4怎么才15分啊?</p>
<p>最后我发现,我TM T4忘在主函数中加入 $k&#x3D;5$的情况!!!</p>
<p>而数据是这样的:</p>
<table>
<thead>
<tr>
<th align="center">测试点编号</th>
<th align="center">$n\le$</th>
<th align="center">$k\le$</th>
<th align="center">$w_i\le$</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$1\sim 3$</td>
<td align="center">$5$</td>
<td align="center">$5$</td>
<td align="center">$3$</td>
</tr>
<tr>
<td align="center">$4\sim 6$</td>
<td align="center">$100$</td>
<td align="center">$3$</td>
<td align="center">$10$</td>
</tr>
<tr>
<td align="center">$7\sim 8$</td>
<td align="center">$10^5$</td>
<td align="center">$1$</td>
<td align="center">$10^5$</td>
</tr>
<tr>
<td align="center">$9\sim 12$</td>
<td align="center">$10^5$</td>
<td align="center">$2$</td>
<td align="center">$10^6$</td>
</tr>
<tr>
<td align="center">$13\sim 16$</td>
<td align="center">$5\times 10^5$</td>
<td align="center">$10$</td>
<td align="center">$10^6$</td>
</tr>
<tr>
<td align="center">$17\sim 20$</td>
<td align="center">$5\times 10^5$</td>
<td align="center">$3$</td>
<td align="center">$10^9$</td>
</tr>
</tbody></table>
<p>本来测试点$1\sim 6$我都可以过的,但如果前$3$个点都是 $k&#x3D;5$ 我就炸了。(我只有 $k&#x3D;1,2,3,4$)</p>
<center> ----------$\text{To be continued}...$ ----------</center>

<h4 id="The-End"><a href="#The-End" class="headerlink" title="The End?"></a>The End?</h4><p>终于发分了: 70+56+0+15&#x3D;141</p>
<p>BJ一等线140分，成功卡在最后一名（（</p>
<h4 id="几个月后。。。"><a href="#几个月后。。。" class="headerlink" title="几个月后。。。"></a>几个月后。。。</h4><p>没错，NOIP2020一等的同学们可以参加省选</p>
<p>BJOI2021见！</p>
<center> ----------$\text{The End}$----------</center>]]></content>
      <categories>
        <category>比赛游记</category>
      </categories>
  </entry>
</search>
