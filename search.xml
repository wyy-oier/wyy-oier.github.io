<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2022-2023 OI赛季</title>
    <url>/2022/08/27/2022-2023-OI%E8%B5%9B%E5%AD%A3/</url>
    <content><![CDATA[<blockquote>
<p>$\text{No more chance…}$</p>
</blockquote>
<h1 id="text-2022-年-text-9-月"><a href="#text-2022-年-text-9-月" class="headerlink" title="$\text{2022}$ 年 $\text{9}$ 月"></a>$\text{2022}$ 年 $\text{9}$ 月</h1><p>模拟赛 $1$：</p>
<p>得分 $100+90+100+30&#x3D;320$，相对符合预期。</p>
<p>题目难度：前 $3$ 题简单，第 $4$ 题较难。</p>
<p>做题策略：顺开并没有什么问题。</p>
<p>所出现的问题：整体没有大问题，有时在简单题的调试花费过久，但因为整体简单所以能够调完。</p>
<p>一些优点：由于题目简单，两道题都写了对拍（结果确实都挂了），一道题没写对拍结果挂了。</p>
<p>模拟赛 $2$：</p>
<p>得分 $80+40+60+0&#x3D;180$，远低于预期。</p>
<p>题目难度：前 $3$ 题简单，第 $4$ 题较难。</p>
<p>做题策略：第 $1$ 题是大模拟，先跳了去写第 $2$ 题和第 $3$ 题，最后去写第 $1$ 题，策略较为正确。</p>
<p>所出现的问题：第 $1$ 题大模拟讨论漏了一种简单但重要的条件，第 $2$ 题数组开小，第 $3$ 题代码又犯了微信步数的错误，未将一些函数加在主函数里，加之后对拍 RE，场上没调完，最后发现是打表忘了在数组开头插一个 $0$。</p>
<p>一些优点：做题策略还不错。</p>
<p>模拟赛 $3$：</p>
<p>得分 $100+0+0&#x3D;100$，低于预期。</p>
<p>题目难度：第 $1$ 题简单，$2,3$ 相对较难。</p>
<p>做题策略：顺开并没有什么问题。</p>
<p>所出现的问题：没有太大的问题，主要第二题没有想到一个较为优秀的做法，下次应该想到一个好写的做法并梳理清洗后再开始写。</p>
<p>一些优点：花时间拍了第 $1$ 题。</p>
<p>模拟赛 $4$：</p>
<p>得分 $40+70+0+50&#x3D;160$，远低于预期。</p>
<p>现在出现的问题是，代码能力和判断能力还是很弱，理论上会的分应该有 $100+100+50+100$，但是由于代码能力欠缺，还是不够时间调试完。</p>
<p>题目难度：第 $1,2$ 题简单，$3,4$ 题较难。</p>
<p>做题策略：写第 $3$ 题想不到正解打了 $50$ 的暴力然后去看第 $4$ 题发现会做（最后只是没调完），策略还是很正确。</p>
<p>所出现的问题：前 $2$ 题没有仔细地考虑特殊情况也没有对拍，所以有不同程度的挂分，但这一切的主要问题还是代码能力弱的体现，第 $4$ 题 $30$ 分钟也没调出来，不过细节确实比较多。</p>
<p>一些优点：快速的跳过了自己不太会写正解的题，不过其实是一个简单的矩阵快速幂。</p>
<p>模拟赛 $5$：</p>
<p>得分 $100+0+0&#x3D;100$，低于预期。</p>
<p>题目难度：$1,2$ 题简单，第 $3$ 题较难。</p>
<p>做题策略：第 $1$ 题写了 $\text{5k}$ 代码没调出来后果断先去做第 $2$ 题，最后 $30$ 分钟想到了第 $1$ 题的<strong>极其简单</strong>的做法，迅速通过。</p>
<p>所出现的问题：第 $1$ 题在开场一直被诈骗，要提升自己的防诈能力，如果能快速写完的话我肯定会对拍，但是为什么每次都是在调题上浪费太多时间。。。</p>
<p>一些优点：没什么优点。</p>
<p>模拟赛 $6$：</p>
<p>得分 $0+40+0+0&#x3D;40$，低于预期。</p>
<p>我认为教练说的很有道理：判断力也是十分重要的能力，我在开场已经浏览了一遍所有题目，应该先有一个大概的判断哪道题想正解还是写暴力，最后还是顺序开题并陷入调试导致没有暴力分。</p>
<p>题目难度：所有题都较难。</p>
<p>做题策略：比较乱。</p>
<p>所出现的问题：没有打后面题的暴力。</p>
<p>一些优点：没什么优点。</p>
]]></content>
  </entry>
  <entry>
    <title>Hexo 博客主题开发</title>
    <url>/2022/04/10/Hexo-%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<p>这是一项大工程。。。工程量预计 $\text{40 hours+}$ </p>
<p>目标：创建一个主要为自己 Hexo 博客的主题 $\text{hexo-theme-MeaningLessNess}$ 并记录开发过程。</p>
<p>大部分的内容看起来会比较枯燥。。。不知道能不能坚持做下去</p>
<h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><p><a href="https://hexo.io/zh-cn/docs/themes">主题 | Hexo</a></p>
<p>在创建之前，我们需要了解一个 $\text{Hexo}$ 主题 $\text{Theme}$ 文件夹的构成。</p>
<p>打开默认主题 $\text{\Blog\themes\landscape}$，找到四个文件夹和一个文件：</p>
<ul>
<li>$\text{lanauages:}$ 语言</li>
<li>$\text{layout:}$ 页面布局</li>
<li>$\text{script:}$ $\text{Hexo}$ 脚本</li>
<li>$\text{source: }$ 主题资源文件，包括页面样式，脚本，字体等</li>
<li>$\text{_config.yml:}$ 主题配置文件（由于 $\text{\Blog}$ 目录下也有一个 $\text{_config.yml}$，为了区分我们叫主题内的为主题配置文件，主目录下叫博客配置文件）</li>
</ul>
<h1 id="创建主题"><a href="#创建主题" class="headerlink" title="创建主题"></a>创建主题</h1><p>在 $\text{\Blog\themes}$ 目录下创建一个名为 $\text{hexo-theme-example}$ 的文件夹，将上述部分先加入到主题文件夹中。</p>
<p>注意，后文的主题文件夹名为 $\text{hexo-theme-MeaningLessNess}$。</p>
<p>记得将主题配置文件中的主题改为制作的主题。</p>
<img src="https://s2.loli.net/2022/04/10/NfhTMcyz4BuPGlr.png" alt="Hexo-博客主题开发-01.png" style="zoom: 67%;" />

<h1 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h1><p>学习一下 $\text{HTML},\text{CSS},\text{JavaScript}$ 等的使用，也可以边做边学。</p>
<h1 id="空白主题的基本配置"><a href="#空白主题的基本配置" class="headerlink" title="空白主题的基本配置"></a>空白主题的基本配置</h1><p>我们先来简单的布置一些主站界面。</p>
<p>我们在 $\text{\hexo-theme-MeaningLessNess\layout}$ 路径放入三个文件：</p>
<ul>
<li>$\text{post.ejs:}$ 每一篇单独文章的模板。</li>
<li>$\text{post_entry.ejs:}$ 主页上文章列表中每一项的模板。</li>
<li>$\text{index.ejs:}$ 是唯一必不可少的，是网站主页的模板。如果少了 $\text{index.ejs}$ 会报错。</li>
</ul>
<p>在 $\text{\layout\index.ejs}$ 中，放入如下代码：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content-type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0, maximum-scale<span class="token punctuation">=</span>1.0, user-scalable<span class="token punctuation">=</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello World.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
</code></pre>
<p>运行后可以得到：</p>
<img src="https://s2.loli.net/2022/04/10/uGXYKAb2QvzDx5e.png" alt="Hexo-博客主题开发-02.png" style="zoom: 33%;" />

<p>对了，这里我发现不要用记事本去编辑中文内容，可能会产生乱码，于是我采用了编程软件编辑，果然能打印中文字体了。</p>
<p>现在我们需要使用一个 <code>partial()</code> 函数包含其它文件，这样能使我们更好的组织代码。</p>
<p>我们在 $\text{\layout}$ 目录下建立 $\text{_partial}$  文件夹，用于存放一些部分的布局文件，这样我们可以在 $\text{\layout\index.ejs}$ 等文件中直接使用。</p>
<p>在 $\text{_partial}$ 文件夹中，我们可以放置如下文件：</p>
<ul>
<li>$\text{header.ejs:}$ 页首文件</li>
<li>$\text{footer.ejs:}$ 页脚文件</li>
<li>$\text{sidebar.ejs:}$ 侧边栏文件</li>
</ul>
<p>比如我在 $\text{\layout_partial\header.eps}$ 中写入：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Welcome.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
</code></pre>
<p>在 $\text{\layout\index.eps}$ 中稍作修改：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content-type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0, maximum-scale<span class="token punctuation">=</span>1.0, user-scalable<span class="token punctuation">=</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>WyyOIer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    &lt;%- partial('_partial/header') %>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>qwq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
</code></pre>
<p>即可看到主站界面变为：</p>
<img src="https://s2.loli.net/2022/04/11/ELTym8pFXNczloG.png" alt="Hexo-博客主题开发-03.png" style="zoom:33%;" />

<p>也就是在加载 $\text{indes.ejs}$ 的 <code>&lt;%- partial(&#39;_partial/header&#39;) %&gt;</code> 时，自动将 $\text{\layout_partial\header.ejs}$ 中的内容放置在代码中，对后续操作和检查十分方便，而 <code>partial()</code> 函数可以传参，具体操作和效果深入修改时再说。</p>
<h1 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h1><p>在配置主题之前，先进行一些小小的设计，让后续的编写更有目标性。</p>
<p>参考了一些官网的主题。 <a href="https://hexo.io/themes/">Themes | Hexo</a> </p>
<h1 id="正式制作"><a href="#正式制作" class="headerlink" title="正式制作"></a>正式制作</h1><h2 id="文章-text-post"><a href="#文章-text-post" class="headerlink" title="文章 $(\text{post})$"></a>文章 $(\text{post})$</h2><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>主要希望实现显示文章的一级标题、二级标题、三级标题所组成的目录表格，并且点击后能够自动跳转到相应位置。</p>
<p>由于需要用到 $\text{JavaScript}$，借鉴了一下其他人的代码，但始终无效。</p>
<p>检查后发现，代码中有这样一句话：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> labelList <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#article"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>打开浏览器的检查页面，发现了如下报错信息：</p>
<p><img src="https://s2.loli.net/2022/05/06/YZy1DqveIQdBaNb.png" alt="Hexo-博客主题开发-06.png"></p>
<p>百度发现后，需要引用 $\text{JavaScript}$ 的 $\text{jQuery}$ 库，可以从网上下载，也可直接使用在线文件。</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://code.jquery.com/jquery-3.6.0.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
</code></pre>
<p>再次刷新后发现已能正常显示。</p>
<h3 id="代码块高亮"><a href="#代码块高亮" class="headerlink" title="代码块高亮"></a>代码块高亮</h3><p>采用的是 $\text{hexo-prism-plugin}$ 插件。</p>
<p>安装方法：</p>
<pre><code>hexo i -S hexo-prism-plugin
</code></pre>
<p>然后在博客配置文件中加入：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">prism_plugin</span><span class="token punctuation">:</span>
  <span class="token key atrule">mode</span><span class="token punctuation">:</span> <span class="token string">'preprocess'</span>
  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'default'</span>
  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  <span class="token key atrule">custom_css</span><span class="token punctuation">:</span>
</code></pre>
<p>就可以实现代码块高亮，记得还要把自带的 <code>highlight</code> 和 <code>prismjs</code> 的 <code>enable</code> 设为 <code>false</code>。</p>
<p>高亮主题可以自行设计，加到 $\text{\node_modules\prismjs\themes}$ 目录下即可。</p>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>在每个链接后添加 <code>fa fa-link</code> 图标，如： <a href="/">link</a></p>
<p>我们可以使用 <code>::after</code> 伪元素为某个元素添加类似后缀的东西，注意 <code>content</code> 中不能插入图片，于是去 $\text{font-awesome.css}$ 中找到了 <code>fa fa-link</code> 的图标，用 <code>\f08e</code> 表示，故在 $\text{main.css}$  放入如下代码：</p>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#article</span> a<span class="token pseudo-element">::after</span> </span><span class="token punctuation">{</span>
   <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">' \f08e '</span><span class="token punctuation">;</span>
   <span class="token property">font-family</span><span class="token punctuation">:</span> FontAwesome<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>然后发现，不仅正常的链接被显示，所有的大标题前也都有链接，这是因为在添加标题标签时自动补充的链接。</p>
<img src="https://s2.loli.net/2022/05/11/BJSpDh8HdYX1ZLk.png" alt="Hexo-博客主题开发-10.png" style="zoom: 67%;" />

<p>我们发现每个小标题都有一个叫 <code>headerlink</code> 的 <code>class</code>，所以在 $\text{main.css}$ 中补充：</p>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#article</span> a<span class="token class">.headerlink</span><span class="token pseudo-element">::after</span> </span><span class="token punctuation">{</span>
    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>这样即可让小标题前不显示链接标记。</p>
<h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>因为图片有时不易被发现，所以希望实现在每个图片下都有一个 <code>fa fa-image</code> 加图片名称的显示。</p>
<p>这次自己实现了一个 $\text{JavaScript}$。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> labelList <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#article"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> imgList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'labellength: '</span> <span class="token operator">+</span> labelList<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>


<span class="token keyword">function</span> <span class="token function">dfs</span><span class="token punctuation">(</span>ulist<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> ulist<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ulist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span>ulist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            imgList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>node<span class="token punctuation">:</span> <span class="token function">$</span><span class="token punctuation">(</span>ulist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> alt<span class="token punctuation">:</span> ulist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>alt<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">var</span> vlist <span class="token operator">=</span> ulist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>vlist<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">dfs</span><span class="token punctuation">(</span>vlist<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token function">dfs</span><span class="token punctuation">(</span>labelList<span class="token punctuation">)</span><span class="token punctuation">;</span>

imgList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>image<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    image<span class="token punctuation">.</span>node<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token string">'&lt;p class = image-name>'</span> <span class="token operator">+</span> image<span class="token punctuation">.</span>alt <span class="token operator">+</span> <span class="token string">'&lt;/p>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'res: '</span> <span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>学过算法的应该能理解吧，这里主要说几个内置函数：</p>
<ul>
<li><code>$(name).is(&quot;elementname&quot;)</code>：可以理解为判断某个 <code>html</code> 语言是否为这个元素。</li>
<li><code>name.node.after(html)</code>：在某个元素后插入一段 <code>html</code> 语言。</li>
<li><code>console.log(...)</code>：将一些东西输出到 <code>F12</code> 的控制台。</li>
</ul>
<p>也不知道能不能这么说，完全是自己的理解。</p>
<p>这样我们就能实现图片后添加图片名称，但前提是你需要在写文章引用图片时，保留图片名。</p>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>还有一些零零碎碎的细节，不作过多介绍，请参见 <a href="/css/main.css">main.css</a> 的 $\text{post.ejs}$ 部分。</p>
<h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><p>安装插件清单：</p>
<ul>
<li>$\text{hexo-deployer-git}$</li>
<li>$\text{hexo-prism-plugin}$</li>
<li>$\text{hexo-generator-index-pin-top}$</li>
<li>$\text{hexo-blog-encrypt}$</li>
<li>$\text{hexo-hide-posts}$</li>
<li>$\text{hexo-generator-searchdb}$</li>
</ul>
<h1 id="text-More-Tips"><a href="#text-More-Tips" class="headerlink" title="$\text{More Tips}$"></a>$\text{More Tips}$</h1><ol>
<li><p>$\text{Font Awesome}$</p>
<blockquote>
<p>Font Awesome 字体为您提供可缩放矢量图标,它可以被定制大小、颜色、阴影以及任何可以用CSS的样式。</p>
</blockquote>
<p>使用方法：</p>
<p>在<a href="http://www.fontawesome.com.cn/">Font Awesome 中文网 – | 字体图标</a>中下载文件，解压出文件夹，拷出当中的 $\text{css}$ 和 $\text{font}$ 文件夹，然后放在主题文件夹中的某个位置。</p>
</li>
<li><p>$\text{Hexo}$ 部署至 $\text{github}$</p>
<p>通过 <code>hexo g -d</code> 指令部署，即可将本地文件上传至 $\text{github}$ 仓库。在传取少量主题个性图片时，可以将图片放在 $\text{\hexo-theme-MeaningLessNess\source\images}$ 中，部署后可以通过 $\text{url&#x2F;images&#x2F;name.*}$ 访问。如将我的博客网站图标以 $\text{favicon.ico}$ 存在上述路径中，则访问时可以通过 <a href="https://wyy-oier.github.io/images/favicon.ico">https://wyy-oier.github.io/images/favicon.ico</a> 访问。</p>
</li>
<li><p><code>Hexo g</code> 指令生成缺少 $\text{index.html}$ 等主要文件</p>
<p>生成文件或者部署到本地时，不包含 $\text{index.html}$ 文件，导致了博客无法正常加载。</p>
<img src="https://s2.loli.net/2022/05/05/XgLvGF7Thusjmc6.png" alt="Hexo-博客主题开发-04.png" style="zoom: 67%;" />

<p>解决方案：我采用了暴力方法，直接 <code>hexo init</code>。重新 <code>hexo g</code> 和 <code>hexo d</code>，果然就有相应的文件了。</p>
<img src="https://s2.loli.net/2022/05/05/KpsDeFY7MhTowxB.png" alt="Hexo-博客主题开发-05.png" style="zoom:67%;" />

<p>再把主题复制回去，即可修复成功。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>校内膜你赛精选题</title>
    <url>/2022/04/02/%E6%A0%A1%E5%86%85%E8%86%9C%E4%BD%A0%E8%B5%9B%E7%B2%BE%E9%80%89%E9%A2%98/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="0effaa9aa7d8ff043b009fa282800a4a0a8c7acb09be189c9935dbef7ded99a6"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">在此输入密码,按回车键确定。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>NOIP2022 游记</title>
    <url>/2022/09/18/NOIP2022-%E6%B8%B8%E8%AE%B0/</url>
    <content><![CDATA[<p>从 $\text{CSP2022-S1}$ 至 $\text{NOIP2022}$ 的大型连载记录，部分内容与<a href="/2022/08/27/2022-2023-OI%E8%B5%9B%E5%AD%A3/">2022-2023 OI赛季</a>重合。</p>
<h1 id="text-Day-82"><a href="#text-Day-82" class="headerlink" title="$\text{Day -82}$"></a>$\text{Day -82}$</h1><p>$\text{CSP-S}$ 初赛。</p>
<p>考场上不会 $-k$ 进制转换，一道大题喜提 $-10$。</p>
<h1 id="text-Day-73"><a href="#text-Day-73" class="headerlink" title="$\text{Day -73}$"></a>$\text{Day -73}$</h1><p>出分了，$74.5$，果然垫底。</p>
<p>希望 $\text{CSP-S}$ 有好的发挥。</p>
<h1 id="text-Day-41-赛时"><a href="#text-Day-41-赛时" class="headerlink" title="$\text{Day -41}$ 赛时"></a>$\text{Day -41}$ 赛时</h1><p>$\text{CSP-S}$ 复赛。</p>
<p>考试地点在从未去过的中关村科学城四季科创中心·鲨鱼空间，考前教练给我们看了，几百台笔记本电脑，两人连在一起，中间加个隔板。</p>
<p><del>真就 NOI 迫真体验。</del></p>
<p>中午看了眼 $\text{J}$ 组题目，秒了 $\text{T4}$，感觉今年的题目要变得简单。</p>
<p>大概 $13:40$ 到了场外，与小学同学 $\text{smallfang}$ 见面，准备去这个科创中心的内部转转。<del>结果还被同学喊考场不是在下面进入。</del></p>
<p>交流了一些毒奶就进考场了。</p>
<p>进去之后，果然如教练所说，笔记本电脑的键盘手感很差，我在段考临近的压力下强制自己进入比赛状态。</p>
<p>学校教练也来监考了，居然还看到五六和初一年级在课外机构上课的信息老师。</p>
<p>$14:20$</p>
<p>发题。</p>
<p>$5$ 分钟浏览了所有题目，没读懂 $\text{T3,T4}$，回来想 $\text{T1}$，并在 $14:30$ 的时候感觉自己会了 $\text{T1}$。</p>
<p>$14:40$</p>
<p>“草，怎么要求 $4$ 个景点互不相同，****”。</p>
<p>$15:00$</p>
<p>感觉怎么算都会重复，先开 $\text{T2}$。</p>
<p>$\text{T2}$ 花 $5$ 分钟推了 $8$ 种情况，写了 $8$ 个 st 表，半个小时码完，一测样例 $1$，挂了。</p>
<p>发现其中的一种情况判错，改完之后，过了样例 $1$，再测样例 $2$，又挂了。</p>
<p>输出调试后，发现错误的是两人选择都有正有负的情况，这时答案有两种可能，应取它们的 $\max$，我取的 $\min$，赶快改了，改完过了样例 $2,3,4$。</p>
<p>$15:50$</p>
<p>回去看看 $\text{T1}$。</p>
<p>发现我可以从 $1$ 景点先向外枚举 $2$ 个点，我很容易的可以保证 $1$ 和枚举的两个点这三个点互不相同。</p>
<p>找到所有的 $1\rightarrow i\rightarrow j$ 后，我们枚举 $j_1,j_2$，然后我们尝试找到 $1\rightarrow i_1\rightarrow j_1\rightarrow j_2\rightarrow i_2\rightarrow 1$ 最大的代价。</p>
<p>发现 $1\neq i_1\neq j_1,1\neq i_2\neq j_2$，考虑记录 $mx_j$ 表示使得 $s_i+s_j$ 合法且值最大的下标 $i$。</p>
<p>发现只记最大值不够，然后再记一个次大值，所有合法情况贡献到答案，写完，开冲！</p>
<p>我一测，原来是样例 $1$ 挂了。</p>
<p>我说怎么回事？原来是 $(i,j)$ 之间的距离不超过 $k+1$ 就行而不是 $k$，改了一下，然后就挂了样例 $3$，比答案大 $2$。</p>
<p>发现点对应该有序，稍微改了一下，就过了 $3$ 个样例。</p>
<p><del>没错，上述的做法是错误的，但是到目前为止还没有发现</del></p>
<p>$16:20$</p>
<p>想了一会 $\text{T4}$，$10$ 分钟后发现不会。于是在 $\text{T4}$ 暴力和 $\text{T1}$ 对拍之间做起了抉择。</p>
<p>先去写 $\text{T1}$ 对拍。</p>
<p>造数据的时候，不知道怎么造一个连通图，于是随了远大于点数的边数的点对连边。</p>
<p>省去了一些调试部分，一拍，挂了！</p>
<p>手玩了一下 hack 数据找到问题，需要记录最大、次大和第三大，然后枚举了 $3\times3$ 的情况取最大值，就过拍了。</p>
<p>$17:10$</p>
<p>接下来再打 $\text{T4}$ 暴力。</p>
<p>先写了 $k&#x3D;1$ ，比较简单，手造了组小数据过了。</p>
<p>然后写 $\mathcal{O}(n^2)$ 动态规划，写完后大样例 $2$ 挂了，发现 $k&#x3D;3$ 有可能出链，于是加一维表示出链的距离，写这个花费了大量时间，调过后居然快 $18:00$ 了。</p>
<p>$18:00$</p>
<p>粗算了一下现在情的况：打了 $100+100+0+52$，其中 $\text{T1}$ 基本上确保正确性，$\text{T2}$ 并不确保正确性，$\text{T4}$ 也并不确保正确性，我并不想半小时速通一个连题都还没看懂的暴力（但是这题的暴力分确实很多），最后开始写很容易挂的 $\text{T2}$，赌一手 $\text{T1,T2}$ 挂的人比较多的可能性，用 $\text{T3}$ 的暴力分换取别人 $\text{T1,T2}$ 挂分，<del>只能说相信计算机协会数据。</del></p>
<p>$18:20$</p>
<p>$\text{T2}$ 拍上了，祈祷不要挂拍。</p>
<p>最后编译了所有提交的程序，检查了输入输出文件名以及数组大小，空间等问题，等待比赛结束。</p>
<p>$18:30$</p>
<p>$\text{T2}$ 没有挂拍。</p>
<h1 id="text-Day-41-赛后"><a href="#text-Day-41-赛后" class="headerlink" title="$\text{Day -41}$ 赛后"></a>$\text{Day -41}$ 赛后</h1><p>与 $\text{smallfang}$ 交流了一下，Ta 好像一直深受 $\text{T2}$ 困扰，调的比较久，但最后还是把 $\text{T1,T2}$ 切出来了。</p>
<p>但是最后 $\text{T1}$ 好像写挂了，悲。</p>
<p>看起来 $300+$ 的人很多？希望名次能好看一些。</p>
<p>预估得分：$100+100+0+52&#x3D;252$</p>
<p>洛谷：$100+100+0+36&#x3D;236$，$k&#x3D;3$ 的挂了。</p>
<p>最后来一个 $\text{CSP-S}$ 总结：</p>
<ul>
<li>毕竟放上来了所以自认为考的还能看。</li>
<li>$\text{T1}$ 与 $\text{T2}$ 求稳写了对拍，我认为还是一个比较正确的行为，但问题出现在了思考做法和实现的速度上，我的 $\text{T1}$ 和 $\text{T2}$ 光是在拍前所用的时间大约就已有 $100\min$，加上对拍和挂拍后的调试接近 $150\min$，而考试一共只有 $240\min$，给我 $\text{T3}$ 和 $\text{T4}$ 决策暴力的自由度降低了很多，所以接下来在联赛前就还是要提升自己的思考能力和实现速度，不要出现过长卡壳的情况。</li>
<li>语文阅读提取信息能力要加强。</li>
</ul>
<p><strong>不管怎么说，</strong>$\text{CSP-S}$ <strong>有分就行</strong>。$\text{NOIP}$ 加油。</p>
]]></content>
      <categories>
        <category>比赛游记</category>
      </categories>
  </entry>
  <entry>
    <title>OI idea(s)</title>
    <url>/2022/07/29/OI-idea-s/</url>
    <content><![CDATA[<p>想把 OI 中的方法论总结一下，包括一些常见套路和有意思的 idea，并包括深度理解。</p>
<h1 id="矩阵乘法"><a href="#矩阵乘法" class="headerlink" title="矩阵乘法"></a>矩阵乘法</h1><img src="https://s2.loli.net/2022/08/06/GPzijIWxcQq3AuN.png" alt="image.png" style="zoom:50%;" />

<p>矩阵乘法主要用于优化数列或状态的递推。设矩阵大小为 $n\times n$，那么求 $T$ 时刻的局面就是 $\mathcal{O}(n^3\log T)$。如果有 $q$ 次询问，可以预处理所有 $2$ 的整数次幂的矩阵，然后采用一维向量乘矩阵得到答案，复杂度从 $\mathcal{O}(qn^3\log T)$ 优化至 $\mathcal{O}(n^3\log T+qn^2\log T)$。</p>
<p>注意矩阵乘法优化 $dp$ 要保证<strong>每个阶段的转移形式完全相同</strong>。</p>
<h2 id="运算形式"><a href="#运算形式" class="headerlink" title="运算形式"></a>运算形式</h2><p>矩阵乘法一般是两种运算形式叠加使用，记运算符号 $mat(\times,+)$ 的转移形式为：</p>
<p>$res.num_{i,j}+&#x3D;num_{i,k}\times A.num_{j,k}$ </p>
<p>对于运算符号有如下要求：</p>
<ol>
<li>第一种运算满足交换律；</li>
<li>第一种运算满足结合律；</li>
<li>第一种对第二种运算满足分配率。</li>
</ol>
<p>下面列举几种常见符号组合。</p>
<p>$mat(\times,+)$：路径计数</p>
<p>$mat(+,\max)$：最长路</p>
<p>$mat(+,\min)$：最短路</p>
<p>$mat(\text{&amp;},|)$：判图连通</p>
<h2 id="题面形式"><a href="#题面形式" class="headerlink" title="题面形式"></a>题面形式</h2><p>状态很少 $(n-300)$，最终所求数列的项数很大 $(T-10^{18})$，每个位置的转移方式相同，比如有递推公式或<strong>对于每个阶段固定的转移方程</strong>。</p>
<p><a href="https://www.luogu.com.cn/problem/P1613">P1613 跑路</a> $n\le 50,T\le 10^{18}$ ，且每个点的转移方式相同，用 $mat(\text{&amp;},|)$ 判是否连通，然后跑 floyd。</p>
<p><a href="https://www.luogu.com.cn/problem/P6569">P6569 [NOI Online #3 提高组] 魔法值</a> $n\le100,T\le 2^{32}$，对于每个点的转移，在每一个时刻都只跟它周围点的状态有关，记 $mat_{u,v}$ 表示 $u,v$ 之间是否有边，有边为 $1$，没边为 $0$，写一个 $mat(\text{&amp;},\oplus)$ 矩阵运算再用 $2$ 的整数次幂预处理矩阵优化询问即可。</p>
<p><a href="https://www.luogu.com.cn/problem/P6772">P6772 [NOI2020] 美食家</a> 拆点构建矩阵，用 $mat(\times,\max)$ 运算，时间复杂度 $O((5n)^3\log T)$。</p>
<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><p>排序的本质：交换逆序对的过程。</p>
<p>一个位置可以被“排序”的充分必要条件：存在关于这个位置的逆序对。</p>
<p><a href="https://www.luogu.com.cn/problem/CF1136D">CF1136D Nastya Is Buying Lunch</a> 可以看作每一对 $(u,v)$ 都是一对可进行相邻交换的逆序对，找到最后一个人 $x$ 能够交换的逆序对 $(y,x)$，当且仅当 $y\sim x$ 之间的一段前缀（可以为空）是 $y$ 的逆序对，后缀（可以为空）是 $x$ 的逆序对，否则就会成为一个对 $y$ 之前的元素的一个阻碍。</p>
<p><a href="https://www.luogu.com.cn/problem/CF1187D">CF1187D Subarray Sorting</a> 考虑 $A$ 换到 $B$ 的充分必要条件。<strong>（往往这一步最难）</strong>我们去考虑排序的本质，能<strong>删</strong>逆序对，那么如果 $B$ 存在的逆序对 $A$ 中没有，那么 $A$ 就<strong>不能加</strong>逆序对到 $B$，那么这就是 <code>YES</code> 的一个必要条件。充分性的证明即我们是否能对于上述情况，能否找到一个操作保证换掉 $B$ 中没出现的逆序对。考虑一种操作方案：从后往前做，对于当前的数，做一遍冒泡排序消除所有不在 $B$ 的逆序对。</p>
<p>所以我们考虑是否会出现这样一种情况：是否在当前的数后有一个位置构成的逆序对出现在 $B$，但之后又出现了一个不出现在 $B$ 的逆序对？（也就是我必须先消除前面在 $B$ 的逆序对，才能消除后面不在 $B$ 的逆序对从而不合法，如果不存在这种情况，那么冒泡就是对的）</p>
<p>首先，不妨设当前的数为 $x$，后面那个出现在 $B$ 中的逆序对为 $y$，不出现在 $B$ 中的逆序对为 $z$，也就是如下的一种局面：</p>
<img src="https://s2.loli.net/2022/08/10/42ResEVF7XCQ8OB.jpg" alt="CF1187D Subarray Sorting-01.jpg" style="zoom:80%;" />

<p>不难发现，当且仅当 $y&lt;z&lt;x$ 时不能采用上述做法，但是最后我们要排成 $z-x-y$ 的形式，这样我们就多了一个 $(z,y)$ 逆序对，所以这种在必要的时候就被判掉了。那么我们也成功的说明了上述的必要条件有恰当的构造方法使得称为 $B$ 序列，变为了充分必要条件，至于最后的判断，属于技术问题，留作口胡。（提示：对于一个数 $x$ 维护其后面的逆序对集是否包含于这个数在 $B$ 中对应的逆序对集）</p>
<h2 id="插旗法"><a href="#插旗法" class="headerlink" title="插旗法"></a>插旗法</h2><p>可以对于一个环上顺序置换最优解问题，从 $n$ 个人到 $n$ 个位置的问题转化成了 $n$ 个旗子到 $1$ 个位置的问题。</p>
<p><a href="https://www.luogu.com.cn/problem/P1053">P1053 [NOIP2005 提高组] 篝火晚会</a> </p>
<p>由于不同的环只有 $2n$ 个，枚举每种环，考虑有多少人不在最终局面的位置上，所有取最小即可，复杂度 $\mathcal{O}(n^2)$。</p>
<p>我们不妨考虑，其实就是对于所有情况最小化初始局面和最终局面不在同一位置的人数。如果顺时针和逆时针分开考虑的话，其实就是 $n$ 个循环移位，<strong>循环移位不改变任意两点的相对位置</strong>，所以有了插旗法：首先我们找到 $1$ 的位置是对的最终局面，记为 $P$，然后看每个人从初始局面顺时针走多少步能走到最终局面的对应位置，然后我们就对这个步数的下标查一个旗，表示 $P$ 这个排列顺时针移动一定次数就会让这个插旗的人产生贡献，最后插旗最多的地方即为最优的最终局面，复杂度 $\mathcal{O}(n)$。</p>
<p><a href="https://www.luogu.com.cn/problem/U76006">U76006 环上游戏</a></p>
<p>这题还是从初始局面转移到 $2n$ 个最终局面的最优，先考虑顺时针，我们固定 $1$ 的初始位置就是最终局面的位置，记这个局面为 $P$，然后我们在 $i$ 后面 $(i-1)$ 个位置插一个旗，然后想象 $i$ 和旗子一块移动，这样达到最终局面后，所有旗子都到达了 $1$ 位置，现在我们就转化成了所有旗子到某个位置的最小总距离。（因为旗子的位置是与 $1$ 的相对位置，而 $1$ 的位置 $n$ 种任选）</p>
<p>这个有个贪心做法：枚举一个位置把圆切成两边，发现一定是把旗子都切在一边，所以就是把最长段给扔了。</p>
<p>时间复杂度 $\mathcal{O}(n)$。</p>
<h2 id="置换排序模型"><a href="#置换排序模型" class="headerlink" title="置换排序模型"></a>置换排序模型</h2><p>对于一个置换 $p$，以 $i\rightarrow p_i$ 连边，那么就是 $n$ 点 $n$ 边，且每点入度出度均为 $1$，也就是由若干个环组成的图。</p>
<p>考虑对于一个置换，最终的有序状态是 $n$ 个自环，而一次交换可以从一个环拿出一个数使其变为自环，那么操作数即为  $\sum\limits_{i&#x3D;1}^m sz_i-1&#x3D;n-m$，$m$ 为环的个数。</p>
<p><a href="https://www.luogu.com.cn/problem/P2127">P2127 序列排序</a> 加权的给置换排序的模型，对一个环拆成自环的时候，考虑两种决策：</p>
<ul>
<li>把全局最小先加入这个环中，然后把其它数给拿出去；</li>
<li>直接用环中的最小数把其它数拿出去。</li>
</ul>
<p>考虑环与环之间的决策互不影响，所以两种决策取最优即可。</p>
<p><a href="https://ac.nowcoder.com/acm/contest/5671">2020牛客暑期多校训练营（第六场）A</a></p>
<p><a href="https://www.luogu.com.cn/blog/BeWild/post-2020-niu-ke-shu-ji-duo-xiao-xun-lian-ying-di-liu-chang-post">https://www.luogu.com.cn/blog/BeWild/post-2020-niu-ke-shu-ji-duo-xiao-xun-lian-ying-di-liu-chang-post</a></p>
<h2 id="中位数"><a href="#中位数" class="headerlink" title="中位数"></a>中位数</h2><h3 id="山区建小学模型"><a href="#山区建小学模型" class="headerlink" title="山区建小学模型"></a>山区建小学模型</h3><p> $\sum\limits_{i&#x3D;1}^n|x-p_i|$ 或 $\sum\limits_{i&#x3D;1}^n|p_x-p_i|$ 的一般最值问题。取其中位数，可能会用不同的算法维护。</p>
<p><a href="https://www.luogu.com.cn/problem/P3644">P3644 [APIO2015] 八邻旁之桥</a> </p>
<p>一座桥就是朴素的山区建小学问题，把 $s$ 和 $t$ 都扔到数轴上取中位数算即可。</p>
<p>考虑如果有两座桥。每一个人有两个决策，选 $A$ 桥还是选 $B$ 桥。以桥为分界划分为三部分：</p>
<p><img src="https://s2.loli.net/2022/08/10/yF7AYwzLPfXvd5T.jpg" alt="P3644 _APIO2015_ 八邻旁之桥-01.jpg" style="zoom:67%;" />考虑如果某个人的起点在 $I$ 区或 $III$ 区，那么对于这个人，一定可以选靠近这个人起点 的桥，因为远离的桥不优。那么只需考虑如果一个人的起点和终点都在 $II$ 区的情况。</p>
<p>设两座桥的位置为 $x,y$ 且 $x&lt;y$，起点的位置为 $s$，终点的位置为 $t$。</p>
<img src="https://s2.loli.net/2022/08/10/oF2AZsRnB5tHIav.jpg" alt="P3644 _APIO2015_ 八邻旁之桥-02.jpg" style="zoom:67%;" />

<p>那么走 $A$ 桥优于 $B$ 桥，当且仅当：</p>
<p>$(s-x)+(t-x)&lt;(y-s)+(y-t)$</p>
<p>$\Rightarrow s+t&lt;x+y$</p>
<p>也就是对于所有 $s+t&lt;x+y$ 的人，都走 $A$ 桥，反之都走 $B$ 桥。也就是我们去枚举所有的断点 $s+t$，这样两边就是 $k&#x3D;1$ 的朴素山区建小学，我们动态维护两边的中位数，时间复杂度为 $\mathcal{O}(n\log n)$。</p>
<p><strong>（思考）</strong>在推出 $s+t&lt;x+y$，一直陷入一个误区：当我们枚举 $s+t$ 也就确定了 $x+y$，但可能两边所划分的中位数，也就是两座桥的具体位置不能为 $x+y$ 该如何解决？</p>
<p><strong>（解答）</strong>经过教练的指导，发现这个式子的意义是，我们找到了一种排序方式（按 $s+t$ 排序）使得对于小于 $x+y$ 的 $A$ 桥，大于 $x+y$ 的一定走 $B$ 桥，<strong>那么我们不再关心桥的具体位置，而是最优解的形式一定为以 $s+t$ 排序的前缀走 $A$ 桥，$s+t$ 的后缀走 $B$ 桥</strong>，这样两边山区建小学一定<strong>不会丢失最优解</strong>。</p>
<p><strong>（思想）</strong>对于一个要求较强的结论，考虑退而求其次是否更容易地使用。</p>
<h1 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h1><h2 id="冰红茶模型-x2F-排队模型"><a href="#冰红茶模型-x2F-排队模型" class="headerlink" title="冰红茶模型&#x2F;排队模型"></a>冰红茶模型&#x2F;排队模型</h2><p>在一个集合中进行若干次决策，对于每一次决策所选中的点，又会补充一个劣于当前解的后继（重点），这样每次必然是选择最优解，然后更新新后继，用优先队列维护。</p>
<p><a href="https://www.luogu.com.cn/problem/U130967">U130967 冰红茶(tea)</a> 冰红茶模型模板题。</p>
<p><a href="https://www.luogu.com.cn/problem/P1315">P1315 [NOIP2011 提高组] 观光公交</a> </p>
<p>考虑对第 $i$ 站使用加速器，影响了一段从第 $i$ 站开始，到之后的一站之间<strong>下车</strong>的人，记为 $p_i$。</p>
<p>如果使用加速器，一定会导致 $p_i$ 减小（到达 $p_i$ 站的时间更短），所以下次再选 $i$ 时答案变劣，所以冰红茶即可。</p>
<p>本题仍有用线段树优化贪心使复杂度变为 $\mathcal{O}(n\log n)$ 的做法，具体可见代码。</p>
<p><a href="https://www.luogu.com.cn/problem/P5283">P5283 [十二省联考 2019] 异或粽子</a> $n$ 个班排队模型的例题，省选也是有考这些基础算法的题的。</p>
<h2 id="相邻交换法"><a href="#相邻交换法" class="headerlink" title="相邻交换法"></a>相邻交换法</h2><p>相邻交换 yyds</p>
<p>使用相邻交换法的前提是推一个<strong>具有传递性</strong> $(a&lt;b,b&lt;c\Rightarrow a&lt;c)$ 的比较关系，排好序后即能轻易的得出一系列最优决策。</p>
<h3 id="拆-max-min-法"><a href="#拆-max-min-法" class="headerlink" title="拆 $\max,\min$ 法"></a>拆 $\max,\min$ 法</h3><p>$a&gt;\max(b,c)\Leftrightarrow a&gt;b\text{ and }a&gt;c$</p>
<p>$\max(b,c)&gt;a\Leftrightarrow b&gt;a\text{ or } c&gt;a$</p>
<p>$a&gt;\min(b,c)\Leftrightarrow a&gt;b\text{ or }a&gt;c$</p>
<p>$min(b,c)&gt;a\Leftrightarrow b&gt;a\text{ and }c&gt;a$</p>
<p><a href="https://www.luogu.com.cn/problem/P1080">P1080 [NOIP2012 提高组] 国王游戏</a></p>
<p>设前缀积 $mu_i&#x3D;\prod\limits_{j&#x3D;1}^i a_i$，那么每个人的金币数为 $\lfloor\dfrac{mu_{i-1}}{b_i}\rfloor$。</p>
<p>我们取出一个二元组 $(i,j)$，其中 $i&lt;j$，本题中并不能得出越靠后的大臣获得的金币越多的结论。</p>
<p>我们设 $1\sim i-1$  大臣左手的数的积为 $mu_1$，$i+1\sim j-1$ 大臣左手的数的积为 $mu_2$。</p>
<p>在 $i,j$ 交换前，$i$ 获得的金币数 $\lfloor\dfrac{mu_1}{b_i}\rfloor$，$j$ 获得的金币数 $\lfloor\dfrac{mu_1\cdot a_i\cdot mu_2}{b_j}\rfloor$。</p>
<p>在 $i,j$ 交换后，$i$ 获得的金币数 $\lfloor\dfrac{mu_1\cdot a_j\cdot mu_2}{b_i}\rfloor$，$j$ 获得的金币数 $\lfloor\dfrac{mu_1}{b_j}\rfloor$。</p>
<p>相邻交换法的常见套路，不妨设交换前的答案优于交换后的答案。</p>
<p>则有 $\max(\lfloor\dfrac{mu_1}{b_i}\rfloor, \lfloor\dfrac{mu_1\cdot a_i\cdot mu_2}{b_j}\rfloor)&lt;\max(\lfloor\dfrac{mu_1\cdot a_j\cdot mu_2}{b_i}\rfloor, \lfloor\dfrac{mu_1}{b_j}\rfloor)$。</p>
<p>其中下取整不影响答案，去掉后变为 $\max(\dfrac{mu_1}{b_i}, \dfrac{mu_1\cdot a_i\cdot mu_2}{b_j})&lt;\max(\dfrac{mu_1\cdot a_j\cdot mu_2}{b_i}, \dfrac{mu_1}{b_j})$。</p>
<p>用拆 $\max$ 法，$\Leftrightarrow \max(\dfrac{mu_1}{b_i}, \dfrac{mu_1\cdot a_i\cdot mu_2}{b_j})&lt;\dfrac{mu_1\cdot a_j\cdot mu_2}{b_i}\text{ or }\max(\dfrac{mu_1}{b_i}, \dfrac{mu_1\cdot a_i\cdot mu_2}{b_j})&lt;\dfrac{mu_1}{b_j}$</p>
<p>$\Leftrightarrow (①\dfrac{mu_1}{b_i}&lt;\dfrac{mu_1\cdot a_j\cdot mu_2}{b_i}\text{ and }②\dfrac{mu_1\cdot a_i\cdot mu_2}{b_j}&lt;\dfrac{mu_1\cdot a_j\cdot mu_2}{b_i})\text{ or }(③\dfrac{mu_1}{b_i}&lt;\dfrac{mu_1}{b_j}\text{ and }④\dfrac{mu_1\cdot a_i\cdot mu_2}{b_j}&lt;\dfrac{mu_1}{b_j})$</p>
<p>现在我们就把 $\max$ 拆成了两两的元素比较和逻辑运算，接下来我们来看看有没有显然成立或不成立的逻辑式。</p>
<p>不难发现，①式显然成立，④式显然不成立，这样我们神奇的发现：</p>
<p>$\Leftrightarrow ②\dfrac{mu_1\cdot a_i\cdot mu_2}{b_j}&lt;\dfrac{mu_1\cdot a_j\cdot mu_2}{b_i}$</p>
<p>$\Leftrightarrow a_i\cdot b_i&lt;a_j\cdot b_j$</p>
<p>没错，我们的得到了一个简单的式子，并且此式满足传递性，于是排序后得到的即为我们所求的最优解。</p>
<p><a href="https://www.luogu.com.cn/problem/P2123">P2123 皇后游戏</a></p>
<p>国王游戏的加强版，一个更难推的相邻交换。</p>
<p>本题可以得出越靠后的大臣奖金越多的结论。</p>
<p>这次我们用相邻两个人 $(i,j)$ 比较，其中 $j&#x3D;i+1$，设 $\sum\limits_{i&#x3D;1}^{i-1} a_i$ 为 $s$，那么在交换前 $c_j&gt;c_i$，$c_i&#x3D;\max(c_{i-1},s+a_i)+b_i$，$c_j&#x3D;\max(\max(c_{i-1},s+a_i)+b_i,s+a_i+a_j)+b_j$ ，交换后 $c_j&lt;c_i$，$c_j&#x3D;\max(c_{i-1},s+a_j)+b_j$，$c_i&#x3D;\max(\max(c_{i-1},s+a_j)+b_j,s+a_j+a_i)+b_i$。</p>
<p>不妨设交换前的答案不劣于交换后的答案，则有：</p>
<p>$\max(\max(c_{i-1},s+a_i)+b_i,s+a_i+a_j)+b_j\le\max(\max(c_{i-1},s+a_j)+b_j,s+a_j+a_i)+b_i$</p>
<p>$\Leftrightarrow \max(\max(c_{i-1},s+a_i)+b_i+b_j,s+a_i+a_j+b_j)\le\max(\max(c_{i-1},s+a_j)+b_j+b_i,s+a_j+a_i+b_i)$</p>
<p>$\Leftrightarrow \max(c_{i-1}+b_i+b_j,s+a_i+b_i+b_j,s+a_i+a_j+b_j)\le\max(c_{i-1}+b_i+b_j,s+a_j+b_i+b_j,s+a_i+a_j+b_i)$</p>
<p>两边的 $\max$ 中各有三个元素，拆起来麻烦怎么办？</p>
<p>考虑两边有相同的元素 $c_{i-1}+b_i+b_j$，那么证明一个结论：$\max(a,b)\le\max(a,c)\Rightarrow b\le c$。</p>
<ul>
<li>如果 $b\le c$，则已经满足条件；</li>
<li>如果 $b&gt;c$，那么 $b\le a$，交换后同样满足。</li>
</ul>
<p>综上可知结论成立。那么进行一步简化：</p>
<p>$\Rightarrow \max(s+a_i+b_i+b_j,s+a_i+a_j+b_j)\le\max(s+a_j+b_i+b_j,s+a_i+a_j+b_i)$</p>
<p>然后就可以进行愉快的拆 $\max$ 环节了！</p>
<p>$\Leftrightarrow \max(s+a_i+b_i+b_j,s+a_i+a_j+b_j)\le s+a_j+b_i+b_j\text{ or }\max(s+a_i+b_i+b_j,s+a_i+a_j+b_j)\le s+a_i+a_j+b_i$</p>
<p>$\Leftrightarrow (s+a_i+b_i+b_j\le s+a_j+b_i+b_j\text{ and }s+a_i+a_j+b_j\le s+a_j+b_i+b_j)\text{ or }(s+a_i+b_i+b_j\le s+a_i+a_j+b_i\text{ and }s+a_i+a_j+b_j\le s+a_i+a_j+b_i)$</p>
<p>$\Leftrightarrow (a_i\le a_j\text{ and }a_i\le b_i)\text{ or }(b_j\le a_j\text{ and }b_j\le b_i)$</p>
<p>上述条件并不满足传递性，所以我们尝试转化排序方式，使得 $\forall i,j\in [1,n],i&lt;j$，都能满足上述条件。</p>
<p>观察到 $\text{or}$ 的两边都有一个 $a$ 和 $b$ 一起的比较，那么我们尝试先按此分组。</p>
<p>如果 $a_i&lt;b_i$，分到 $1$ 组；</p>
<p>如果 $a_i&#x3D;b_i$，分到 $2$ 组；</p>
<p>如果 $a_i&gt;b_i$，分到 $3$ 组。</p>
<p>在 $1$ 组中的数，可以同时再去满足 $a_i&lt;a_j$，按 $a$ 升序排序，在 $2$ 组中的数，不满足上述条件，可以随意排序，在 $3$ 组中的数，可以同时再去满足 $b_j&lt;b_i$，按 $b$ 降序排序。</p>
<p>那么关键的问题是组与组之间的排序。这里给出排序方式：按 $1,2,3$ 组排序即可。</p>
<p>证明一下：如果想要证明上述排序方法成立，只需保证按此方法排序后 $\forall i,j\in [1,n],i&lt;j$，都能满足上述条件，由于组内已经满足，只需考虑组间。</p>
<p>考虑 $1$ 组和 $2$ 组，则有，$a_i\le b_i,a_j&#x3D;b_j$。假设可以交换，即不满足上述条件。若不满足条件，则 $a_i\le a_j$ 不能成立，即 $a_i&gt;a_j$，$b_j\le b_i$ 也不能成立，即 $b_j&gt; b_i$，整理条件可得矛盾。</p>
<p>其它情况同理，最终可以保证排序的正确性。</p>
<h2 id="贪心反悔"><a href="#贪心反悔" class="headerlink" title="贪心反悔"></a>贪心反悔</h2><p>一大常用的贪心套路。大体流程是优先满足时间较早的决策，在不能满足当前决策的情况下，在已选的决策集合中找到最不优的，然后替换。在正确性下，我们保证：每一次反悔操作不会使答案变劣。</p>
<p>解决的题目一般满足如下性质：</p>
<ul>
<li>题目有最优子结构性质（即无后效性）</li>
<li>容易维护决策的集合的性质（即可以方便的反悔）</li>
</ul>
<p><a href="https://www.luogu.com.cn/problem/P2209">P2209 [USACO13OPEN]Fuel Economy S</a></p>
<p>经典反悔贪心，因为每个加油站都可加无限多的油，想象油箱中每种价格的油是分层的，那么在到达每一个加油站的时候，用此加油站的油替换掉所有在油箱中价钱高于当前加油站价格的油，并把油箱加满，此过程即为反悔。在行走的过程中，优先消耗便宜的油，这样我们就维护了整个过程，到达终点后要把多的油退掉。</p>
<p>时间复杂度为 $\mathcal{O}(n\log n)$。</p>
<p>本题还有一个加强版，请见<a href="https://www.luogu.com.cn/problem/CF1238G">CF1238G</a>，此题中每一站的供应存在限制。</p>
<p><a href="https://www.luogu.com.cn/problem/CF865D">CF865D Buy Low Sell High</a></p>
<p>对于一个股票，在买入的时候我们可以看作无代价买入，只有卖出的时候才获得收益。</p>
<p>例如我们已经购入了价格为 $x$ 的股票，现在以 $y$ 的价格卖出，此时我们的收益获得了 $y-x$。</p>
<p>考虑我们如何进行反悔操作。对于价格为 $x$ 的股票，我们要将 $y$ 的价格卖出修改为以 $z$ 的价格卖出，即收益从 $y-x$ 变为 $z-x$，变化了 $z-y$。基于此，我们维护一个小根堆，对于当天的价格 $p$，我们首先将 $p$ 插入，代表原物品，如果 $p$ 还能大于堆中的最小值的话，那么我们就可以先获得 $p-q.top()$ 的代价，然后再次插入 $p$ 这个价格，代表可用作被反悔的物品，这样每次的购买就既有可能是对于原价买入物品的卖出，也有可能是已经被卖出物品的反悔操作。</p>
<p>一个问题：插入两次物品会不会出现不合法的情况，能不能只插入一次。</p>
<p>插入两次同一个物品的目标无非就是两个物品都有可能会用到，我们不妨分析两个物品都用到的情况。</p>
<p>对于一个股票在 $p_i$ 买入，在 $p_j$ 卖出，那么此时堆里存有两个 $p_j$，分别代表 “在 $p_i$ 买入，在 $p_j$ 卖出的决策”和“我有一个价值为 $p_j$ 的股票已经买入”，那么如果在 $p_k$ 的时候堆顶为 $p_j$（如果堆顶被弹出，下一个堆顶也是 $p_j$），我们首先拿出”在 $p_i$ 买入，在 $p_j$ 卖出的决策”，改为”在 $p_i$ 买入，在 $p_k$ 卖出的决策”，经此修改后，$p_j$ 就成为了一个既没有买也没有卖的元素，那么在下一次 $p_l$ 取出 $p_j$ 的时候，即为”在 $p_j$ 买入，在 $p_l$ 卖出的决策”，这样插入两次物品不仅能够保证合法，还是保留最优解的充分条件。</p>
<h2 id="超级钢琴模型"><a href="#超级钢琴模型" class="headerlink" title="超级钢琴模型"></a>超级钢琴模型</h2><p>超级钢琴其实类似冰红茶，最基础的情况，两两点之间有一个代价，求代价的最大值。一个点 $i$ 我们对应若干个决策区间，先预处理出区间中的与 $i$ 所得代价的最大值并记录位置 $p$，那么在选择这个之后，将当前的决策区间 $[l,r]$ 拆成 $[l,p-1]$ 与 $[p+1,r]$，因为 $p$ 是 $[l,r]$ 中的最大值，所以分成 $[l,p-1]$ 和 $[p+1,r]$ 后的答案一定要劣于 $p$，这就是一个冰红茶的过程。</p>
<p>此类题所有的特定条件：</p>
<ul>
<li>求一定点所构成的代价的最值</li>
<li>容易维护决策区间的最大值</li>
</ul>
<p>超级钢琴模型的运用灵活，作者见过的题不多，希望以后遇到后还能认真总结。</p>
<p><a href="https://www.luogu.com.cn/problem/P2048">P2048 [NOI2010] 超级钢琴</a></p>
<p><a href="https://www.luogu.com.cn/problem/U125195">U125195 大战杀马特(smart)</a></p>
<h2 id="时光倒流"><a href="#时光倒流" class="headerlink" title="时光倒流"></a>时光倒流</h2><p>时光倒流其实是一类经典的思想，具体是如果按正向时间不好维护决策的时候，看看倒序解决能不能有事半功倍的效果。</p>
<p>例如正序的删点维护连通性，我们可以改为倒序加点，这样就可以轻易的维护。</p>
<p>在贪心上，时光倒流有时也可以起到奇效。</p>
<p>适用的题为<strong>正序没有最优子结构性质但倒序有最优子结构性质</strong>的题目。</p>
<p><a href="https://www.luogu.com.cn/problem/P1954">P1954 [NOI2010] 航空管制</a></p>
<p>考虑按时间正序做需要维护删除操作，但显然删除并不好维护，那么考虑时光倒流变成加点，再将第二类限制反过来，用拓扑随便贪心做一下即可，复杂度 $\mathcal{O}(nm)$。</p>
<p><a href="https://www.luogu.com.cn/problem/P3826">P3826 [NOI2017] 蔬菜</a></p>
<p>正序我们同样需要维护讨厌的删除操作，如果改为倒序，“每天少 $x_i$ 单位蔬菜”就变成了“蔬菜从 $app_i$ 天开始每天多 $x_i$ 单位蔬菜”，然后我们就可以在每天贪心的取最大的 $m$ 个。</p>
<p>考虑现在求的答案是所有天数的答案，即 $ans_{100000}$，那么如何求其它天数 $1\sim 99999$。</p>
<p>不难发现，选择了售卖的菜之后，我可以随意的安排这些菜的售卖顺序，因为越往后菜越多，所以在前面的天数这些菜并不会消失，所以从第 $j$ 天推到第 $j-1$ 天时我们只要去掉最便宜的 $m$ 个菜就行。</p>
<p>注意可能在倒序做的时候有的天数可能卖不到 $m$ 个菜，但正序的时候由于这些售卖操作都可以理解为在前 $j$ 天的紧凑操作（即每天卖菜数不存在浪费），所以当且仅当 $m\times j$ 小于现在卖过的菜的总量，我们才需要去删除多余的菜。</p>
<h2 id="双序列匹配"><a href="#双序列匹配" class="headerlink" title="双序列匹配"></a>双序列匹配</h2><p>给两个序列 $a$ 和 $b$，在改变 $a,b$ 的顺序后使得一个计算代价的函数 $f(a,b)$ 得到最值，这种一般可以用贪心的匹配得到答案。</p>
<p><a href="https://www.luogu.com.cn/problem/P1966">P1966 [NOIP2013 提高组] 火柴排队</a></p>
<p>给定序列 $a,b$，任意改变 $a,b$ 的顺序，求 $\sum(a_i-b_i)^2$ 的最小值。</p>
<p>最基础的双序列匹配问题，不考虑交换次数的话，将 $a,b$ 都按升序排列得到的即为最小值。交换次数最小我们只需将 $b$ 数组映射到 $a$ 数组，然后求逆序对即可。</p>
<p><a href="https://www.luogu.com.cn/problem/P1084">P1084 [NOIP2012 提高组] 疫情控制</a></p>
<p>这应该算是一个贪心双序列匹配的经典好题了，首先我们不妨二分出一个时间，代表花费的最长时间，那么我们首先可以将所有军队向上跳，显然如果军队能向上跳，那么向上跳肯定不劣。</p>
<p>在所有的军队都向上跳完后，有的叶子肯定没有被军队挡住，我们把这些叶子对应的根的儿子的子树标记，代表这个子树需要被帮助，找到了所有需要帮助的子树后，我们要去用已经到达根的儿子的点的一些军队且还有空余时间走到其它的树来帮助别的子树。（注意当这个在根的儿子的军队去帮助别的子树的时候，它自己这棵子树可能就有拦不住疫情了）</p>
<p>考虑如果一个在根的儿子的军队走到根了之后却不能原路返回再走回自己，且当这个军队走了之后这个子树会失控，那么这个军队应不应该去帮助别人？</p>
<p>如果这个子树帮助别人，那么一定还需要另一个子树上的军队来帮助它，那么我们不如让这个子树的军队不动，这样我们用了更小代价去防控了一个更难防控的子树，这样会更优一些。</p>
<p>最后我们就找到了所有能动的军队和需要被帮助的子树，把距离处理出来，然后双序列贪心匹配，看能不能将帮助所有子树。</p>
<p>时间复杂度 $\mathcal{O}(n\log n\log w)$。</p>
<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><p>同样是<strong>极其重要</strong>的一类问题，整理基本模型，拓展模型和有意思的想法。</p>
<h2 id="背包"><a href="#背包" class="headerlink" title="背包"></a>背包</h2><p>背包的形式也很多样，记几个不常见的类型。</p>
<h3 id="删除背包"><a href="#删除背包" class="headerlink" title="删除背包"></a>删除背包</h3><p>删除背包当且仅当仅当背包的运算方式可逆时能用，例如加减可逆，但取 $\max$ 和 $\text{or}$ 都不行。</p>
<p>例如我们要01背包求方案数，每来一个物品，转移如下：</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> M<span class="token punctuation">;</span>i <span class="token operator">>=</span> w<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> w<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>那么如果要删除一个物品，其实也很简单：</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> w<span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> M<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> w<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>可行性背包可以通过<strong>转化成求方案数</strong>使用删除背包。<a href="https://www.luogu.com.cn/problem/U76029">U76029 货币系统</a></p>
<h3 id="text-bitset-优化可行性背包"><a href="#text-bitset-优化可行性背包" class="headerlink" title="$\text{bitset}$ 优化可行性背包"></a>$\text{bitset}$ 优化可行性背包</h3><p>只是一个小优化，但只能用来优化可行性背包。在这里记录一下用法：</p>
<ul>
<li>定义一个大小为 $N$ 的 $\text{bitset}$</li>
</ul>
<pre class=" language-cpp"><code class="language-cpp">bitset<span class="token operator">&lt;</span>N<span class="token operator">></span> f<span class="token punctuation">;</span>
</code></pre>
<ul>
<li>访问 $\text{bitset}$ 的第 $i$ 位</li>
</ul>
<pre class=" language-cpp"><code class="language-cpp">f<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
</code></pre>
<ul>
<li>查询 $\text{bitset}$ 中 $1$ 的数量</li>
</ul>
<pre class=" language-cpp"><code class="language-cpp">f<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<ul>
<li>将所有位设为 $0$</li>
</ul>
<pre class=" language-cpp"><code class="language-cpp">f<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<ul>
<li>可行性背包中新来一个物品后</li>
</ul>
<pre class=" language-cpp"><code class="language-cpp">f <span class="token operator">=</span> f <span class="token operator">|</span> <span class="token punctuation">(</span>f <span class="token operator">&lt;&lt;</span> w<span class="token punctuation">)</span>
</code></pre>
<p>其它操作见 <a href="https://oi-wiki.org/lang/csl/bitset/">bitset - OI Wiki</a>，使用 $bitset$ 后会使原复杂度乘上一个 $\dfrac{1}{w}$ 的常数，$w$ 为计算机的位数32&#x2F;64。</p>
<p><a href="https://www.luogu.com.cn/problem/P6567">P6567 [NOI Online #3 入门组] 买表</a> 注意此题的正解是单调队列优化多重背包，但由于是可行性背包，二进制分组加 $\text{bitset}$ 优化可以吊打单调队列。</p>
<h3 id="P5289-十二省联考-2019-皮配"><a href="#P5289-十二省联考-2019-皮配" class="headerlink" title="P5289 [十二省联考 2019] 皮配"></a><a href="https://www.luogu.com.cn/problem/P5289">P5289 [十二省联考 2019] 皮配</a></h3><p>一道复杂背包的问题。</p>
<blockquote>
<p>我认为背包唯一要讲的就是皮配，讲了这题你其它背包就都会了。——教练</p>
</blockquote>
<p>作为一道省选题，我们以考场视角来思考这道题目。在读了一会儿题面后，我们总结出了如下的形式化题面：</p>
<p>一共有 $n$ 个物品， $c$ 种类别，每个物品还有一个重量。</p>
<p>现在你将 $n$ 个物品放置在一个 $2\times 2$ 的网格中，要求：</p>
<ul>
<li>第 $1$ 行重量和 $\le C_0$，第 $2$ 行重量和 $\le C_1$，第 $1$ 列重量和 $\le D_0$，第 $2$ 列重量和 $\le D_1$；</li>
<li>同类的物品只能在同一行中放置；</li>
<li>每个物品还有一个限制，代表 $4$ 个格子中有一个不能放，或者无限制。</li>
</ul>
<p>现在求 $n$ 个物品全部放入 $2\times 2$ 的不同方案数，对 $998244353$ 取模。</p>
<p>你的第一天已经有了很稳的分数，所以第二天继续求稳，我们当然是从暴力分想起。</p>
<p>先来看朴素暴力：对于每一类物品，将其视作一个阶段，我们解决当前阶段的问题。</p>
<p>设 $dp_{i,j}$ 表示在当前这一类做之前，第 $1$ 行的总重量为 $i$，第 $2$ 行的总重量为 $j$ 的方案数。第 $2$ 行和第 $2$ 列当前重量可以减一下得到。</p>
<p>对于当前城市的贡献，记一个 $f0_j,f1_j$ 表示都放入第 $1$ 行，第 $1$ 列重量为 $j$ 的方案数和都放入第 $2$ 行，第 $1$ 列重量为 $j$ 的方案数。</p>
<p>那么我们直接看每个物品取哪个位置，然后更新 $f_0,f_1$。最后更新即为：</p>
<p>$dp_{i,j}+f0_k\rightarrow dp_{i+k,j+k},dp_{i,j}+f1_k\rightarrow dp_{i,j+k}$。</p>
<p>计算 $f$ 的总复杂度为 $\mathcal{O}(nM)$，$f$ 合并到 $dp$ 的总复杂度为 $\mathcal{O}(nM^3)$，得分 $40$。</p>
<p>这是一个好想加好写的做法，你不难推测大部分人都会这个做法，让我们向着更高的目标前进！</p>
<p>接下来我们考虑一个优化：<strong>平衡转移和合并的复杂度</strong>。</p>
<p>我们能否将合并的复杂度分一个 $M$ 给转移，使其平衡至 $\mathcal{O}(nM^2)$。</p>
<p>不难发现可行，给 $f0$ 和 $f1$ 加上一维，表示<strong>此类物品加上之前类的第</strong> $1$ <strong>行已有的重量</strong>，原先的一维也变为了<strong>此类物品加上之前类的第</strong> $1$ <strong>列已有的重量</strong>。</p>
<p>在转移每一类物品前，复制 $dp$ 至 $f0,f1$，决策这一类的所有物品后，将 $f0_{i,j}+f1_{i,j}$ 更新至 $dp_{i,j}$，由于当前类的物品在第 $1$ 行还是第 $2$ 行是两种选择，可使用加法原理。</p>
<p>现在你获得了 $50$ 分，于是你开始决定拼特殊情况。</p>
<p>当 $k&#x3D;0$，即没有带限制的物品该怎么做？</p>
<p>你发现此时决策物品的行与列不会再受到限制，<strong>行列可看作互相独立的问题</strong>，那么我们记 $g_i$ 表示第 $1$ 行重量为 $i$ 的方案数，$h_j$ 表示第 $1$ 列重量为 $j$ 的方案数，把每一类的重量绑在一起做行，每个单独的物品做列，最后行列使用乘法原理乘起来即可。</p>
<p>$\sum\limits_{i,j}[i\le C_0][W-i\le C_1][j\le D_0][W-j\le D_1]g_i\cdot h_j$</p>
<p>$W$ 表示所有物品的总重量。</p>
<p>这个做法是 $\mathcal{O}(nM)$ 的，加上之前的做法有了 $70$ 分。如果你受到了这个<strong>行列独立</strong>的启发后，不妨再思考一下。</p>
<p>注意下列的状态全部重新命名，可能和上面有重合。</p>
<p>将 $n$ 个物品分为 $3$ 种类型：</p>
<ul>
<li>$\text{A}$ 类：所在类的所有物品全部无限制。</li>
<li>$\text{B}$ 类：自己无限制，但所在类有物品有限制。</li>
<li>$\text{C}$ 类：自己有限制。</li>
</ul>
<p>分成这 $3$ 类后，我们先考虑 $\text{A}$ 类。$\text{A}$ 直接用 $k&#x3D;0$ 的转移就行了，我们存入 $f_i$ 与 $g_j$ 中。时间复杂度 $\mathcal{O}(nM)$</p>
<p>接下来我们考虑 $\text{B}$ 类，$\text{B}$ 可以理解为行的选择存在一定限制，但列还是完全没有限制，因为它在它自己的类中决策了行之后，它自身是可以随便选第 $1$ 列和第 $2$ 列的，于是我们把列的信息一块记到 $g$ 中代表了<strong>列的决策独立</strong>，而对于行的信息，其实就是在转移 $\text{C}$ 类点后增加了这一类中 $\text{B}$ 类点的总重量，那我们设 $h_{i,j}$  表示 $\text{B}$ 的行与 $\text{C}$ 的行和列的第 $1$ 行重量为 $i$，只算 $C$ 的重量时第 $1$ 列重量为 $j$ 的方案数，做 $\text{C}$ 的时候按上面的 $\mathcal{O}(nM^2)$ 转移，最后加上一个当前类的 $\text{B}$ 的总重量决策是第 $1$ 行还是第 $2$ 行即可。</p>
<p>$\text{C}$ 存在限制，但 $k\le30$，即我们使用暴力的转移复杂度实际上是 $\mathcal{O}(kM^2)$ 的，但你发现 $s_i\le 10$，即任意物品的重量不超过 $10$，那么 $h$ 的第二维大小只有 $30\times10&#x3D;300$，复杂度可再次降至 $\mathcal{O}(300M)$，可以接受。</p>
<p>这样我们对于每类点的行列信息都存在了如下的数组中：</p>
<table>
<thead>
<tr>
<th></th>
<th>行</th>
<th>列</th>
</tr>
</thead>
<tbody><tr>
<td>$\text{A}$</td>
<td>$f$</td>
<td>$g$</td>
</tr>
<tr>
<td>$\text{B}$</td>
<td>$h$</td>
<td>$g$</td>
</tr>
<tr>
<td>$\text{C}$</td>
<td>$h$</td>
<td>$h$</td>
</tr>
</tbody></table>
<p>最后，如何计算出总方案数？</p>
<p>我们考虑 $f,g,h$ 是不是互相独立的，我们首先用 $h$ 确定了 $\text{C}$ 的行列和 $\text{B}$ 的行信息，此时我们对 $\text{B}$ 的列和 $\text{A}$ 的行列的选择并没有产生影响，然后用 $f$ 确定了 $\text{A}$ 的行信息，由于 $\text{A,B}$ 点一定不是在同一类中（$\text{A}$ 的定义：所在类的所有物品全部无限制），那么我们对 $\text{A,B}$ 的列也没有产生影响，也就是 $g$ 的方案数。由此可见 $f,g,h$ 各自的选择<strong>都不会影响到其它的选择</strong>，所以我们枚举 $f,g,h$ 所有可能状态，运用<strong>乘法原理</strong>求出每一种组合的答案，在实现上，对 $f,g$ 做前缀和，然后枚举 $h$ 的状态，$f,g$ 的选取是一个区间，这样复杂度是 $\mathcal{O}(300M)$  的。这样我们就愉快地通过了这道题。</p>
<p>最后，我们可以总结一下这道题所用到的一些 dp 思想：</p>
<ul>
<li>对于状态的设计：对于每一类物品，将其视作一个阶段，解决完当前阶段合并至之前的答案形成新的答案继续转移，无论是暴力还是正解都没有脱离这个前提。</li>
<li>转移与合并的平衡：在转移和合并复杂度差距较大时，观察到其中的特点，例如此题在转移的时加了一维状态来辅助合并，优化了整体复杂度。</li>
<li>若干独立情况的整合：我认为这是本道题的精华所在。在做 $k&#x3D;0$ 的时候就已经有<strong>行列独立</strong>的美妙性质，正解对若干个情况独立的分别解决的思路也是登峰造极。这题的数据范围对于这种想法也有提示，如 $k\le30,s_i\le10$，观察到这些是否可以想到有限制的物品和无限制的物品分开做呢？</li>
</ul>
<h2 id="双调巡游"><a href="#双调巡游" class="headerlink" title="双调巡游"></a>双调巡游</h2>]]></content>
  </entry>
  <entry>
    <title>点分治/动态点分治/树分治</title>
    <url>/2022/05/25/%E7%82%B9%E5%88%86%E6%B2%BB-%E5%8A%A8%E6%80%81%E7%82%B9%E5%88%86%E6%B2%BB-%E6%A0%91%E5%88%86%E6%B2%BB/</url>
    <content><![CDATA[<h1 id="点分治"><a href="#点分治" class="headerlink" title="点分治"></a>点分治</h1><p>点分治，是一种基于树上的分治算法。</p>
<p>对于一棵树的贡献，拆成如下两部分：</p>
<ul>
<li>各个子树的贡献</li>
<li>经过根节点路径的贡献</li>
</ul>
<p>基于此，每次都选树的重心计算，由重心性质，最多递归 $O(\log n)$ 次即可到达叶子，则总共遍历节点的数量不超过 $O(n\log n)$，再套用一些数据结构解决路径的贡献，可以将复杂度做到 polylog。</p>
<p>我们基于一道例题来了解点分治的过程。</p>
<h2 id="例题：P4149-IOI2011-Race"><a href="#例题：P4149-IOI2011-Race" class="headerlink" title="例题：P4149 [IOI2011]Race"></a>例题：<a href="https://www.luogu.com.cn/problem/P4149">P4149 [IOI2011]Race</a></h2><p>给定一棵树，求一条路径，边权和为 $k$，且边的数量最少。</p>
<p>$n\le 2\times10^5,k\le 10^6$</p>
<p>我们构造一组样例，来帮助理解点分治的过程。</p>
<p><img src="https://s2.loli.net/2022/05/31/ljygNWY2UF1csOw.png" alt="点分治-动态点分治-树分治-01.png"></p>
<p>其中 $k&#x3D;6$。</p>
<p>首先我们找到原树的重心，不难发现是 $2$。</p>
<p>那么我们以 $2$ 为根节点，先去求经过 $2$ 的路径为 $k$ 的最小值，一共有如下路径：</p>
<ol>
<li>$4-2-5$，边数为 $2$</li>
<li>$1-2-5-8-9$，边数为 $4$</li>
</ol>
<p>然后我们删除掉 $2$ 号点，每一棵子树都是一个子问题：</p>
<p><img src="https://s2.loli.net/2022/05/31/8AZMVDjHn6EmpiY.png" alt="点分治-动态点分治-树分治-02.png"></p>
<p>对于 $①③⑥$ 子树，$3$ 号是这棵树的重心，计算经过 $3$ 号点的且边权和为 $k$ 的路径：</p>
<ol>
<li>$1-3-6$，边数为 $2$</li>
</ol>
<p>然后删除 $3$ 号点，将其分为两个 $1$ 个节点形成的树，没有贡献，故不再叙述。</p>
<p>对于这个 $⑤⑦⑧⑨$ 子树，选 $5$ 作为树的重心，计算经过 $5$ 号点的且边权和为 $k$ 的路径：</p>
<ol>
<li>$7-5-8$，边数为 $2$</li>
</ol>
<p>然后删除 $5$ 号点，分开后的 $2$ 棵子树都没有边权和为 $k$ 的路径，不再叙述。</p>
<p>对于 $④$ 子树，没有贡献。</p>
<p>综上，答案为 $2$。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>理解了过程，接下来详细地说一说代码实现和一些细节。</p>
<h3 id="1-初始化-建树"><a href="#1-初始化-建树" class="headerlink" title="1. 初始化-建树"></a>1. 初始化-建树</h3><p>这里指的建树只是将输入的边存储起来。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">200005</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> top<span class="token punctuation">,</span> head<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> Edge <span class="token punctuation">{</span>
    <span class="token keyword">int</span> v<span class="token punctuation">;</span>
    <span class="token keyword">int</span> w<span class="token punctuation">;</span>
    <span class="token keyword">int</span> next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>Edge<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Edge<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span>v <span class="token operator">=</span> v<span class="token punctuation">;</span>
    Edge<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">=</span> w<span class="token punctuation">;</span>
    Edge<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>
    head<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> top<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">,</span> <span class="token operator">&amp;</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>
    u<span class="token operator">++</span><span class="token punctuation">,</span> v<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token function">insert</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="2-寻找重心"><a href="#2-寻找重心" class="headerlink" title="2. 寻找重心"></a>2. 寻找重心</h3><p>我们要对于当前的树找到重心，为了不跳到其它的子树上，用 $vis$ 数组记录已经使用的节点。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> node<span class="token punctuation">,</span> res<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// sz: 子树大小（用于计算重心）</span>

<span class="token keyword">void</span> <span class="token function">dfs_node</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    sz<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ma <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> v <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">||</span> v <span class="token operator">==</span> fa<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>	
        <span class="token function">dfs_node</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> v<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>
        sz<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> sz<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>
        ma <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ma<span class="token punctuation">,</span> sz<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ma <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ma<span class="token punctuation">,</span> m <span class="token operator">-</span> sz<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">></span> ma<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res <span class="token operator">=</span> ma<span class="token punctuation">,</span> node <span class="token operator">=</span> u<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="3-计算以当前根节点的贡献"><a href="#3-计算以当前根节点的贡献" class="headerlink" title="3. 计算以当前根节点的贡献"></a>3. 计算以当前根节点的贡献</h3><p>注意到 $k\le 10^6$，也就是大于 $10^6$ 时一定没有贡献，我们用桶来记录某个长度的路径的最少边数，对于当前的子树，考虑之前加进桶里的答案与当前子树的合并，具体见代码。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// ww: 新树的子树大小（之前的 sz 用于求出重心，选出重心后，子树的大小会发生变化，我们要用新的子树大小求子树的重心）</span>
<span class="token comment" spellcheck="true">// dis: 重心到此节点的距离</span>
<span class="token comment" spellcheck="true">// dep: 此节点相对重心的深度，用于计算路径长度</span>
<span class="token comment" spellcheck="true">// bucket: 用于存放最优解的桶</span>

<span class="token keyword">void</span> <span class="token function">dfs_sz</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">,</span> <span class="token keyword">int</span> lstw<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ww<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>fa<span class="token punctuation">]</span> <span class="token operator">+</span> lstw<span class="token punctuation">,</span> dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> dep<span class="token punctuation">[</span>fa<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> v <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">,</span> w <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">||</span> v <span class="token operator">==</span> fa<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token function">dfs_sz</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ww<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> ww<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>k <span class="token operator">-</span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">!=</span> Inf<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span>ans<span class="token punctuation">,</span> bucket<span class="token punctuation">[</span>k <span class="token operator">-</span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        seq1<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> seq2<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将本棵子树的信息存储，一会加入到桶数组中</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="4-点分治"><a href="#4-点分治" class="headerlink" title="4. 点分治"></a>4. 点分治</h3><p>将上述代码加入至点分治的过程中，并继续递归，不要忘了清空数组。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// m: 当且子树的大小</span>
    res <span class="token operator">=</span> Inf<span class="token punctuation">;</span>
    <span class="token function">dfs_node</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> u<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    u <span class="token operator">=</span> node<span class="token punctuation">,</span> vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    bucket<span class="token punctuation">[</span>dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> lst <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> v <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">,</span> w <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token function">dfs_sz</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ww<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> ww<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> lst <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> cnt<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 将刚刚遍历的子树的信息放入桶中</span>
            bucket<span class="token punctuation">[</span>seq1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>seq1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> seq2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        lst <span class="token operator">=</span> cnt<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> cnt<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 按需清空 bucket</span>
        bucket<span class="token punctuation">[</span>seq1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> Inf<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 递归求解</span>
        <span class="token keyword">int</span> v <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>ww<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>以上就是本题的绝大部分的内容，请读者结合代码理解。</p>
<h1 id="动态点分治"><a href="#动态点分治" class="headerlink" title="动态点分治"></a>动态点分治</h1><p>动态点分治，就是在询问的基础上增加修改，如果修改一次，重新做一次点分治，复杂度太高，有没有一些快速维护的办法？</p>
<p>我们来思考点分治的过程：对于一个子树，找到其中心，其它点都对此点尝试去做贡献。</p>
<p>基于此点，我们引入一个概念。</p>
<h2 id="点分树"><a href="#点分树" class="headerlink" title="点分树"></a>点分树</h2><p>每次点分治的过程中，将当前子树的重心与上一次子树的重心连边所形成的图称为点分树。</p>
<p>点分树的一个重要性质：是一个高度不超过 $\log n$ 的树，所有点的总深度不超过 $n\times \log n&#x3D;n\log n$。</p>
<p>但由于这样会改变树的形态，所以只能维护一些<strong>不需要树的具体形态的问题</strong>。</p>
<p>所以动态点分治的过程大概就是：</p>
<ol>
<li>跑一遍点分治，记录点分树，一些信息要在原有的树上进行计算</li>
<li>修改时在点分树上暴力跳祖先，并修改答案</li>
<li>询问直接输答案</li>
</ol>
<h1 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h1><h2 id="P3806【模板】点分治1"><a href="#P3806【模板】点分治1" class="headerlink" title="P3806【模板】点分治1"></a><a href="https://www.luogu.com.cn/problem/P3806">P3806【模板】点分治1</a></h2><p>板子题，用来练练手，将路径的权值开桶，可以将复杂度做到 $O(nm\log n)$。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">10005</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> Inf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> top<span class="token punctuation">,</span> head<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> sz<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> ww<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> dis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> q<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> seq<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">;</span>
<span class="token keyword">bool</span> bucket<span class="token punctuation">[</span><span class="token number">10000005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> Edge <span class="token punctuation">{</span>
    <span class="token keyword">int</span> v<span class="token punctuation">;</span>
    <span class="token keyword">int</span> w<span class="token punctuation">;</span>
    <span class="token keyword">int</span> next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>Edge<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Edge<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span>v <span class="token operator">=</span> v<span class="token punctuation">;</span>
    Edge<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">=</span> w<span class="token punctuation">;</span>
    Edge<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>
    head<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> top<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> node<span class="token punctuation">,</span> res<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">dfs_sz</span><span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">,</span> <span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">,</span> <span class="token keyword">int</span> lstw<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ww<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>fa<span class="token punctuation">]</span> <span class="token operator">+</span> lstw<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> v <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">,</span> w <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">||</span> v <span class="token operator">==</span> fa<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token function">dfs_sz</span><span class="token punctuation">(</span>rt<span class="token punctuation">,</span> v<span class="token punctuation">,</span> u<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ww<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> ww<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">10000000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> bucket<span class="token punctuation">[</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token operator">++</span>cnt<span class="token punctuation">,</span> seq<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">void</span> <span class="token function">dfs_node</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    sz<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ma <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> v <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">||</span> v <span class="token operator">==</span> fa<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token function">dfs_node</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> v<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>
        sz<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> sz<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>
        ma <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ma<span class="token punctuation">,</span> sz<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ma <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ma<span class="token punctuation">,</span> m <span class="token operator">-</span> sz<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ma <span class="token operator">&lt;</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res <span class="token operator">=</span> ma<span class="token punctuation">,</span> node <span class="token operator">=</span> u<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res <span class="token operator">=</span> Inf<span class="token punctuation">;</span>
    <span class="token function">dfs_node</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> u<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    u <span class="token operator">=</span> node<span class="token punctuation">,</span> vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    bucket<span class="token punctuation">[</span>dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> lst <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> v <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">,</span> w <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token function">dfs_sz</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> v<span class="token punctuation">,</span> u<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ww<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> ww<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> lst <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> cnt<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            bucket<span class="token punctuation">[</span>seq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        lst <span class="token operator">=</span> cnt<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> cnt<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        bucket<span class="token punctuation">[</span>seq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    bucket<span class="token punctuation">[</span>dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> v <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>ww<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">,</span> <span class="token operator">&amp;</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">insert</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"AYE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"NAY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P2634-国家集训队-聪聪可可"><a href="#P2634-国家集训队-聪聪可可" class="headerlink" title="P2634 [国家集训队]聪聪可可"></a><a href="https://www.luogu.com.cn/problem/P2634">P2634 [国家集训队]聪聪可可</a></h2><p>继续练手，完全没难度。</p>
<h2 id="P2056-ZJOI2007-捉迷藏"><a href="#P2056-ZJOI2007-捉迷藏" class="headerlink" title="P2056 [ZJOI2007] 捉迷藏"></a><a href="https://www.luogu.com.cn/problem/P2056">P2056 [ZJOI2007] 捉迷藏</a></h2><p>这题还是有点意思，一道动态点分治，只需考虑修改时去如何维护。</p>
<p>考虑点分治时是如何去计算答案，对于一个以 $u$ 为根的子树，实际上就是找到 $u$ 的子树中最深的根节点和之前 $u$ 的其它子树的关节点合并。</p>
<p>所与对于一个以 $u$，我们要干两件事情：</p>
<ol>
<li>找到两个最深的关节点，更新全局答案</li>
<li>上传一个此棵子树最深的关节点，方便父节点的计算</li>
</ol>
<p>那么我们可以用堆维护这些信息。一个记录当前节点 $u$ 的每个子树内的<strong>一个最深的关节点</strong>，再用一个堆记录当前 $u$ 节点中<strong>所有关节点到 $u$ 节点的父亲 $fa$</strong> 的距离。然后再用堆去进行删除标记。</p>
<p>注意一点：距离信息一定要在原树上统计！距离信息一定要在原树上统计！距离信息一定要在原树上统计！</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">100005</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> Inf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res <span class="token operator">=</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>ch <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">readop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'G'</span> <span class="token operator">||</span> ch <span class="token operator">==</span> <span class="token string">'C'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'G'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        x <span class="token operator">=</span> <span class="token operator">-</span>x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">write</span><span class="token punctuation">(</span>x <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">putchar</span><span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> q<span class="token punctuation">,</span> top<span class="token punctuation">,</span> head<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> p<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> sz<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> ww<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> cur<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> dist<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dep<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> state<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> Edge <span class="token punctuation">{</span>
    <span class="token keyword">int</span> v<span class="token punctuation">;</span>
    <span class="token keyword">int</span> next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>Edge<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Edge<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span>v <span class="token operator">=</span> v<span class="token punctuation">;</span>
    Edge<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>
    head<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> top<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">struct</span> Heap <span class="token punctuation">{</span>
    priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">,</span> del<span class="token punctuation">;</span>
    
    <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">fima</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>del<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> del<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> del<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token operator">-</span>Inf<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">sema</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token function">fima</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token operator">-</span>Inf<span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span>
        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token function">fima</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> y<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">pu</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        del<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>globe<span class="token punctuation">,</span> fadis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> madis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> res<span class="token punctuation">,</span> node<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">dfs_node</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    sz<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ma <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> v <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">||</span> v <span class="token operator">==</span> fa<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token function">dfs_node</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> v<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>
        sz<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> sz<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>
        ma <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ma<span class="token punctuation">,</span> sz<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ma <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ma<span class="token punctuation">,</span> m <span class="token operator">-</span> sz<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">></span> ma<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res <span class="token operator">=</span> ma<span class="token punctuation">,</span> node <span class="token operator">=</span> u<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">dfs_sz</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ww<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> v <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">||</span> v <span class="token operator">==</span> fa<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token function">dfs_sz</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ww<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> ww<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> seq<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> st<span class="token punctuation">,</span> <span class="token keyword">int</span> nowdep<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>
    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">,</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> u <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        seq<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span> 
        <span class="token keyword">int</span> fa <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dist<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>nowdep<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>fa<span class="token punctuation">]</span><span class="token punctuation">[</span>nowdep<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> v <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">||</span> v <span class="token operator">==</span> fa<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">dfs_build</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">,</span> <span class="token keyword">int</span> nowdep<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">bfs</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> nowdep<span class="token punctuation">)</span><span class="token punctuation">;</span>
    res <span class="token operator">=</span> Inf<span class="token punctuation">;</span>
    <span class="token function">dfs_node</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> u<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    u <span class="token operator">=</span> node<span class="token punctuation">,</span> vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> cnt<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        fadis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pu</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>seq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowdep<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    p<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> fa<span class="token punctuation">;</span>
    dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> dep<span class="token punctuation">[</span>fa<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    
    
    
    <span class="token function">dfs_sz</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> v <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">||</span> v <span class="token operator">==</span> fa<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token function">dfs_build</span><span class="token punctuation">(</span>ww<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">,</span> u<span class="token punctuation">,</span> nowdep <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">if</span><span class="token punctuation">(</span>fa <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        madis<span class="token punctuation">[</span>fa<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pu</span><span class="token punctuation">(</span>fadis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fima</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    madis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pu</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cur<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> madis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fima</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> madis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    globe<span class="token punctuation">.</span><span class="token function">pu</span><span class="token punctuation">(</span>cur<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    n <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> u <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">insert</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">dfs_build</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> tot <span class="token operator">=</span> n<span class="token punctuation">;</span>
    q <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> op <span class="token operator">=</span> <span class="token function">readop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>	<span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>tot <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>tot <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token function">write</span><span class="token punctuation">(</span>globe<span class="token punctuation">.</span><span class="token function">fima</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            x <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>state<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> madis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pu</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tot<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> madis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tot<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> u <span class="token operator">=</span> x<span class="token punctuation">,</span> res<span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                res <span class="token operator">=</span> madis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fima</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> madis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">!=</span> cur<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    globe<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>cur<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    cur<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">;</span>
                    globe<span class="token punctuation">.</span><span class="token function">pu</span><span class="token punctuation">(</span>cur<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
                res <span class="token operator">=</span> fadis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fima</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>state<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> fadis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pu</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span> fadis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> res0 <span class="token operator">=</span> fadis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fima</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">!=</span> res0<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    madis<span class="token punctuation">[</span>p<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    madis<span class="token punctuation">[</span>p<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pu</span><span class="token punctuation">(</span>res0<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                u <span class="token operator">=</span> p<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            state<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P4292-WC2010-重建计划"><a href="#P4292-WC2010-重建计划" class="headerlink" title="P4292 [WC2010]重建计划"></a><a href="https://www.luogu.com.cn/problem/P4292">P4292 [WC2010]重建计划</a></h2><p>这题是真的恶心，可以合理质疑现在大部分题解都存在一定的卡精问题。</p>
<p>首先看到平均值最大，不难先想到二分一手，将每条边都减去 $mid$，然后只需选出 $1$ 条符合长度要求的路径，边权和不小于 $0$ 即可。</p>
<p>对于当前正在解决的树，考虑记 $bucket_i$ 表示之前子树中相对深度节点为 $i$ 的最大边权和，$tmp_i$ 表示当前子树中相对深度节点为 $i$ 的最大边权和。</p>
<p>特别地，记 $bucket_0&#x3D;0$。</p>
<p>在将 $tmp$ 合并入 $bucket$ 前，我们要先判断当前的两部分是否能拼成大于 $0$ 的路径。</p>
<p>我们这里记 $u$ 子树的最深深度为 $z_u$，如果不用 $z_u$ 复杂度不对，当 $bucket$ 的深度取 $i$ 时，$tmp$ 的选取范围为 $[L-i,R-i]$，注意到当 $i$ 减小时，$tmp$ 的选取向右滑动，这样我们倒序枚举 $i$，用单调队列维护最大值。</p>
<p>如果从 $R-1$ 开始，复杂度就炸了，所以具体实现时，我们可以分为两部分。</p>
<ol>
<li>当 $i\in [\max(R-z_u, 0),R-1]$，此时 $R-i\in[1,z_u]$，但 $i\in [0,z_u]$ 不一定成立。此时我们只需尝试插入队列，排除不合法的队头，并判断是否可以更新。</li>
<li>当 $i\in[0,min(z_u, max(R-z_u,0)-1)]$ 时，此时 $R-i\in[1,z_u]$ 不一定成立，但 $i\in[0,z_u]$ 一定成立，这时我们只需排除不合法的队头，并判断是否可以更新。</li>
</ol>
<p>至于其它的部分，那都压根没用，这样复杂度就严格限制在了 $O(\sum z)&#x3D;O(n\log n)$。</p>
<p>综上，本题的复杂度为 $O(n\log^2 n)$。</p>
<p>注意要先预处理关于重心和 $z$ 的信息，否则常数太大会被卡。</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">double</span> lf<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">100005</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res <span class="token operator">=</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>ch <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> top<span class="token punctuation">,</span> head<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> L<span class="token punctuation">,</span> R<span class="token punctuation">;</span>
<span class="token keyword">int</span> sz<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> ww<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> Edge <span class="token punctuation">{</span>
    <span class="token keyword">int</span> v<span class="token punctuation">;</span>
    ll w<span class="token punctuation">;</span>
    <span class="token keyword">int</span> next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>Edge<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> ll w<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Edge<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span>v <span class="token operator">=</span> v<span class="token punctuation">;</span>
    Edge<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">=</span> w<span class="token punctuation">;</span>
    Edge<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>
    head<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> top<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> node<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">,</span> res<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">dfs_node</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">,</span> <span class="token keyword">int</span> rt<span class="token punctuation">,</span> <span class="token keyword">int</span> g<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    sz<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ma <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> v <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">||</span> v <span class="token operator">==</span> fa<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token function">dfs_node</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> v<span class="token punctuation">,</span> u<span class="token punctuation">,</span> rt<span class="token punctuation">,</span> g<span class="token punctuation">)</span><span class="token punctuation">;</span>
        sz<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> sz<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>
        ma <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ma<span class="token punctuation">,</span> sz<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ma <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ma<span class="token punctuation">,</span> m <span class="token operator">-</span> sz<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">></span> ma<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res <span class="token operator">=</span> ma<span class="token punctuation">,</span> node<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">[</span>g<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> flag<span class="token punctuation">;</span>
ll bucket<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> tmp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll mares<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">dfs_dis</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">,</span> <span class="token keyword">int</span> dep<span class="token punctuation">,</span> ll dis<span class="token punctuation">,</span> ll k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    tmp<span class="token punctuation">[</span>dep<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span>dep<span class="token punctuation">]</span><span class="token punctuation">,</span> dis<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ll v <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">,</span> w <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">||</span> v <span class="token operator">==</span> fa<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token function">dfs_dis</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">,</span> dep <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> dis <span class="token operator">+</span> w <span class="token operator">-</span> k<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>

<span class="token keyword">int</span> q<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">,</span> t<span class="token punctuation">;</span>
<span class="token keyword">int</span> z<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">dfs_ww</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">,</span> <span class="token keyword">int</span> g<span class="token punctuation">,</span> <span class="token keyword">int</span> dep<span class="token punctuation">,</span> <span class="token keyword">int</span> rt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    z<span class="token punctuation">[</span>rt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>z<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">,</span> dep<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ww<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>g<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> v <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">||</span> v <span class="token operator">==</span> fa<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token function">dfs_ww</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">,</span> g<span class="token punctuation">,</span> dep <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> rt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ww<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>g<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> ww<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>g<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    h <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> R <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">>=</span> <span class="token function">max</span><span class="token punctuation">(</span>R <span class="token operator">-</span> z<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>h <span class="token operator">&lt;=</span> t <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">&lt;</span> L <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            h<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>h <span class="token operator">&lt;=</span> t <span class="token operator">&amp;&amp;</span> tmp<span class="token punctuation">[</span>q<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> tmp<span class="token punctuation">[</span>R <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            t<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        q<span class="token punctuation">[</span><span class="token operator">++</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> R <span class="token operator">-</span> i<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>h <span class="token operator">&lt;=</span> t <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> z<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>
            mares <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>mares<span class="token punctuation">,</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> tmp<span class="token punctuation">[</span>q<span class="token punctuation">[</span>h<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> tmp<span class="token punctuation">[</span>q<span class="token punctuation">[</span>h<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>R <span class="token operator">-</span> z<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> z<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>h <span class="token operator">&lt;=</span> t <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">&lt;</span> L <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            h<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>h <span class="token operator">&lt;=</span> t <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> R <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            mares <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>mares<span class="token punctuation">,</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> tmp<span class="token punctuation">[</span>q<span class="token punctuation">[</span>h<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> tmp<span class="token punctuation">[</span>q<span class="token punctuation">[</span>h<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> z<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> u<span class="token punctuation">,</span> ll k<span class="token punctuation">,</span> <span class="token keyword">int</span> g<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    u <span class="token operator">=</span> node<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>g<span class="token punctuation">]</span><span class="token punctuation">;</span>
    vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> z<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1e18</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    bucket<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ll v <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">,</span> w <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> z<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            tmp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1e18</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">dfs_dis</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> w <span class="token operator">-</span> k<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">merge</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> v <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>ww<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>g<span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">,</span> k<span class="token punctuation">,</span> g <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span>ll k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">build_tree</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">,</span> <span class="token keyword">int</span> g<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res <span class="token operator">=</span> <span class="token number">1e9</span><span class="token punctuation">;</span>
    <span class="token function">dfs_node</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> u<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> u<span class="token punctuation">,</span> g<span class="token punctuation">)</span><span class="token punctuation">;</span>
    u <span class="token operator">=</span> node<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>g<span class="token punctuation">]</span><span class="token punctuation">;</span>
    vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token function">dfs_ww</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> g<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> v <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">||</span> v <span class="token operator">==</span> fa<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token function">build_tree</span><span class="token punctuation">(</span>ww<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>g<span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">,</span> u<span class="token punctuation">,</span> g <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    n <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    L <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> R <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ll u <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> w <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">insert</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w <span class="token operator">*</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">,</span> w <span class="token operator">*</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token function">build_tree</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    ll l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">1e10</span><span class="token punctuation">,</span> mid<span class="token punctuation">,</span> ans <span class="token operator">=</span> l<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>
        mares <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1e18</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> ans <span class="token operator">=</span> mid<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.3Lf\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>lf<span class="token punctuation">)</span>ans <span class="token operator">/</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>没啥要说的，有好题继续更新。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>省选</category>
        <category>NOI9级</category>
      </categories>
  </entry>
  <entry>
    <title>四边形不等式优化 dp</title>
    <url>/2022/05/17/%E5%9B%9B%E8%BE%B9%E5%BD%A2%E4%B8%8D%E7%AD%89%E5%BC%8F%E4%BC%98%E5%8C%96-dp/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title>斜率优化 dp</title>
    <url>/2022/05/09/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96-dp/</url>
    <content><![CDATA[<p>来说一说斜率优化 dp。</p>
<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>斜率优化可以优化形如 $dp_i&#x3D;dp_j+val(j,i)$ 的 <code>1d/1d</code> 转移，其中 $val(j, i)$ 仅包含只有 $i$ 的任意次任意形式，$j$ 的任意次任意形式，$i,j$ 的任意形式的<strong>一次乘积项</strong>，<strong>不一定需要满足某种单调性</strong>。</p>
<p>通过简单的移项，得到形如 $y&#x3D;k\cdot x+b$ 的形式，其中 $x,y$ 仅包含关于 $j$ 的项，$k,b$ 仅包含关于 $i$ 的项，以 $(x,y)$ 建立平面直角坐标系，发现 $dp_i$ 的最值就是以当前的 $i$ 位置的斜率 $k$ 关于若干个转移点 $p_j(x,y)$ 所截得的截距的最值。</p>
<p>说起来比较抽象，我们直接上题目。</p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="任务安排2"><a href="#任务安排2" class="headerlink" title="任务安排2"></a><a href="https://www.acwing.com/problem/content/303/">任务安排2</a></h2><p>看到这道题目后，先考虑一个朴素的转移方程。</p>
<p>考虑记 $t$ 和 $c$ 的前缀和 $sumt$ 和 $sumc$，设 $dp_{i,j}$ 表示把前 $i$ 个任务分成 $j$ 批完成的最小费用。</p>
<p>则有 </p>
<p>$dp_{i,j}&#x3D;\min\limits_{0\le k&lt;i} { dp_{k,j-1}+(S\times j+sumt_i)* (sumc_i-sumc_k) }$</p>
<p>时间复杂度 $O(n^3)$，无法接受。</p>
<p>考虑为什么要设 $dp$ 的第二维，不难发现我们需要当前分的批数得出累积了多少次的启动时间来算贡献。</p>
<p>考虑到 $j$ 只对当前这一批的启动时间造成贡献，我们可以将当前这一批的启动时间同样累积到后续任务的代价中，且<strong>后续任务的总代价为定值，即</strong> $sumc_n-sumc_j$ 那么我们可以去掉第二维。</p>
<p>设 $dp_i$ 表示完成前 $i$ 个任务的最小费用。</p>
<p>$dp_i&#x3D;\min\limits_{0\le j &lt; i}{dp_j+sumt_i*(sumc_i-sumc_j)+S*(sumc_n-sumc_j)}$</p>
<p>这种思想叫做<strong>费用提前计算</strong>，目的就是直接将为定值的贡献直接累积到最后，省略无用信息，时间复杂度 $O(n^2)$。</p>
<p>复杂度已经较优了，考虑斜率优化，适当将转移方程做一些变形。</p>
<p>$$dp_i&#x3D;dp_j+sumt_i*(sumc_i-sumc_j)+S*(sumc_n-sumc_j)$$</p>
<p>$$\Rightarrow dp_i&#x3D;dp_j+sumt_i* sumc_i-sumt_i* sumc_j+S* sumc_n-S*sumc_j$$</p>
<p>$$\Rightarrow dp_j&#x3D;(S+sumt_i)*sumc_j+dp_i-sumt_i*sumc_i-S*sumc_n$$</p>
<p>这是一个一次函数 $y&#x3D;k\cdot x+b$，其中 $ y&#x3D;dp_j, x&#x3D;sumc_j, k&#x3D;S+sumt_i, b&#x3D;dp_i-sumt_i*sumc_i-S*sumc_n $，正好满足斜率优化的形式。</p>
<p>我们将每个决策 $j$ 看作平面直角坐标系的一个点 $(x,y)$，因为求 $dp_i$ 的最小值就是求截距的最小值，所以我们以斜率为 $k$ 的直线，从下往上所触碰到的第一个点，此时的截距即可得出 $dp_i$ 的最小值。</p>
<p>不难发现 $sumc_j$ 单调递增，即 $j$ 越大，它在平面直角坐标系的横坐标就越大，即插入点依次为从左到右。</p>
<p>我们去考虑相邻的三个点，在什么情况下位于中间的点能够造成贡献。</p>
<p>注：这里造成贡献的定义为，存在一个斜率为 $k$ 的直线可以截取到这个点。</p>
<p>我们考虑将第 $1$ 个点和第 $3$ 个点连线，讨论 $2$ 号点在这条线上方还是下方：</p>
<ul>
<li>$2$ 号点在直线上方</li>
<li>$2$ 号点在直线下方</li>
</ul>
<p>所以我们得出， 当 $\dfrac{y_2-y_1}{x_2-x_1}&lt; k&lt; \dfrac{y_3-y_2}{x_3-x_2}$ 且 $2$ 号点在直线下方才有可能作出贡献，以斜率作为比较就是 $\dfrac{y_2-y_1}{x_2-x_1}&lt; \dfrac{y_3-y_2}{x_3-x_2}$，即维护一个<strong>斜率单调递增的下凸壳</strong>，这是一个十分有用的条件！加上此题的 $sumt_i$ 单调递增，我们也有了 $k$ 为单调递增的条件，那么我们只需维护一个单调队列，在取出队头两个点所形成的直线的斜率，如果已经小于等于 $k$，我们<strong>一定不会以队头作为最优决策且以后也不会</strong>，弹出队头并继续更新。对于当前进入队尾的决策点 $j$，如果斜率小于等于当前队尾两个点的斜率，那么就一直弹出，最后插入决策 $j$。</p>
<p>应该还不是太难以理解吧。</p>
<h2 id="任务安排3"><a href="#任务安排3" class="headerlink" title="任务安排3"></a><a href="https://www.acwing.com/problem/content/304/">任务安排3</a></h2><p>与上一题不同，$t$ 可以为负数，即 $sumt$ <strong>不一定单调递增</strong>，那么 $k$ 就不一定单调递增。</p>
<p>考虑 $k$ 单调递增对我们呢带来什么好处，就是可以让我们及时退出单调队列队头的决策点，那么如果没有这个条件，我们就可以不退这些决策点，维护当前的所有的 $(1\sim i-1)$ 下凸壳决策点集，然后以 $k$ 为斜率在里面二分取得最优决策点 $j$ 即可。</p>
<h2 id="CF311B-Cats-Transport"><a href="#CF311B-Cats-Transport" class="headerlink" title="CF311B Cats Transport"></a><a href="https://codeforces.com/problemset/problem/311/B">CF311B Cats Transport</a></h2><p>也是道斜率优化的裸题。	</p>
<p>考虑对每一只猫求一个启动时间 $t_i$，即只要铲屎官在 $t_i$ 时刻及以前出发，就可以接到这只猫。（原题的 $t$ 在这就没用处了）</p>
<p>将 $t$ 排序后得知，每位铲屎官所取得的猫一定是连续的一段，记 $sumt$ 为 $t$ 的前缀和。</p>
<p>设 $dp_{i,j}$ 表示前 $i$ 只猫使用 $j$ 位铲屎官的最小代价。</p>
<p>则有 $dp_{i,j}&#x3D;\min\limits_{0\le k&lt;i}{dp_{k,j-1}+(i-k)*t_i-(sumt_i-sumt_k)}$</p>
<p>简单变形后得到：$dp_{k,j-1}+sumt_k&#x3D;t_i*k+dp_i-t_i*i+sumt_i$，符合斜率优化的形式。</p>
<p>不难发现此题的斜率 $k$ 随着 $i$ 增加仍然<strong>单调不减</strong>，且横坐标 $x$ 也为<strong>单调递增</strong>，故还可沿用任务安排2中的做法。</p>
<p>时间复杂度 $O(n+mp)$。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>
 
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">100005</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxp <span class="token operator">=</span> <span class="token number">105</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ll Lnf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f3f3f3f3fll</span><span class="token punctuation">;</span>
 
<span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res <span class="token operator">=</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>ch <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
ll n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> p<span class="token punctuation">;</span>
ll sumd<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll q<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> head<span class="token punctuation">,</span> tail<span class="token punctuation">;</span>
ll sumt<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxp<span class="token punctuation">]</span><span class="token punctuation">;</span>
 
<span class="token keyword">int</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> k<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
ll <span class="token function">y</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> sumt<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    n <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sumd<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sumd<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> d<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x <span class="token operator">-</span> sumd<span class="token punctuation">[</span>h<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> t <span class="token operator">+</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sumt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sumt<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> p<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        head <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> tail <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        q<span class="token punctuation">[</span><span class="token operator">++</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">&lt;</span> tail <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">y</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>head <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">y</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">x</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>head <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">x</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> head<span class="token operator">++</span><span class="token punctuation">;</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1ll</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">(</span>sumt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> sumt<span class="token punctuation">[</span>q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">y</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>=</span> Lnf<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">&lt;</span> tail <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">y</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">y</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">x</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">x</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tail <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token function">y</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">y</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tail <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">x</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">x</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> tail<span class="token operator">--</span><span class="token punctuation">;</span>
            q<span class="token punctuation">[</span><span class="token operator">++</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P5017-NOIP2018-普及组-摆渡车"><a href="#P5017-NOIP2018-普及组-摆渡车" class="headerlink" title="P5017 [NOIP2018 普及组] 摆渡车"></a><a href="https://www.luogu.com.cn/problem/P5017">P5017 [NOIP2018 普及组] 摆渡车</a></h2><p>这道题还是过于经典了，今天我们来阐述 $O(T+m)$ 的斜率优化做法。这里 $T$ 是 $t_i$ 的最大值。</p>
<p>开始一直在想严格 $O(n)$ 的做法，但斜率优化好像不行，就改设另外的 $dp$ 状态了。</p>
<p>记 $sum_i$ 表示来的时刻在 $[1,i]$ 的有多少人，$sumt_i$ 表示来的时刻在 $[1,i]$ 的时刻之和。</p>
<p>不难想到每次摆渡车所接的人肯定是按时刻排序后连续的一段人，设 $dp_i$ 表示接完 $[1,i]$ 时刻来的人的最小等待时间。</p>
<p>则有方程： $dp_i&#x3D;\min\limits_{0\le j\le \max(i-m,0)}{dp_j+(sum_i-sum_j)* i - (sumt_i-sumt_j)}$</p>
<p>当 $i-m&lt;0$ 时，$dp_i&#x3D;sum_i*i-sumt_i$。</p>
<p>我们继续变换式子，得到：$dp_j+sumt_j&#x3D;i*sum_j+dp_i-sum_i*i+sumt_i$</p>
<p>观察斜率和横坐标仍然单调递增，故继续使用任务安排2的做法即可。</p>
<h2 id="P3628-APIO2010-特别行动队"><a href="#P3628-APIO2010-特别行动队" class="headerlink" title="P3628 [APIO2010]特别行动队"></a><a href="https://www.luogu.com.cn/problem/P3628">P3628 [APIO2010]特别行动队</a></h2><p>这题已经说了取连续的一段人算代价了，故还可设 $dp_i$ 为前 $i$ 个人的最大战斗力。</p>
<p>令 $sumx$ 为 $x$ 的前缀和。</p>
<p>转移方程： $dp_i&#x3D;\min\limits_{0\le j&lt;i}{dp_j+a*(sumx_i-sumx_j)^2+b*(sumx_i-sumx_j)+c}$</p>
<p>提供 $i,j$ 的乘积项，有且仅在 $a*(sumx_i-sumx_j)^2$ 中提供 $-2a\cdot sumx_i\times sumx_j$，那么此题中的 $k&#x3D;-2a\cdot sumx_i,x&#x3D;sumx_j$。</p>
<p>（现在你也应该可以发现，当 $dp$ 方程转化成斜率优化的形式后，只有 $k,x$ 还在起作用）</p>
<p>与前几道题不同的是，本题的 $x$ 为单调递增，但 $k$ 却为<strong>单调递减且为负值</strong>，会不会对我们维护的东西产生影响？</p>
<p>这里我们不在举例解释，最终我们要维护一个<strong>斜率单调递减的上凸壳</strong>，感兴趣的读者自行画图理解。</p>
<p>在判掉队头的斜率时，也同样要变号，即：如果队头的两个决策点组成的直线大于等于 $k$，我们就不会以它为最优决策，弹掉队头然后继续比较。</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1000005</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> f <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            f <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res <span class="token operator">=</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>ch <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res <span class="token operator">*</span> f<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll n<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>
ll q<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> head<span class="token punctuation">,</span> tail<span class="token punctuation">;</span>
ll sumx<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

ll <span class="token function">x</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> sumx<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">y</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> a <span class="token operator">*</span> sumx<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> sumx<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> b <span class="token operator">*</span> sumx<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    n <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> f <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sumx<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sumx<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> f<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token operator">~</span><span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    head <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> tail <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    q<span class="token punctuation">[</span><span class="token operator">++</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">&lt;</span> tail <span class="token operator">&amp;&amp;</span> <span class="token function">y</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>head <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">y</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">2</span> <span class="token operator">*</span> a <span class="token operator">*</span> sumx<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">x</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>head <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">x</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> head<span class="token operator">++</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> a <span class="token operator">*</span> sumx<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> sumx<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> a <span class="token operator">*</span> sumx<span class="token punctuation">[</span>q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">*</span> sumx<span class="token punctuation">[</span>q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> a <span class="token operator">*</span> sumx<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> sumx<span class="token punctuation">[</span>q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> b <span class="token operator">*</span> sumx<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> b <span class="token operator">*</span> sumx<span class="token punctuation">[</span>q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> c<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">&lt;</span> tail <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">y</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">y</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">x</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">x</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tail <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token punctuation">(</span><span class="token function">y</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">y</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tail <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">x</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">x</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> tail<span class="token operator">--</span><span class="token punctuation">;</span>
        q<span class="token punctuation">[</span><span class="token operator">++</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P3195-HNOI2008-玩具装箱"><a href="#P3195-HNOI2008-玩具装箱" class="headerlink" title="P3195 [HNOI2008]玩具装箱"></a><a href="https://www.luogu.com.cn/problem/P3195">P3195 [HNOI2008]玩具装箱</a></h2><p>记 $sumc$ 为 $c$ 的前缀和。</p>
<p>设 $dp_i$ 表示前 $i$ 个玩具的最小花费。</p>
<p>则有方程：$dp_i&#x3D;\min\limits_{0\le j&lt;i}{dp_j+(i-j-1+sum_i-sum_j-L)^2}$。</p>
<p>我们令 $p&#x3D;i-1-L,q&#x3D;sum_j+j$，</p>
<p>$$\Rightarrow dp_i&#x3D;dp_j+(p-q)^2$$</p>
<p>$$\Rightarrow dp_i&#x3D;dp_j+p^2-2p\cdot q+q^2$$</p>
<p>$$\Rightarrow dp_j+q^2&#x3D;2p\cdot q+dp_i-p^2$$</p>
<p>其中 $k&#x3D;2p&#x3D;2\times(i-1-L),x&#x3D;q&#x3D;sum_j+j$，即 $k$ 与 $x$ 都为单调递增，用单调队列维护下凸壳即可。</p>
<h2 id="P2497-SDOI2012-基站建设"><a href="#P2497-SDOI2012-基站建设" class="headerlink" title="P2497 [SDOI2012]基站建设"></a><a href="https://www.luogu.com.cn/problem/P2497">P2497 [SDOI2012]基站建设</a></h2><p>列出转移方程：$dp_i&#x3D;\min\limits_{1\le j&lt;i}{dp_j+\dfrac{x_i-x_j}{2\sqrt{r_j}}}+v_i$，其中 $dp_1&#x3D;v_1$。</p>
<p>移项：$dp_j-\dfrac{x_j}{2\sqrt{r_j}}&#x3D;(-x_i)\times \dfrac{1}{2\sqrt{r_j}}+dp_i-v_i$</p>
<p>我们发现，斜率 $k$ 单调递减，也就是维护上凸壳，但 $x$ 却没有单调性，这时候我们考虑 CDQ 分治。</p>
<p>考虑用 $[l,mid]$ 去更新 $[mid+1,r]$，先将 $[l,mid]$ 按 $r$ 归并排序，这样我们插入时就可以按横坐标顺序插入凸包，而 $[mid+1,r]$ 就先不用排序，因为我们需要使用斜率 $k$ 的单调性去维护凸包，最终实现的时间复杂度即为 $O(n\log n)$。</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">double</span> lf<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">500005</span><span class="token punctuation">;</span>

ll <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ll res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res <span class="token operator">=</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>ch <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
ll p<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> r0<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> id<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll seq<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll q<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> head<span class="token punctuation">,</span> tail<span class="token punctuation">;</span>
lf dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
lf ans <span class="token operator">=</span> <span class="token number">1e15</span><span class="token punctuation">;</span>

lf <span class="token function">x</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2.0</span> <span class="token operator">*</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>r0<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

lf <span class="token function">y</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">(</span>lf<span class="token punctuation">)</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2.0</span> <span class="token operator">*</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>r0<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">solve</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    head <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> tail <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> mid<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">&lt;</span> tail <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">y</span><span class="token punctuation">(</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">y</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token function">x</span><span class="token punctuation">(</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">x</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token punctuation">(</span><span class="token function">y</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">y</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tail <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token function">x</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">x</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tail <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> tail<span class="token operator">--</span><span class="token punctuation">;</span>
        q<span class="token punctuation">[</span><span class="token operator">++</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">&lt;</span> tail <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">y</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>head <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">y</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token function">x</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>head <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">x</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token operator">-</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> head<span class="token operator">++</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>lf<span class="token punctuation">)</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> p<span class="token punctuation">[</span>q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>r0<span class="token punctuation">[</span>q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">solve</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> pos1 <span class="token operator">=</span> l<span class="token punctuation">,</span> pos2 <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> pos <span class="token operator">=</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>pos1 <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> pos2 <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>r0<span class="token punctuation">[</span>id<span class="token punctuation">[</span>pos1<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> r0<span class="token punctuation">[</span>id<span class="token punctuation">[</span>pos2<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            seq<span class="token punctuation">[</span><span class="token operator">++</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> id<span class="token punctuation">[</span>pos1<span class="token punctuation">]</span><span class="token punctuation">,</span> pos1<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            seq<span class="token punctuation">[</span><span class="token operator">++</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> id<span class="token punctuation">[</span>pos2<span class="token punctuation">]</span><span class="token punctuation">,</span> pos2<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> pos1<span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> mid<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        seq<span class="token punctuation">[</span><span class="token operator">++</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> pos2<span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        seq<span class="token punctuation">[</span><span class="token operator">++</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        id<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> seq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    n <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r0<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	
        id<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1e15</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">solve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> r0<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.3Lf\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P2305-NOI2014-购票"><a href="#P2305-NOI2014-购票" class="headerlink" title="P2305 [NOI2014] 购票"></a><a href="https://www.luogu.com.cn/problem/P2305">P2305 [NOI2014] 购票</a></h2><p>树上斜率优化，还是有一定的难度。</p>
<p>设 $dp_u$ 表示从 $u$ 点走到 $1$ 点的最小费用。</p>
<p>则转移方程为： $dp_u&#x3D;\min\limits_{fa\in anc_u,dep_u-dep_{fa}\le l_u}{dp_{fa}+p_u*(dep_u-dep_{fa})+q_u}$</p>
<p>稍微移一下项：$dp_{fa}&#x3D;p_u*dep_{fa}+dp_u-p_u*dep_u-q_u$</p>
<p>这里的 $x$ 虽是单调递增，但斜率 $k$ 却没有单调性，所以我们需要把整个凸壳存下来然后二分，因为只用维护一头，我们可以采用单调栈存储。</p>
<p>但是在转移点的选择中还存在一个 $dep_u-dep_{fa}\le l_u$ 的限制，也就是每一个 $u$，它的转移点并不是 $1-u$ ，而有一个上限，那么我们就得尝试维护区间查询一个单调栈。</p>
<p>考虑到是树上问题，可能会有删除的操作，但我们不想写可撤销单调栈，怎么办。</p>
<p>这里有一种很好的 idea 叫做<strong>出栈序</strong>，我们先将树进行一遍 $dfs$，然后在退出这个节点时给它标号，有点后序遍历的感觉。</p>
<p>那么这是我们发现了一个神奇的性质，首先对于一个点 $u$，它的子节点所形成的若干个子树之间，两两之间的编号没有交集，这样我们在进行 $dfs$ 修改和查询时，不会查询到其它的子树上（尽管其它子树可能已经被修改），而查询的这条链的下方的节点，编号一定比整条链所有的编号要小，这条链上方的节点，编号一定比整条链所有的编号要大，这样我们在查询时，就能保证查的单调栈一定是只包含这条链的决策点的单调栈。</p>
<p>然后就比较好做了，维护一个线段树套单调栈，修改均摊 $O(\log n)$，查询 $O(\log^2 n)$。</p>
<p>总时间复杂度 $O(n\log^2 n)$，空间复杂度 $O(n\log n)$。</p>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">200005</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ll Lnf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f3f3f3f3fll</span><span class="token punctuation">;</span>

ll <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ll res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res <span class="token operator">=</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>ch <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> t<span class="token punctuation">,</span> top<span class="token punctuation">,</span> head<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> dfn<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> node<span class="token punctuation">;</span>
ll anc<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dist<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dep<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll f<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> p0<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> l<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> Edge <span class="token punctuation">{</span>
    <span class="token keyword">int</span> v<span class="token punctuation">;</span>
    ll w<span class="token punctuation">;</span>
    <span class="token keyword">int</span> next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>Edge<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> ll w<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Edge<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span>v <span class="token operator">=</span> v<span class="token punctuation">;</span>
    Edge<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">=</span> w<span class="token punctuation">;</span>
    Edge<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>
    head<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> top<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">long</span> <span class="token keyword">double</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token keyword">int</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> dep<span class="token punctuation">[</span>fa<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">long</span> <span class="token keyword">double</span> <span class="token function">y</span><span class="token punctuation">(</span><span class="token keyword">int</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>fa<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">struct</span> Stack <span class="token punctuation">{</span>
    vector<span class="token operator">&lt;</span>ll<span class="token operator">></span> stac<span class="token punctuation">;</span>
    
    <span class="token function">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        stac<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> cur <span class="token operator">=</span> stac<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">y</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">y</span><span class="token punctuation">(</span>stac<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token function">x</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">x</span><span class="token punctuation">(</span>stac<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token function">y</span><span class="token punctuation">(</span>stac<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">y</span><span class="token punctuation">(</span>stac<span class="token punctuation">[</span>cur <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token function">x</span><span class="token punctuation">(</span>stac<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">x</span><span class="token punctuation">(</span>stac<span class="token punctuation">[</span>cur <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            stac<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cur<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        stac<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
    
    ll <span class="token function">search</span><span class="token punctuation">(</span>ll k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>stac<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> stac<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">y</span><span class="token punctuation">(</span>stac<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">y</span><span class="token punctuation">(</span>stac<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token function">x</span><span class="token punctuation">(</span>stac<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">x</span><span class="token punctuation">(</span>stac<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                r <span class="token operator">=</span> mid<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> stac<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

Stack tree<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">ls</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">rs</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">>=</span> x<span class="token punctuation">)</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token function">ls</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> x<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token function">rs</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> x<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> ql<span class="token punctuation">,</span> <span class="token keyword">int</span> qr<span class="token punctuation">,</span> <span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> ql <span class="token operator">&amp;&amp;</span> r <span class="token operator">==</span> qr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> fa <span class="token operator">=</span> tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>p0<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>fa <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> Lnf<span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> dp<span class="token punctuation">[</span>fa<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">-</span> dep<span class="token punctuation">[</span>fa<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> p0<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> q<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">>=</span> qr<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token function">ls</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> ql<span class="token punctuation">,</span> qr<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> ql<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token function">rs</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> ql<span class="token punctuation">,</span> qr<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token function">ls</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> ql<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token function">rs</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> qr<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">dfs1</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">,</span> ll lstw<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    anc<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> fa<span class="token punctuation">,</span> dist<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> lstw<span class="token punctuation">,</span> dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> dep<span class="token punctuation">[</span>fa<span class="token punctuation">]</span> <span class="token operator">+</span> lstw<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>k <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        anc<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> anc<span class="token punctuation">[</span>anc<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        dist<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>anc<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dist<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ll v <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">,</span> w <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>
        <span class="token function">dfs1</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>node<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">up</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ll v <span class="token operator">=</span> u<span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span>k <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>anc<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> sum <span class="token operator">+</span> dist<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> l<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sum <span class="token operator">+</span><span class="token operator">=</span> dist<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> v <span class="token operator">=</span> anc<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">void</span> <span class="token function">dfs2</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>u <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">int</span> fa <span class="token operator">=</span> <span class="token function">up</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
         dp<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>fa<span class="token punctuation">]</span><span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    <span class="token function">update</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> v <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>
        <span class="token function">dfs2</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    n <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p0<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">insert</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">dfs1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0ll</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">dfs2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>学个斜率优化总共用了也就 $1$ 周，但博客磨蹭了好久才写完。</p>
<p>大概几个月前，在刚翻开蓝书的斜率优化时，我对它还有一定的抵触心理，觉得自己应该看不懂。</p>
<p>但现在经过一个多小时的研究，最终也是能理解了书中的意思，自己找了几道题目也能够解出来，我认为还是达到了学习的效果和目的。</p>
<p>对于学习 OI，我们不能抱有太多逃避，不然你总是也学不会，只要肯努力，肯细心琢磨，才能理解的透彻。</p>
<p>话说我觉得我应该也只是理解了斜率优化的皮毛，如果还有更好的斜率优化题目，我也会及时在此更新。</p>
<p>下一步也不知道要新学点啥，要不定个四边形不等式？</p>
<p>这里奉劝大家：复习要及时，不然退役两行泪。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>省选</category>
        <category>NOI8级</category>
      </categories>
  </entry>
  <entry>
    <title>线性基</title>
    <url>/2022/02/24/%E7%BA%BF%E6%80%A7%E5%9F%BA/</url>
    <content><![CDATA[<p>　<span id="more"></span></p>
<h1 id="一些定义"><a href="#一些定义" class="headerlink" title="一些定义"></a>一些定义</h1><h2 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h2><p>向量是一个抽象的概念，简单的说就是一个有方向有大小的量。</p>
<p>一般地，将一个 $k$ 维向量表示为 ${a_1,a_2,\cdots,a_k}$。</p>
<p>下面我们研究的均为 $1$ 维向量（其实就是普通的数）</p>
<h2 id="异或和"><a href="#异或和" class="headerlink" title="异或和"></a>异或和</h2><p>对于集合 $S&#x3D;{a_1,a_2,\cdots,a_m}$，异或和为 $a_1 \oplus a_2\oplus\cdots\oplus a_m$，其中 $\oplus$ 为按位异或运算。</p>
<h2 id="张成"><a href="#张成" class="headerlink" title="张成"></a>张成</h2><p>对于一个集合 $S$，它的所有子集的异或和组成的集合，称为集合 $S$ 的张成，记作 $\operatorname{span}(S)$。</p>
<h2 id="表出"><a href="#表出" class="headerlink" title="表出"></a>表出</h2><p>对于元素 $x$ 和集合 $S$，$x\notin S$，若 $S$ 的异或和为 $x$，则称 $x$ 能被 $S$ 表出，或称 $x$ 能被 $S$ 中的元素表出。</p>
<h2 id="线性相关"><a href="#线性相关" class="headerlink" title="线性相关"></a>线性相关</h2><p>对于一个集合 $S$，如果存在 $k\in S$，将去除元素 $k$ 后的集合记为 $S’$，若 $k\in \operatorname{span}(S’)$，则称集合 $S$ 线性相关，反之称为线性无关。</p>
<p>若 $k$ 能被 $S$ 中的其它元素表出，那么集合 $S$ 一定线性相关。</p>
<h2 id="线性基-text-Base"><a href="#线性基-text-Base" class="headerlink" title="线性基 $(\text{Base})$"></a>线性基 $(\text{Base})$</h2><p>称集合 $B$ 是集合 $S$ 的线性基，当且仅当：</p>
<ul>
<li>$B\in \operatorname{span}(S)$</li>
<li>集合 $B$ 线性无关</li>
</ul>
<p>线性基的基本性质：</p>
<ol>
<li><p>$B$ 是极小的满足线性基的集合。任何 $B$ 的真子集都不可能成为 $S$ 的线性基。</p>
</li>
<li><p>$S$ 中的任何元素都可被集合 $B$ 中的一些元素唯一表出。</p>
<blockquote>
<p>$\text{Proof:}$</p>
<p>假设 $x\in S,B&#x3D;{a_1,a_2,\cdots,a_k}$ 。</p>
<p>$x&#x3D;a_{i_1}\oplus a_{i_2}\oplus\cdots\oplus a_{i_n} -$ ① </p>
<p>$x&#x3D;a_{j_1}\oplus a_{j_2}\oplus\cdots\oplus a_{j_m} -$ ②</p>
<p>① $\oplus$ ②，得 $a_{i_1}&#x3D;a_{i_2}\oplus\cdots\oplus a_{i_n}\oplus a_{j_1}\oplus\cdots\oplus a_{j_m}$，则集合 $B$ 线性相关，与线性基定义矛盾。</p>
<p>则假设不成立，证毕。</p>
</blockquote>
</li>
<li><p>存在一个线性基 $B$，使得线性基 $B$ 中的每一个数在二进制下最高位互不相同，若有最高位相同的两个数 $a,b$，记 $c&#x3D;a\oplus b$，删除 $a$ 或 $b$ 后插入 $c$，若还有相同的就继续操作直到没有为止。</p>
<blockquote>
<p>$\text{Proof:}$</p>
<p>显然， $a$ 能被 $b,c$ 表出，则可以将 $a$ 删除。</p>
</blockquote>
</li>
<li><p>$|B|\le \log_2a$</p>
<blockquote>
<p>$\text{Proof:}$</p>
<p>由性质 $3$ 可得。</p>
</blockquote>
</li>
</ol>
<h1 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h1><p>对于一个集合 $S$，怎么构造线性基呢？</p>
<p>举个例子， $S&#x3D;{7,5,4}$</p>
<p>首先构造一张表格：</p>
<table>
<thead>
<tr>
<th></th>
<th>$j&#x3D;2$</th>
<th>$j&#x3D;1$</th>
<th>$j&#x3D;0$</th>
</tr>
</thead>
<tbody><tr>
<td>$b_2$</td>
<td>$0$</td>
<td>$0$</td>
<td>$0$</td>
</tr>
<tr>
<td>$b_1$</td>
<td>$0$</td>
<td>$0$</td>
<td>$0$</td>
</tr>
<tr>
<td>$b_0$</td>
<td>$0$</td>
<td>$0$</td>
<td>$0$</td>
</tr>
</tbody></table>
<p>我们一个一个插入，首先插入 $7$，$7&#x3D;(111)_2$。</p>
<p>$7$ 在二进制下的最高位，也就是第 $2$ 位为 $1$，则可将 $7$ 插入线性基的 $b_2$ 中，都是用二进制表示。</p>
<table>
<thead>
<tr>
<th></th>
<th>$j&#x3D;2$</th>
<th>$j&#x3D;1$</th>
<th>$j&#x3D;0$</th>
</tr>
</thead>
<tbody><tr>
<td>$b_2$</td>
<td>$1$</td>
<td>$1$</td>
<td>$1$</td>
</tr>
<tr>
<td>$b_1$</td>
<td>$0$</td>
<td>$0$</td>
<td>$0$</td>
</tr>
<tr>
<td>$b_0$</td>
<td>$0$</td>
<td>$0$</td>
<td>$0$</td>
</tr>
</tbody></table>
<p>然后插 $5$，$5&#x3D;(101)_2$。</p>
<p>首先看 $5$ 的第 $2$ 位为 $1$，但是 $b_2$ 已经有值了，那么让 $5\oplus b_2&#x3D;(010)_2$，这一步的原理就参照了线性基性质 $3$。</p>
<p>然后看第 $1$ 位，发现是 $1$，并且 $b_1$ 还没有填，那么就将 $(010)_2$ 填在 $b_1$。</p>
<table>
<thead>
<tr>
<th></th>
<th>$j&#x3D;2$</th>
<th>$j&#x3D;1$</th>
<th>$j&#x3D;0$</th>
</tr>
</thead>
<tbody><tr>
<td>$b_2$</td>
<td>$1$</td>
<td>$1$</td>
<td>$1$</td>
</tr>
<tr>
<td>$b_1$</td>
<td>$0$</td>
<td>$1$</td>
<td>$0$</td>
</tr>
<tr>
<td>$b_0$</td>
<td>$0$</td>
<td>$0$</td>
<td>$0$</td>
</tr>
</tbody></table>
<p>最后插 $4$，$4&#x3D;(100)_2$。</p>
<p>还是同样的道理，$4$ 的第 $2$ 位为 $1$，但 $b_2$ 有值，$4\oplus b_2&#x3D;(011)_2$。</p>
<p>$(011)_2$ 的第 $1$ 位为 $1$，但 $b_1$ 有值，$(011)_2\oplus b_1&#x3D;(001)_2$。</p>
<p>$(001)_2$ 的第 $0$ 位为 $1$，$b_0$ 没有值，那么 $b_0&#x3D;(001)_2$。</p>
<p>这样我们就造出了完整的线性基表：</p>
<table>
<thead>
<tr>
<th></th>
<th>$j&#x3D;2$</th>
<th>$j&#x3D;1$</th>
<th>$j&#x3D;0$</th>
</tr>
</thead>
<tbody><tr>
<td>$b_2$</td>
<td>$1$</td>
<td>$1$</td>
<td>$1$</td>
</tr>
<tr>
<td>$b_1$</td>
<td>$0$</td>
<td>$1$</td>
<td>$0$</td>
</tr>
<tr>
<td>$b_0$</td>
<td>$0$</td>
<td>$0$</td>
<td>$1$</td>
</tr>
</tbody></table>
<p>$B&#x3D;{7,2,1}$</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> maxl <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这里代表的是 a 的值域在二进制下的最大长度</span>
ll b<span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">bool</span> <span class="token function">insert</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> maxl<span class="token punctuation">;</span>j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1ll</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这是刚刚没有提到的情况，如果当前的这一位为 0，直接跳过这一位</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            x <span class="token operator">^</span><span class="token operator">=</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>复杂度 $O(\log a)$。</p>
<h1 id="text-Ex-构造：-text-Menci-线性基"><a href="#text-Ex-构造：-text-Menci-线性基" class="headerlink" title="$\text{Ex}$ 构造：$\text{Menci}$ 线性基"></a>$\text{Ex}$ 构造：$\text{Menci}$ 线性基</h1><p>$\text{Menci}$ 线性基也满足线性基的性质，同时还有一些特殊性质，具体可见<a href="https://oi.men.ci/linear-basis-notes/">线性基学习笔记 | Menci’s OI Blog</a>。</p>
<p>实现起来也相对简单，对于一个元素 $x$，若找到了这个元素应该插入的位置 $b_j$，那么先将 $x$ 与比 $x$ 位数小的数分别异或，前提是 $x$ 的这一位是 $1$。</p>
<p>然后就将比 $x$ 位数大的数与 $x$ 异或即可，前提是这些数的第 $j$ 位是 $1$。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> maxl <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>
ll b<span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">bool</span> <span class="token function">insert</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> maxl<span class="token punctuation">;</span>j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1ll</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            x <span class="token operator">^</span><span class="token operator">=</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>k <span class="token operator">&lt;</span> j<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1ll</span> <span class="token operator">&lt;&lt;</span> k<span class="token punctuation">)</span> <span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    x <span class="token operator">^</span><span class="token operator">=</span> b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>k <span class="token operator">&lt;=</span> maxl<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1ll</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span> b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    b<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> x<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>复杂度 $O(\log a)$。</p>
<h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><p>$\text{Problem 1:}$ 给定 $n$ 个数 $a_1\sim a_n$，求从中选出任意个数所能得到的最大异或值。</p>
<p>对于普通的线性基，解决方案为：</p>
<pre class=" language-cpp"><code class="language-cpp">ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> maxl<span class="token punctuation">;</span>j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> ans <span class="token operator">^</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>对于 $\text{Menci}$ 线性基，解决方案为：</p>
<pre class=" language-cpp"><code class="language-cpp">ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> maxl<span class="token punctuation">;</span>j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ans <span class="token operator">=</span> ans <span class="token operator">^</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>$\text{Problem 2:}$ 给定 $n$ 个数 $a_1\sim a_n$，求从中选出任意个数与给定数 $x$ 异或所能得到的最大异或值。</p>
<p>对于普通的线性基，解决方案为：</p>
<pre class=" language-cpp"><code class="language-cpp">ll ans <span class="token operator">=</span> x<span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> maxl<span class="token punctuation">;</span>j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> ans <span class="token operator">^</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>对于 $\text{Menci}$ 线性基，解决方案为：</p>
<pre class=" language-cpp"><code class="language-cpp">ll ans <span class="token operator">=</span> x<span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> maxl<span class="token punctuation">;</span>j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ans <span class="token operator">=</span> ans <span class="token operator">^</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>$\text{Problem 3:}$ 给定 $n$ 个数 $a_1\sim a_n$，求从中选出任意个数所能得到的最小异或值。</p>
<p>对于两种线性基，答案都为线性基中的最小元素。</p>
<p>$\text{Problem 4:}$ 给定 $n$ 个数 $a_1\sim a_n$，求 $a_1\sim a_n$ 能组成的所有异或值的个数。</p>
<p>求出线性基中的元素个数 $k$，则答案为 $2^k$。</p>
<p>$\text{Problem 5:}$ 给定 $n$ 个数 $a_1\sim a_n$，求 $a_1\sim a_n$ 能组成的所有异或值的第 $k$ 小值。</p>
<p>普通线性基不可做，而 $\text{Menci}$ 线性基的解决方案为：</p>
<pre class=" language-cpp"><code class="language-cpp">
</code></pre>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="BJWC2011-元素"><a href="#BJWC2011-元素" class="headerlink" title="[BJWC2011]元素 "></a>[<a href="https://www.luogu.com.cn/problem/P4570">BJWC2011]元素 </a></h2><p>转化题意后得：在给定的集合 $S$，选取出一个线性基 $B$，使得魔力值最大。</p>
<p>将魔力值从大到小排序，若能插入线性基，就记入答案，否则不记，最终的答案即为最大值。</p>
<p>证明很显然，因为线性基的大小是一定的，对于一个没有在线性基中的元素 $x$，一定存在一个属于线性基的元素 $y$，删除 $y$ 后 $x$ 就可被放入。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">double</span> lf<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> Inf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ll Lnf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f3f3f3fll</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> Mod <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1005</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">;</span>
ll num<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> magic<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> id<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
ll ans<span class="token punctuation">;</span>

<span class="token keyword">bool</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> magic<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> magic<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">insert</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">61</span><span class="token punctuation">;</span>j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1ll</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        
        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            x <span class="token operator">^</span><span class="token operator">=</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> 
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>k <span class="token operator">&lt;</span> j<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1ll</span> <span class="token operator">&lt;&lt;</span> k<span class="token punctuation">)</span> <span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    x <span class="token operator">^</span><span class="token operator">=</span> b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>k <span class="token operator">&lt;=</span> <span class="token number">61</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1ll</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span> b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    b<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> x<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>	
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>magic<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        id<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>id <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> id <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> compare<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ll x <span class="token operator">=</span> num<span class="token punctuation">[</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y <span class="token operator">=</span> magic<span class="token punctuation">[</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">insert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ans <span class="token operator">+</span><span class="token operator">=</span> y<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="TJOI2008-彩灯"><a href="#TJOI2008-彩灯" class="headerlink" title="[TJOI2008]彩灯"></a><a href="https://www.luogu.com.cn/problem/P3857">[TJOI2008]彩灯</a></h2><p>此题即为 $\text{Problem 4}$ ，直接求线性基即可。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">double</span> lf<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> Inf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ll Lnf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f3f3f3fll</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> Mod <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">55</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
<span class="token keyword">int</span> cnt<span class="token punctuation">;</span>
ll b<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> light<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">bool</span> <span class="token function">insert</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> n<span class="token punctuation">;</span>j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1ll</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            x <span class="token operator">^</span><span class="token operator">=</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>k <span class="token operator">&lt;</span> j<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1ll</span> <span class="token operator">&lt;&lt;</span> k<span class="token punctuation">)</span> <span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    x <span class="token operator">^</span><span class="token operator">=</span> b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>k <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1ll</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span> b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    b<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> x<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>light <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ll x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>light<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'O'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                x <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1ll</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">insert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> n<span class="token punctuation">;</span>j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cnt<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1ll</span> <span class="token operator">&lt;&lt;</span> cnt<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2008</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="WC2011-最大XOR和路径"><a href="#WC2011-最大XOR和路径" class="headerlink" title="[WC2011]最大XOR和路径"></a><a href="https://www.luogu.com.cn/problem/P4151">[WC2011]最大XOR和路径</a></h2><p>首先我们观察到一个性质，最终答案可以为 $1$ 到 $n$ 的一条简单路径，加上若干个环的值得到。因为环可以看作从这个路径上的一点出发，走完一个环后再走回到原路径中，这样路径与环之间的边会走两次，从而不会贡献在异或和中。</p>
<p>那么是不是需要将无向图中所有的环找出来，然后求线性基呢？但无向图中的环是指数级别，无法做到。</p>
<p>想想我们是如何判断一个无向图中是否有环的：每走过一点，标记一下，如果走到了有标记的点就说明有环。</p>
<p>那我们是否可以只用这些环？答案居然是可以！（具体证明略）</p>
<p>这样我们找环的时间就从指数级的复杂度降到了 $O(n)$，可以接受。</p>
<p>下面就需要找一条从 $1$ 到 $n$ 的简单路径了，但如果有多条路径可以选择应该选哪个？</p>
<p>其实任选一条就行，若有两条路径可选择，设为路径 $A$ 和路径 $B$，则 $AB$ 必然也是一个环，这个环也能被线性基表出，那么无论选 $A$ 还是选 $B$，另一个都可以通过 $AB$ 环和自己表出，故选哪条都是一样的。</p>
<p>由此就得到了一个十分容易实现的思路：记 $node_u$ 为 $1$ 节点走到 $u$ 节点的异或和， 且走过的路径为简单路径，这样找到环时会很容易计算出这个环的异或和。然后求出线性基并与 $node_n$ 取异或和最大值，这与 $\text{Problem 2}$ 相同，然后就解决了。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">double</span> lf<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> Inf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ll Lnf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f3f3f3fll</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> Mod <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">50005</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxm <span class="token operator">=</span> <span class="token number">100005</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> top<span class="token punctuation">,</span> head<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll node<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">;</span>
ll b<span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> Edge <span class="token punctuation">{</span>
    <span class="token keyword">int</span> v<span class="token punctuation">;</span>
    ll w<span class="token punctuation">;</span>
    <span class="token keyword">int</span> next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>Edge<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> maxm<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> ll w<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Edge<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span>v <span class="token operator">=</span> v<span class="token punctuation">;</span>
    Edge<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">=</span> w<span class="token punctuation">;</span>
    Edge<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>
    head<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> top<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">insert</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">61</span><span class="token punctuation">;</span>j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1ll</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            x <span class="token operator">^</span><span class="token operator">=</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>k <span class="token operator">&lt;</span> j<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1ll</span> <span class="token operator">&lt;&lt;</span> k<span class="token punctuation">)</span> <span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    x <span class="token operator">^</span><span class="token operator">=</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>k <span class="token operator">&lt;=</span> <span class="token number">61</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1ll</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span> b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    b<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> x<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> v <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>
        ll w <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">insert</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">^</span> node<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">^</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            node<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">^</span> w<span class="token punctuation">;</span>
            <span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span>
        ll w<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">,</span> <span class="token operator">&amp;</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">insert</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    node<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ans <span class="token operator">=</span> node<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">61</span><span class="token punctuation">;</span>j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> ans <span class="token operator">^</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="SCOI2016-幸运数字"><a href="#SCOI2016-幸运数字" class="headerlink" title="[SCOI2016]幸运数字"></a><a href="https://www.luogu.com.cn/problem/P3292">[SCOI2016]幸运数字</a></h2><p>此题只需使用一个新操作：合并两个线性基。</p>
<p>因为两个线性基的长度都不超过 $\log a$，那就直接暴力合并。</p>
<p>时间复杂度 $O(\log^2 a)$。</p>
<p>然后用倍增即能得到 $O(n\log n\log^2 a)$ 的优秀做法，不过题解还有更优秀的，但不是本篇文章的重点。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">double</span> lf<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> Inf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ll Lnf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f3f3f3fll</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> Mod <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">20005</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> q<span class="token punctuation">,</span> top<span class="token punctuation">,</span> head<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> lg<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> dep<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> anc<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
ll st<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
ll ans<span class="token punctuation">;</span>

<span class="token keyword">struct</span> Edge <span class="token punctuation">{</span>
    <span class="token keyword">int</span> v<span class="token punctuation">;</span>
    <span class="token keyword">int</span> next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>Edge<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Edge<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span>v <span class="token operator">=</span> v<span class="token punctuation">;</span>
    Edge<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>
    head<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> top<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx<span class="token punctuation">,</span> <span class="token keyword">int</span> idy<span class="token punctuation">,</span> ll x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">61</span><span class="token punctuation">;</span>j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1ll</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">[</span>idy<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            x <span class="token operator">^</span><span class="token operator">=</span> st<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">[</span>idy<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            st<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">[</span>idy<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 

<span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx1<span class="token punctuation">,</span> <span class="token keyword">int</span> idy1<span class="token punctuation">,</span> <span class="token keyword">int</span> idx2<span class="token punctuation">,</span> <span class="token keyword">int</span> idy2<span class="token punctuation">,</span> <span class="token keyword">int</span> idx3<span class="token punctuation">,</span> <span class="token keyword">int</span> idy3<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">61</span><span class="token punctuation">;</span>j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        st<span class="token punctuation">[</span>idx3<span class="token punctuation">]</span><span class="token punctuation">[</span>idy3<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> st<span class="token punctuation">[</span>idx1<span class="token punctuation">]</span><span class="token punctuation">[</span>idy1<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">61</span><span class="token punctuation">;</span>j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>idx2<span class="token punctuation">]</span><span class="token punctuation">[</span>idy2<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>	 <span class="token punctuation">{</span>
            <span class="token function">insert</span><span class="token punctuation">(</span>idx3<span class="token punctuation">,</span> idy3<span class="token punctuation">,</span> st<span class="token punctuation">[</span>idx2<span class="token punctuation">]</span><span class="token punctuation">[</span>idy2<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> dep<span class="token punctuation">[</span>fa<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    anc<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> fa<span class="token punctuation">;</span>
    <span class="token function">insert</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">insert</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>fa<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> k<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        anc<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> anc<span class="token punctuation">[</span>anc<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">merge</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> anc<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> u<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> v <span class="token operator">=</span> Edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>v <span class="token operator">==</span> fa<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">insertb</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">61</span><span class="token punctuation">;</span>j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1ll</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            x <span class="token operator">^</span><span class="token operator">=</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">mergeb</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx<span class="token punctuation">,</span> <span class="token keyword">int</span> idy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">61</span><span class="token punctuation">;</span>j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">[</span>idy<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">insertb</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">[</span>idy<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">LCA</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>dep<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">&lt;</span> dep<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>dep<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">></span> dep<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> k <span class="token operator">=</span> lg<span class="token punctuation">[</span>dep<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">-</span> dep<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">mergeb</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">,</span> x <span class="token operator">=</span> anc<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> lg<span class="token punctuation">[</span>dep<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>k <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>anc<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">!=</span> anc<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">mergeb</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">,</span> x <span class="token operator">=</span> anc<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token function">mergeb</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">,</span> y <span class="token operator">=</span> anc<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">mergeb</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">mergeb</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    lg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        lg<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> lg<span class="token punctuation">[</span>i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">addEdge</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">addEdge</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">LCA</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">61</span><span class="token punctuation">;</span>j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> ans <span class="token operator">^</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>作为省选中相对简单的算法，线性基代码实现难度很低，在省选中相对于其它题目一般都为送分题，但线性基背后的性质和应用是我们在比赛中所应注意的，能够快速的推出题干中线性基的相关条件，就如 <a href="https://www.luogu.com.cn/problem/P4151">[WC2011]最大XOR和路径</a>，分析出不用得到所有的环而是只用标记法得出的环就可组成的线性基是解题的关键，或许在场上不能证明的结论，但希望仍能有机会在场上实现出来，所以场下的经验积累就十分重要。</p>
<p>就这样吧，跑路了，如果还有很好的题会继续更新的。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>省选</category>
        <category>NOI7级</category>
      </categories>
  </entry>
  <entry>
    <title>Codeforces Contest Practice</title>
    <url>/2022/02/02/Codeforces-Contest-Practice/</url>
    <content><![CDATA[<h1 id="Educational-Codeforces-Round-70-text-1202"><a href="#Educational-Codeforces-Round-70-text-1202" class="headerlink" title="Educational Codeforces Round 70$\text{(1202)}$"></a>Educational Codeforces Round 70$\text{(1202)}$</h1><table>
<thead>
<tr>
<th align="center">$\text{Penalty}$</th>
<th align="center">$\texttt{A}$</th>
<th align="center">$\texttt{B}$</th>
<th align="center">$\texttt{C}$</th>
<th align="center">$\texttt{D}$</th>
<th align="center">$\texttt{E}$</th>
<th align="center">$\texttt{F}$</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$251$</td>
<td align="center">$\texttt{+}$</td>
<td align="center">$\texttt{+5}$</td>
<td align="center">$\texttt{-2}$</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">$\text{00:12}$</td>
<td align="center">$\text{01:04}$</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">补题</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
</tbody></table>
<p>比赛时间：$\text{2022&#x2F;7&#x2F;21 14:30}$</p>
<h2 id="A-You-Are-Given-Two-Binary-Strings…"><a href="#A-You-Are-Given-Two-Binary-Strings…" class="headerlink" title="A. You Are Given Two Binary Strings…"></a><a href="https://codeforces.com/contest/1202/problem/A">A. You Are Given Two Binary Strings…</a></h2><p>$\text{Solution:}$</p>
<p>因为是倒序字典序最小，所以我们要尽可能消除靠后的 $1$。</p>
<p>观察到 $k$ 会让 $\text{B}$ 串向左移 $k$ 位，我们判断一下 $\text{B}$ 串的最后一个 $1$，向左移到 $\text{A}$ 串第一个能移到的 $1$ 的位置。</p>
<h2 id="B-You-Are-Given-a-Decimal-String…"><a href="#B-You-Are-Given-a-Decimal-String…" class="headerlink" title="B. You Are Given a Decimal String…"></a><a href="https://codeforces.com/contest/1202/problem/B">B. You Are Given a Decimal String…</a></h2><p>$\text{Solution:}$</p>
<p>首先不妨设 $dp_{x,y,i,j}$ 表示用 $x$ 和 $y$，从 $i$ 加到 $j$ 的最小步数。其中 $i,j$ 枚举 $0\sim100$。</p>
<p>$v_{x,y,i,j}$ 表示用 $x,y$，从末位为 $i$ 加到末位为 $j$ 的最小步数，这个可以通过 $dp$ 转移。</p>
<p>最终答案为：$\sum\limits_{i&#x3D;1}^{|s|-1}v_{x,y,s_i,s_{i+1}}$。</p>
<p>时间复杂度 $\mathcal{O}(10\times10\times100\times100+10\times10\times |s|)$。</p>
<h2 id="C-You-Are-Given-a-WASD-string…"><a href="#C-You-Are-Given-a-WASD-string…" class="headerlink" title="C. You Are Given a WASD-string…"></a><a href="https://codeforces.com/contest/1202/problem/C">C. You Are Given a WASD-string…</a></h2><p>$\text{Solution:}$</p>
<p>我们不妨假定初始位置为 $(0,0)$，在全程走到的极值坐标 $mix,mxx,miy,mxy$，那么面积为 $(mxx-mix+1)*(mxy-miy+1)$。</p>
<p>因为我们只能添加最多一步，所以答案只有可能变为 $(mxx-mix)*(mxy-miy+1)$ 或 $(mxx-mix+1)*(mxy-miy)$，我们只需判断能否在 $mix&#x2F;miy$ 加 $1$ 的同时 $mxx&#x2F;mxy$ 不变或 $mxx&#x2F;mxy$ 减 $1$ 的同时 $mix&#x2F;miy$ 不变，考场时忘记同时判断另一边不变。</p>
<h2 id="D-Print-a-1337-string…"><a href="#D-Print-a-1337-string…" class="headerlink" title="D. Print a 1337-string…"></a><a href="https://codeforces.com/contest/1202/problem/D">D. Print a 1337-string…</a></h2><p>$\text{Solution:}$</p>
<p>考虑构造序列为 $133\underbrace{77\cdots7} _ {cnt_7}\underbrace{33\cdot3}_{cnt_3}7 $。</p>
<p>得到的子序列数量为 $cnt_7+1+\dfrac{(cnt_3+2)(cnt_3+1)-1}{2}$，枚举 $cnt_3$，看 $cnt_7$ 能否满足长度在 $10^5$ 即可。</p>
<h2 id="E-You-Are-Given-Some-Strings…"><a href="#E-You-Are-Given-Some-Strings…" class="headerlink" title="E. You Are Given Some Strings…"></a><a href="https://codeforces.com/contest/1202/problem/E">E. You Are Given Some Strings…</a></h2><p>$\text{Solution:}$</p>
<p>我们不妨从文本串找到一个划分点 $i$，分成 $[1,i]$ 和 $[i+1,n]$ 两段，我们可以找所有模式串匹配前半部分的后缀的数量，所有模式串匹配后半部分前缀的数量，将两部分相乘就能得到第 $i$ 位的贡献。由于后半部分等价于前半部分翻转，所以考虑前半部分。</p>
<p>将文本串存入 trie 树，求出 fail 指针，因为失配的定义就是跳到下一个与当前串有最大公共后缀的串的编号，如果 $p$ 能匹配，那么 $fail_p$ 也可以匹配，所以 $p\rightarrow fail_p$ 作为更新，最后遍历文本串，若此时遍历到了第 $i$ 位，匹配到了 $p$ 节点，则有 $f_i&#x3D;ed_p$。</p>
<p>然后将两边都算出来就解决了这道题。</p>
<p>时间复杂度 $\mathcal{O}(|T|+\sum|S|)$。</p>
<p>$\text{Code: }$<a href="https://codeforces.com/contest/1202/submission/165291628">Submission #165291628 - Codeforces</a></p>
<h2 id="F-You-Are-Given-Some-Letters…"><a href="#F-You-Are-Given-Some-Letters…" class="headerlink" title="F. You Are Given Some Letters…"></a><a href="https://codeforces.com/contest/1202/problem/F">F. You Are Given Some Letters…</a></h2><p>$\text{Solution: }$</p>
<p>不妨考虑枚举完整的循环节数 $p$,此时对应的 $k$ 的范围为 $[l,\dfrac{n}{\lfloor\dfrac{n}{l}\rfloor}]$。</p>
<p>设一个循环节 $\texttt{a}$ 的数量为 $a’$，$\texttt{b}$ 的数量为 $b’$，则有：</p>
<p>$\lfloor\dfrac{a}{p+1}\rfloor\le a’\le \lfloor\dfrac{a}{p}\rfloor - ①$</p>
<p>$\lfloor\dfrac{b}{p+1}\rfloor\le b’\le \lfloor\dfrac{b}{p}\rfloor - ②$</p>
<p>$①+②$ 得：$\lfloor\dfrac{a+b}{p+1}\rfloor\le a’+b’\le\lfloor\dfrac{a+b}{p}\rfloor$</p>
<p>而 $k&#x3D;a’+b’$，两个范围取交则得到了循环节数量为 $p$ 时 $k$ 的取值方案，计算过后，将 $l$ 设为 $\dfrac{n}{\lfloor\dfrac{n}{l}\rfloor}+1$。</p>
<p>时间复杂度 $\mathcal{O}(\sqrt{a+b})$。</p>
<h1 id="Educational-Codeforces-Round-71-text-1207"><a href="#Educational-Codeforces-Round-71-text-1207" class="headerlink" title="Educational Codeforces Round 71$\text{(1207)}$"></a>Educational Codeforces Round 71$\text{(1207)}$</h1><table>
<thead>
<tr>
<th align="center">$\text{Penalty}$</th>
<th align="center">$\texttt{A}$</th>
<th align="center">$\texttt{B}$</th>
<th align="center">$\texttt{C}$</th>
<th align="center">$\texttt{D}$</th>
<th align="center">$\texttt{E}$</th>
<th align="center">$\texttt{F}$</th>
<th align="center">$\texttt{G}$</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$251$</td>
<td align="center">$\texttt{+}$</td>
<td align="center">$\texttt{+1}$</td>
<td align="center">$\texttt{+1}$</td>
<td align="center">$\texttt{+}$</td>
<td align="center">$\texttt{+}$</td>
<td align="center">$\texttt{+1}$</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">$\text{00:03}$</td>
<td align="center">$\text{00:12}$</td>
<td align="center">$\text{00:25}$</td>
<td align="center">$\text{00:44}$</td>
<td align="center">$\text{01:01}$</td>
<td align="center">$\text{01:16}$</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">补题</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center">√</td>
</tr>
</tbody></table>
<p>比赛时间：$\text{2022&#x2F;1&#x2F;29 20:05}$</p>
<h2 id="A-There-Are-Two-Types-Of-Burgers"><a href="#A-There-Are-Two-Types-Of-Burgers" class="headerlink" title="A. There Are Two Types Of Burgers"></a><a href="https://codeforces.com/contest/1207/problem/A">A. There Are Two Types Of Burgers</a></h2><p>$\text{Solution:}$</p>
<p>看哪个贵就先做哪个，若还有剩余的面包就再做另一个。</p>
<h2 id="B-Square-Filling"><a href="#B-Square-Filling" class="headerlink" title="B. Square Filling"></a><a href="https://codeforces.com/contest/1207/problem/B">B. Square Filling</a></h2><p>$\text{Solution:}$</p>
<p>操作次数可以达到 $n^2$，故判断一下每一个小正方形是否能进行操作，最后检查操作后的矩阵是否为所求矩阵。</p>
<p>$\text{Extention:}$</p>
<p>找到一种操作次数最少的方案。</p>
<h2 id="C-Gas-Pipeline"><a href="#C-Gas-Pipeline" class="headerlink" title="C. Gas Pipeline"></a><a href="https://codeforces.com/contest/1207/problem/C">C. Gas Pipeline</a></h2><p>$\text{Solution:}$</p>
<p>定义 $dp_{i,1&#x2F;2}$ 表示当前进行到第 $i$ 个位置，且当前的高度为 $1&#x2F;2$ 的最小费用。</p>
<p>考虑通车和不通车的情况：</p>
<ul>
<li>通车：$dp_{i,2} &#x3D; dp_{i-1,2}+a+2b$；</li>
<li>不通车：$dp_{i,1}&#x3D;\min(dp_{i-1,1}+a+b,dp_{i-1,2}+2a+b)$,$dp_{i,2}&#x3D;\min(dp_{i-1,2}+a+2b,dp_{i-1,1}+2a+2b)$。</li>
</ul>
<p>注意第一个和最后一个的高度已被确定为 $1$，所以 $dp_{0,1}&#x3D;b,dp_{0,2}&#x3D;Inf$，最后答案为 $dp_{n,1}$。</p>
<h2 id="D-Number-Of-Permutations"><a href="#D-Number-Of-Permutations" class="headerlink" title="D. Number Of Permutations"></a><a href="https://codeforces.com/contest/1207/problem/D">D. Number Of Permutations</a></h2><p>$\text{Solution:}$</p>
<p>利用容斥原理，将答案转化为求总方案数减 $a$ 排好序的方案数减 $b$ 排好序的方案数加 $a,b$ 都排好序的方案数。</p>
<p>注意 $a,b$ 可能无法同时都排好序。</p>
<h2 id="E-XOR-Guessing"><a href="#E-XOR-Guessing" class="headerlink" title="E. XOR Guessing"></a><a href="https://codeforces.com/contest/1207/problem/E">E. XOR Guessing</a></h2><p>$\text{Solution:}$ </p>
<p>观察到这个数在二进制下不超过 $14$ 位，且每次询问 $100$ 个数。</p>
<p>故第一次询问，用 $100$ 个前 $7$ 位全部为 $1$ 的数，这样这个数前 $7$ 位就可以确定。</p>
<p>第二次询问，用 $100$ 个后 $7$ 位全部为 $1$ 的数，这样这个数的后 $7$ 为也可以确定。</p>
<p>最终将两次结果拼起来即可，因为 $2^7&#x3D;128&gt;100$，故一定能找到 $100$ 个前 $7$ 位相同或 $100$ 个后 $7$ 位相同的数。</p>
<h2 id="F-Remainder-Problem"><a href="#F-Remainder-Problem" class="headerlink" title="F. Remainder Problem"></a><a href="https://codeforces.com/contest/1207/problem/F">F. Remainder Problem</a></h2><p>$\text{Solution:}$</p>
<p>本题采用根号分治。</p>
<p>我们需要额外开一个数组 $sum_{i,j}$ 表示所有下标模 $i$ 余 $j$ 的数之和，但我们只需保存 $1\le i\le \sqrt{n},0\le j&lt;i$ 的情况。</p>
<ul>
<li>进行修改操作时，枚举 $1\le i \le \sqrt{n}$ 更新 $sum_{i,x\mod i}$，复杂度 $\mathcal{O}(\sqrt{n})$；</li>
<li>进行查询操作，若 $1\le x\le \sqrt{n}$，直接查 $sum$ 即可，复杂度 $\mathcal{O}(1)$，若 $x&gt;\sqrt{n}$，暴力查询即可，复杂度 $\mathcal{O}(\sqrt{n})$。</li>
</ul>
<p>总时间复杂度 $\mathcal{O}(n\sqrt{n})$，空间复杂度 $\mathcal{O}(n)$。</p>
<p><del>终于知道时限为什么给 $4$ 秒了。</del></p>
<h2 id="G-Indie-Album"><a href="#G-Indie-Album" class="headerlink" title="*G. Indie Album"></a><a href="https://codeforces.com/contest/1207/problem/G">*G. Indie Album</a></h2><p>$\text{Solution:}$</p>
<p>一道 AC 自动机的深层运用。</p>
<p>首先对于一棵字典树，求出每个节点 $i$ 的 $fail_i$，并连一条 $fail_i \rightarrow i$ 的有向边，称新建出的树为 $fail$ 树。</p>
<p>则有，字符串 $x$  在字符串 $y$ 中出现的次数为， $fail$ 树中 $x$ 的结束节点为根的子树中 $y$ 字符串的节点的数目。</p>
<p>将询问离线，在 $i$ 字符串结尾节点打入新字符串的结尾节点，然后搜索 $Trie$ 树，每到一个节点，节点权值 $+1$，碰到查询时需要查询子树和。</p>
<p>时间复杂度 $\mathcal{O}(|T|\log|T|)$。</p>
<p>$\text{Code: }$<a href="https://codeforces.com/contest/1207/submission/145308976">Submission #145308976 - Codeforces</a></p>
<h1 id="Educational-Codeforces-Round-122-text-1633"><a href="#Educational-Codeforces-Round-122-text-1633" class="headerlink" title="Educational Codeforces Round 122$\text{(1633)}$"></a>Educational Codeforces Round 122$\text{(1633)}$</h1><table>
<thead>
<tr>
<th align="center">$\text{Penalty}$</th>
<th align="center">$\texttt{A}$</th>
<th align="center">$\texttt{B}$</th>
<th align="center">$\texttt{C}$</th>
<th align="center">$\texttt{D}$</th>
<th align="center">$\texttt{E}$</th>
<th align="center">$\texttt{F}$</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$55$</td>
<td align="center">$\texttt{+}$</td>
<td align="center">$\texttt{+}$</td>
<td align="center">$\texttt{+}$</td>
<td align="center">$\texttt{+}$</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">$\text{00:02}$</td>
<td align="center">$\text{00:06}$</td>
<td align="center">$\text{00:17}$</td>
<td align="center">$\text{00:30}$</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">补题</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
</tbody></table>
<p>比赛时间： $\text{2022&#x2F;1&#x2F;31 22:35}$</p>
<h2 id="A-Div-7"><a href="#A-Div-7" class="headerlink" title="A. Div. 7"></a><a href="https://codeforces.com/contest/1633/problem/A">A. Div. 7</a></h2><p>$\text{Solution:}$</p>
<p>对于一个数 $x$，如果它能被 $7$ 整除，则不作修改直接输出，否则调整它的个位，找到一个能被 $7$ 整除的数输出。</p>
<p>因为每连续 $7$ 个数就会有一个被 $7$ 整除，所以一定会有一个数符合要求。</p>
<h2 id="B-Minority"><a href="#B-Minority" class="headerlink" title="B. Minority"></a><a href="https://codeforces.com/contest/1633/problem/B">B. Minority</a></h2><p>$\text{Solution:}$</p>
<p>不难想到将整个字符串全部选中的贡献。</p>
<p>若 $\texttt{0}$ 和 $\texttt{1}$ 的数量相等，我们只要去掉开头或结尾就取得最优答案；</p>
<p>若 $\texttt{0}$ 和 $\texttt{1}$ 的数量不等，我们全选就可以做到最优答案。</p>
<p>可以证明其它的选择一定不优于这么选择。</p>
<h2 id="C-Kill-the-Monster"><a href="#C-Kill-the-Monster" class="headerlink" title="C. Kill the Monster"></a><a href="https://codeforces.com/contest/1633/problem/C">C. Kill the Monster</a></h2><p>$\text{Solution:}$</p>
<p>硬币的数量很少，考虑枚举用来加血的硬币的数量，然后只需判断谁能赢即可。</p>
<p>时间复杂度 $\mathcal{O}(\sum k)$。</p>
<p>$\text{Extention:}$</p>
<p>$\sum k \le 10^9$</p>
<h2 id="D-Make-Them-Equal"><a href="#D-Make-Them-Equal" class="headerlink" title="D. Make Them Equal"></a><a href="https://codeforces.com/contest/1633/problem/D">D. Make Them Equal</a></h2><p>$\text{Solution:}$</p>
<p>一个最直接的想法：对于一个值 $x$，求出从 $1$ 操作到 $x$ 的最小次数 $v_x$，然后问题就变成了你有容量为 $k$ 的背包，和 $n$ 个体积 $v_i$，价值 $c_i$ 的物品，求最大的价值。</p>
<p>这不就是一个0-1背包的事。</p>
<p>但看了看范围 $n\le10^3,k\le10^6$，0-1背包复杂度是 $\mathcal{O}(nk)$，不可过啊。</p>
<p>但当你求出 $v$ 后发现：最大的 $v_x$ 竟然不超过 $12$，也就是操作数最多不会超过 $12n$。</p>
<p>那么我们可以先求一个 $sumv$，然后与 $k$ 取 $\min$，复杂度就降到了 $\mathcal{O}(12n^2)$。</p>
<p>$\text{Code: }$<a href="https://codeforces.com/contest/1633/submission/144900381">Submission #144900381 - Codeforces</a></p>
<h2 id="E-Spanning-Tree-Queries"><a href="#E-Spanning-Tree-Queries" class="headerlink" title="E. Spanning Tree Queries"></a><a href="https://codeforces.com/contest/1633/problem/E">E. Spanning Tree Queries</a></h2><p>$\text{Solution:}$</p>
<p>暴力做法是：对于一个询问，把边权都跑出来，然后做一次最小生成树，时间复杂度 $\mathcal{O}(qm\log m)$。</p>
<p>但细想之后，发现我们并不用对于每一次询问都跑一次最小生成树，如果边的大小关系没有因为这次询问而变化，那么选出的最小生成树边集还会由上一次的边集组成。</p>
<p>那么我们如何得知边的大小关系发生了改变呢？</p>
<p>比如，对于两条边 $x$ 和 $y$，它们的边权为 $w_x$ 和 $w_y$ 且 $w_x&lt;w_y$，设当前询问的值为 $v$。</p>
<ul>
<li><p>当 $v&lt; w_x$ 时，$w_x-v&lt;w_y-v$；</p>
</li>
<li><p>当 $w_x\le v&lt; \lfloor \dfrac{w_x+w_y}{2} \rfloor+1$ 时，$v-w_x \le w_y-v$；</p>
</li>
<li><p>当 $\lfloor \dfrac{w_x+w_y}{2}\rfloor +1\le v&lt; w_y$ 时，$v-w_x&gt;w_y-v$；</p>
</li>
<li><p>当 $v\ge w_y$ 时， $v-w_x&lt;v-w_y$。</p>
<p>所以可得，对于每两条边，共有 $4$ 种情况，所以总共的情况也只有 $m^2$ 量级，可以接受。</p>
<p>那么我们只需将原边权与 $\lfloor \dfrac{w_x+w_y}{2}\rfloor+1$ 放入一个数组并排序，再将所有询问排序。</p>
<p>当询问的值又超过了一条新边的边权，代表有边的大小关系改变，我们需要重求一遍最小生成树；若这一次询问的并没有使边的大小关系发生改变，我们仍然可以用上一次最小生成树的结果，再加上这次询问对绝对值的贡献。</p>
<p>时间复杂度 $\mathcal{O}(q\log q+m^3\log m)$。</p>
<p>但如果把优先预处理出所有最小生成树的情况，询问的时候二分出对应的情况，复杂度会变为 $\mathcal{O}(q\log m^2+m^3\log m)$，稍有优化。</p>
<p>$\text{Code: }$<a href="https://codeforces.com/contest/1633/submission/144900383">Submission #144900383 - Codeforces</a></p>
</li>
</ul>
<h2 id="F-Perfect-Matching"><a href="#F-Perfect-Matching" class="headerlink" title="*F. Perfect Matching"></a><a href="https://codeforces.com/contest/1633/problem/F">*F. Perfect Matching</a></h2><p>$\text{Solution:}$</p>
<p>依题意，分析满足完美匹配的条件。</p>
<p>我们有一种贪心的策略来检查是否可以完美匹配：定义一次匹配操作为选择当前最深的激活节点，与它的父亲之间连边，并删去这两个点，重复一次匹配操作，直到激活节点全部被清空即为完美匹配。时间复杂度 $\mathcal{O}(n)$。</p>
<p>观察到 $1$ 操作次数很多，而真正要求输出方案的 $2$ 操作数目很少，考虑能否快速有效地判断当前情形是否能完美匹配。</p>
<p>因为每次激活的节点必须与之前激活的节点连通，那么每次激活都会仅有一个包含全部激活节点的连通块，且连通块也是树，暂时称为激活树，考虑激活树有什么条件才能满足完美匹配。</p>
<p>我们先令一个节点，它的子树（包括自己）的总共的激活节点的数目为奇数，称之为奇数节点，反之称为偶数节点。</p>
<p>如果这棵激活树能够完美匹配，对于每一次匹配操作，取出的子节点和父节点当且仅当子节点是父节点唯一的儿子。</p>
<p>若此子节点不是父节点唯一的儿子，由匹配操作定义，树的结构如图所示：</p>
<img src="https://s2.loli.net/2022/02/02/BjsxLPJhRmHlCYi.png" alt="CF1633F-1.png" style="zoom:50%;" />

<p>删除 $u$ 和 $v_1$ 后，$v_2$ 与 $v_3$ 必然无法形成完美匹配，与假设矛盾。</p>
<p>那么每一次匹配，一定是一个奇数节点和一个偶数节点，且在删除后，其它节点的子树（包括自己）的总共的激活结点数目要么减 $2$，要么无变化。则其余的奇偶节点仍无变化。</p>
<p>故可推出一个重要结论：若激活树能完美匹配当且仅当奇数节点数目等于偶数节点数目。</p>
<p>那么现在问题就转化为了：</p>
<ul>
<li>添加一个点，翻转它的父亲到 $1$ 节点这条路径上所有节点的状态；</li>
<li>查询一个点到 $1$ 节点这条路径上奇数节点的数目。</li>
</ul>
<p>用树剖解决即可。</p>
<p>在进行 $2$ 操作时，只需 $dfs$ 一遍，求子树 $sz$，判断这个点是否为奇数节点，如果是就将此节点和其父亲连接。</p>
<p>时间复杂度 $\mathcal{O}(n\log^2 n)$。</p>
<p>$\text{Code: }$<a href="https://codeforces.com/contest/1633/submission/144900385">Submission #144900385 - Codeforces</a></p>
<h1 id="CodeTON-Round-1-text-1656"><a href="#CodeTON-Round-1-text-1656" class="headerlink" title="CodeTON Round 1$\text{(1656)}$"></a>CodeTON Round 1$\text{(1656)}$</h1><table>
<thead>
<tr>
<th align="center">$\text{Score}$</th>
<th align="center">$\texttt{A}$</th>
<th align="center">$\texttt{B}$</th>
<th align="center">$\texttt{C}$</th>
<th align="center">$\texttt{D}$</th>
<th align="center">$\texttt{E}$</th>
<th align="center">$\texttt{F}$</th>
<th align="center">$\texttt{G}$</th>
<th align="center">$\texttt{H}$</th>
<th align="center">$\texttt{I}$</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$6098$</td>
<td align="center">$\texttt{496}$</td>
<td align="center">$\texttt{976}$</td>
<td align="center">$\texttt{1404}$</td>
<td align="center">$\texttt{1696}$</td>
<td align="center">$\texttt{1530}$</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">$\text{00:04}$</td>
<td align="center">$\text{00:10}$</td>
<td align="center">$\text{00:16}$</td>
<td align="center">$\text{00:38}$</td>
<td align="center">$\text{01:37}$</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">补题</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center">√</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">.</td>
</tr>
</tbody></table>
<p>比赛时间： $\text{2022&#x2F;7&#x2F;28 08:30}$</p>
<p>为即将到来的 CodeTON Round 2 练习一下。</p>
<h2 id="A-Good-Pairs"><a href="#A-Good-Pairs" class="headerlink" title="A. Good Pairs"></a><a href="https://codeforces.com/contest/1656/problem/A">A. Good Pairs</a></h2><p>$\text{Solution:}$</p>
<p>考虑 $|a_i-a_k|+|a_k-a_j|&#x3D;|a_i-a_j|$ 什么时候成立，即找到 $a_i\le a_k\le a_j$ 的三元组，由于题目保证有解，所以取最小值和最大值就行。</p>
<h2 id="B-Subtract-Operation"><a href="#B-Subtract-Operation" class="headerlink" title="B. Subtract Operation"></a><a href="https://codeforces.com/contest/1656/problem/B">B. Subtract Operation</a></h2><p>$\text{Solution:}$</p>
<p>考虑 $n$ 个数为 $a_1,a_2\cdots,a_n$。第一次我们消去 $a_p$，则序列变为 $a_1-a_p,a_2-a_p,\cdots,a_n-a_p$。</p>
<p>再次消掉 $a_q$，则原序列变为 $(a_1-a_p)-(a_q-a_p),(a_2-a_p)-(a_q-a_p),\cdots,(a_n-a_p)-(a_q-a_p)$ 也就是 $a_1-a_q,a_2-a_q,\cdots,a_n-a_q$，这样我们可以发现，在第 $1\sim (n-2)$ 次选择的数全部被抵消，最后剩下一个 $a_x-a_y$ 的形式，直接用 map 维护一下有没有相差为 $k$ 的数。</p>
<h2 id="C-Make-Equal-With-Mod"><a href="#C-Make-Equal-With-Mod" class="headerlink" title="C. Make Equal With Mod"></a><a href="https://codeforces.com/contest/1656/problem/C">C. Make Equal With Mod</a></h2><p>$\text{Solution:}$</p>
<p>如果序列中没有 $1$，从最大数开始，一个一个模成 $0$，没有任何问题。</p>
<p>如果序列中存在 $1$，那么就需要将所有数都变成 $1$，对于最大数，我们要模最大数减 $1$，所以我们要判断是否有大小相差为 $1$ 的数，如果没有，即能满足要求。</p>
<h2 id="D-K-good"><a href="#D-K-good" class="headerlink" title="D. K-good"></a><a href="https://codeforces.com/contest/1656/problem/D">D. K-good</a></h2><p>$\text{Solution:}$</p>
<p>如果 $n$ 是 $k$-good 数，当且仅当：</p>
<p>$n&#x3D;pk+\dfrac{k(k-1)}{2},p\in \mathbb{N}$</p>
<p>考虑进一步转化：</p>
<p>$\Rightarrow 2n&#x3D;2pk+k(k-1)$</p>
<p>$\Rightarrow 2n&#x3D;k(2p+k-1)$</p>
<p>考虑 $k$ 和 $2p+k-1$ 的奇偶性不同，则一定是 $2$ 的正整数次幂和一个奇数相乘的组合，又因为 $k&lt;2p+k-1$，取 $k&#x3D;\min(2^m,\dfrac{2n}{2^m})$，如果 $k&#x3D;1$ 则输出 $-1$。</p>
<h2 id="E-Equal-Tree-Sums"><a href="#E-Equal-Tree-Sums" class="headerlink" title="E. Equal Tree Sums"></a><a href="https://codeforces.com/contest/1656/problem/E">E. Equal Tree Sums</a></h2><p>$\text{Solution:}$</p>
<p>记 $u$ 的子节点个数为 $k$，分别为 $v_1,v_2,\cdots,v_k$，$sum_u$ 表示以 $u$ 为根的子树权值和，以 $1$ 为根节点时，以 $u$ 为划分点，有如下的式子：</p>
<p>$sum_{v_1}&#x3D;sum_{v_2}&#x3D;\cdots&#x3D;sum_{v_k}&#x3D;sum_1-sum_u$</p>
<p>$sum_u&#x3D;a_u+\sum\limits_{i&#x3D;1}^{k}sum_{v_i}$</p>
<p>则 $a_u&#x3D;sum_u-\sum\limits_{i&#x3D;1}^ksum_{v_i}$</p>
<p>$&#x3D;sum_u-k(sum_1-sum_u)$</p>
<p>$&#x3D;(k+1)sum_u-ksum_1$</p>
<p>我们不妨假设树的总权值和为 $0$，那么就有：</p>
<p>$a_u&#x3D;(k+1)sum_u$</p>
<p>$sum_{v_1}&#x3D;sum_{v_2}&#x3D;\cdots&#x3D;sum_{v_k}&#x3D;-sum_u$</p>
<p>这样 $sum_u&#x3D;(k+1)sum_u-ksum_u&#x3D;sum_u$，刚好满足。</p>
<p>具体实现的话，可以使 $sum_u&#x3D;(-1)^{dep_u}$，$sum_1&#x3D;0$，就能构造出合法权值。</p>
<h2 id="F-Parametric-MST"><a href="#F-Parametric-MST" class="headerlink" title="F. Parametric MST"></a><a href="https://codeforces.com/contest/1656/problem/F">F. Parametric MST</a></h2><p>$\text{Solution:}$</p>
<p>不妨先将 $a$ 按升序排序，考虑设 $b_u(t)&#x3D;a_u+t$。</p>
<p>那么 $w_{i,j}(t)&#x3D;(a_i+t)(a_j+t)-t^2&#x3D;b_i(t)b_j(t)-t^2$，也就是当 $i,t$ 一定时，$w_{i,j}(t)$ 有最小值：</p>
<ul>
<li>当 $b_i(t)&lt;0$ 时，取 $b(t)$ 的最大值，即 $j&#x3D;n$；</li>
<li>当 $b_i(t)&gt;0$ 时，取 $b(t)$ 的最小值，即 $j&#x3D;1$。</li>
</ul>
<p>那么我们对于一个 $t$，就有如下的连边方式：</p>
<ol>
<li>如果 $b_i(t)&lt;0,i\neq n$，$i$ 向 $n$ 连边。</li>
<li>如果 $b_i(t)&gt;0,i\neq 1$，$i$ 向 $1$ 连边。</li>
<li>如果 $(1,n)$ 间重边，删去一条。</li>
</ol>
<p>这样连边构成了一棵树，且是 $K_n(t)$ 的最小生成树。</p>
<p>我们不妨考虑当 $t$ 取 $(-\infty,-a_n)$ 与 $(-a_1,+\infty)$ 时的函数。</p>
<p>当 $t\in (-\infty,-a_n]$ 时，$b_1(t)\le b_2(t)\le \cdots\le b_n(t)&lt; 0$，那么最小生成树为 $1\sim n-1$ 向 $n$ 连边。</p>
<p>$K_n(t)&#x3D;a_n(sum-a_n)+t\cdot((n-1)a_n+(sum-a_1))$</p>
<p>$&#x3D;((n-2)a_n+sum)t+a_n(sum-a_n)$</p>
<p>这是一个一次函数的形式，当斜率 $(n-2)a_n+sum&lt;0$ 时， $\lim\limits_{t\to -\infty}K_n(t)&#x3D;+\infty$，无最大值。</p>
<p>当 $t\in[-a_1,+\infty]$ 时，同理，得斜率 $(n-2)a_1+sum&gt;0$ 时，无最大值。</p>
<p>接下来考虑 $[-a_n,-a_1]$ 的情况。</p>
<p>一个结论是 $t$ 需要取在 $-a_i$ 上，若在两个相反数之间，因为一段之间是一次函数，必定在端点上取最小值。</p>
<p>那么我们考虑 $t$ 从 $-a_1$ 开始 $-a_i\rightarrow -a_{i+1}$，函数的变化。</p>
<p>考虑 $K_n(-a_1)&#x3D;((n-2)a_1+sum)(-a_1)+a_1(sum-a_1)$</p>
<p>由于整个函数是连续的，则 $K_n(-a_2)&#x3D;((n-2)a_1+sum)(-a_2)+a_1(sum-a_1)$，即斜率暂时不变。</p>
<p>那么函数变化为：$-((n-2)a_1+sum)a_1\rightarrow-((n-2)a_1+sum)a_2$，即当前斜率 $k*(-a_2-(-a_1))$。</p>
<p>当转成新一部分的斜率时，斜率从 $((n-2)a_1+sum)$ 变为 $((n-2)a_1+(sum-a_1-a_2)+a_n-a_2)&#x3D;((n-3)a_1+sum+a_n)$，改变为 $-a_1+a_n$。</p>
<p>这样我们就解决了这道题。</p>
<p>时间复杂度上界为排序的 $\mathcal{O}(n\log n)$。</p>
<p>$\text{Code: }$	<a href="https://codeforces.com/contest/1656/submission/165986233">Submission #165986233 - Codeforces</a></p>
<h1 id="Codeforces-Global-Round-21-text-1696"><a href="#Codeforces-Global-Round-21-text-1696" class="headerlink" title="Codeforces Global Round 21$\text{(1696)}$"></a>Codeforces Global Round 21$\text{(1696)}$</h1><table>
<thead>
<tr>
<th align="center">$\text{Score}$</th>
<th align="center">$\texttt{A}$</th>
<th align="center">$\texttt{B}$</th>
<th align="center">$\texttt{C}$</th>
<th align="center">$\texttt{D}$</th>
<th align="center">$\texttt{E}$</th>
<th align="center">$\texttt{F}$</th>
<th align="center">$\texttt{G}$</th>
<th align="center">$\texttt{H}$</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$4040$</td>
<td align="center">$\texttt{492}$</td>
<td align="center">$\texttt{964}$</td>
<td align="center">$\texttt{1216}$</td>
<td align="center">$\texttt{1368}$</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">$\text{00:04}$</td>
<td align="center">$\text{00:09}$</td>
<td align="center">$\text{00:39}$</td>
<td align="center">$\text{01:19}$</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">补题</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center">√</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">.</td>
</tr>
</tbody></table>
<p>比赛时间：$\text{2022&#x2F;7&#x2F;30 08:30}$</p>
<h2 id="A-NIT-orz"><a href="#A-NIT-orz" class="headerlink" title="A. NIT orz!"></a><a href="https://codeforces.com/contest/1696/problem/A">A. NIT orz!</a></h2><p>$\text{Solution:}$</p>
<p>因为 $z$ 只能被进行<strong>与</strong>操作，也就是 $z$ 在二进制下 $1$ 的个数越来越少，所以我们不如用最开始的 $z$ 去和 $a$ 中的数进行<strong>或</strong>操作求得最大值。</p>
<h2 id="B-NIT-Destroys-the-Universe"><a href="#B-NIT-Destroys-the-Universe" class="headerlink" title="B. NIT Destroys the Universe"></a><a href="https://codeforces.com/contest/1696/problem/B">B. NIT Destroys the Universe</a></h2><p>$\text{Solution:}$</p>
<p>首先，进行两次 $l&#x3D;1,r&#x3D;n$ 的操作就能使 $a_i&#x3D;0$，所以答案上限是 $2$。</p>
<p>如果序列中只有 $1$ 段连续的不为 $0$ 的数，那么答案为 $1$，如果全 $0$ 答案是 $0$。</p>
<h2 id="C-Fishingprince-Plays-With-Array"><a href="#C-Fishingprince-Plays-With-Array" class="headerlink" title="C. Fishingprince Plays With Array"></a><a href="https://codeforces.com/contest/1696/problem/C">C. Fishingprince Plays With Array</a></h2><p>$\text{Solution:}$</p>
<p>考虑两种操作是<strong>互逆的</strong>，也就是如果我们把某个数分开，可以随时合回来。</p>
<p>那么可以先将 $a$ 序列和 $b$ 序列能拆分的全部拆分，即 $qa_i$ 和 $ta_i$ 表示 $a_i$ 能拆成的最小数和拆出的个数，$qb_i$ 和 $tb_i$ 表示 $b_i$ 能拆成的最小数和拆出的个数。</p>
<p>考虑只有一段连续相同 $qa$ 和 $qb$ 才能合并，计算 $\sum ta$，判断 $qb$ 是否等于 $qa$ 且 $\sum tb$ 是否等于 $\sum ta$，不断用指针向前移动，最后两串全部匹配成功就输出 <code>Yes</code>。</p>
<h2 id="D-Permutation-Graph"><a href="#D-Permutation-Graph" class="headerlink" title="D. Permutation Graph"></a><a href="https://codeforces.com/contest/1696/problem/D">D. Permutation Graph</a></h2><p>$\text{Solution:}$</p>
<p>我们先得到整个数组 $a$ 的最大值编号为 $id$，不难发现 $[1,id-1]$ 无法向 $[id+1,n]$ 连边，那么我们就必须先想办法从 $[1,id-1]$ 跳到 $id$ 再去跳到 $[id+1,n]$。</p>
<p>接下来去考虑 $[1,id-1]$ 中的最小值为 $p$。首先 $[1,p-1]$ 肯定可以走到 $p$，而 $p$ 肯定能跳到 $id$，所以我们就不必去管 $[p+1,id-1]$，因为答案不优。这样我们就递归到了一个更小的区间。</p>
<p>$[id+1,n]$ 的考虑也是同理，找到最小值后，但这次我们只需求靠右的区间即可。</p>
<p>本题中需要注意两个点：</p>
<ul>
<li>如果当前求的区间最大值，接下来递归时就有改求区间最小值，然后再次递归再求区间最大值，即每次最大最小转换。</li>
<li>如果当前求的最小值就在 $1$ 或 $n$，则可以省去这一步。</li>
</ul>
<p>具体维护上，带一个 log 也可以，复杂度 $\mathcal{O}(n\log n)$。</p>
<h2 id="E-Placing-Jinas"><a href="#E-Placing-Jinas" class="headerlink" title="E. Placing Jinas"></a><a href="https://codeforces.com/contest/1696/problem/E">E. Placing Jinas</a></h2><p>$\text{Solution:}$</p>
<p>首先，不难发现，本题并不是最优解问题，因为移动的步数确定，我们只要考虑移动需要多少步。</p>
<p>我们考虑 $f(x,y)$ 为点 $(x,y)$ 的操作次数，那么答案为 $\sum\limits_{i&#x3D;0}^n\sum\limits_{j&#x3D;0}^{a_i}f(i,j)$。</p>
<p>不难发现 $f(x,0)&#x3D;1,f(0,y)&#x3D;1,f(x,y)&#x3D;f(x-1,y)+f(x,y-1)$。即 $f(x,y)&#x3D;{x+y\choose x}$ 。（斜着的杨辉三角）</p>
<p>算到这是 $O(n^2)$ 的，但是推过结论的应该已经都会了，这里再来推一下：</p>
<p>考虑第 $i$ 行的贡献：</p>
<p>$\sum\limits_{j&#x3D;0}^{a_i-1}f(i,j)&#x3D;\sum\limits_{j&#x3D;0}^{a_i-1}{i+j\choose i}&#x3D;\sum\limits_{j&#x3D;0}^{a_i-1}\dfrac{A_{i+j}^i}{A_i^i}&#x3D;\dfrac{\sum\limits_{j&#x3D;0}^{a_i-1} A_{i+j}^i}{A_i^i}$</p>
<p>而 $\sum\limits_{j&#x3D;0}^{a_i-1} A_{i+j}^i$ 是整数裂项的形式，化简后为 $\dfrac{\prod\limits_{j&#x3D;a_i-1}^{a_i+i}j}{i+1}&#x3D;\dfrac{A_{a_i+i}^{a_i+i}}{(i+1)A_{a_i-1}^{a_i-1}}$</p>
<p>最终 $\sum\limits_{j&#x3D;0}^{a_i}f(i,j)&#x3D;\dfrac{A_{a_i+i}^{a_i+i}}{(i+1)A_{a_i-1}^{a_i-1}A_i^i}&#x3D;\dfrac{A_{a_i+i}^{a_i+i}}{A_{a_i-1}^{a_i-1}A_{i+1}^{i+1}}&#x3D;{a_i+i\choose a_i-1}$。</p>
<p>于是预处理阶乘和逆元，复杂度为 $\mathcal{O}(n)$。</p>
<h1 id="CodeTON-Round-2-text-1704"><a href="#CodeTON-Round-2-text-1704" class="headerlink" title="CodeTON Round 2$\text{(1704)}$"></a>CodeTON Round 2$\text{(1704)}$</h1><table>
<thead>
<tr>
<th align="center">$\text{Score}$</th>
<th align="center">$\texttt{A}$</th>
<th align="center">$\texttt{B}$</th>
<th align="center">$\texttt{C}$</th>
<th align="center">$\texttt{D}$</th>
<th align="center">$\texttt{E}$</th>
<th align="center">$\texttt{F}$</th>
<th align="center">$\texttt{G}$</th>
<th align="center">$\texttt{H1}$</th>
<th align="center">$\texttt{H2}$</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$3406$</td>
<td align="center">$\texttt{489}$</td>
<td align="center">$\texttt{719}$</td>
<td align="center">$\texttt{1130}$</td>
<td align="center">$\texttt{1068}$</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">$\text{00:07}$</td>
<td align="center">$\text{00:13}$</td>
<td align="center">$\text{00:30}$</td>
<td align="center">$\text{01:44}$</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">补题</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">.</td>
</tr>
</tbody></table>
<p>比赛时间：$\text{2022&#x2F;7&#x2F;31 22:05}$</p>
<p>打的仍然没有达到我的预期。</p>
<p>$\texttt{AB}$ 做的较慢，但靠 $\texttt{C}$ 挽救了回来，而 $\texttt{D}$ 挂了两发还是很晚才过，况且写法复杂，结论靠猜，算是实力缺陷的体现。</p>
<p>不过说实话，以现在的水平，真的无法快速想到 $\texttt{D}$ 的性质，希望能有四十分钟开出前 $4$ 题的时候吧。</p>
<h2 id="A-Two-0-1-Sequences"><a href="#A-Two-0-1-Sequences" class="headerlink" title="A. Two 0-1 Sequences"></a><a href="https://codeforces.com/contest/1704/problem/A">A. Two 0-1 Sequences</a></h2><p>$\text{Solution:}$</p>
<p>每次操作只能改 $a$ 串的前两位，所以 $a$ 的后 $m-1$ 位不能动，这样只需匹配 $a$ 和 $b$ 的后 $m-1$ 位，再看 $a$ 的 $1\sim n-m+1$ 位有没有 $b_1$。</p>
<h2 id="B-Luke-is-a-Foodie"><a href="#B-Luke-is-a-Foodie" class="headerlink" title="B. Luke is a Foodie"></a><a href="https://codeforces.com/contest/1704/problem/B">B. Luke is a Foodie</a></h2><p>$\text{Solution:}$</p>
<p>考虑如果一段连续的区间的最大值和最小值相差超过 $2x$，那么一定需要更换。那么我们只需模拟一下，看看哪些地方需要更换即可。</p>
<h2 id="C-Virus"><a href="#C-Virus" class="headerlink" title="C. Virus"></a><a href="https://codeforces.com/contest/1704/problem/C">C. Virus</a></h2><p>$\text{Solution:}$</p>
<p>用最开始被感染的房屋将所有房子划分为若干个小段，我们可以用两天把一段区间的边界给保护，这样中间全都不用保护，现在考虑进行这个操作的顺序。</p>
<p>不难想到应该从大区间往小区间封闭，因为每天每段区间会有两个房子被感染，而如果一段区间被感染完就不会再被感染，所以先去保护大区间，小区间可能在中途被感染完，损耗的房屋更少。</p>
<h2 id="D-Magical-Array"><a href="#D-Magical-Array" class="headerlink" title="D. Magical Array"></a><a href="https://codeforces.com/contest/1704/problem/D">D. Magical Array</a></h2><p>$\text{Solution:}$</p>
<p>考场上想的做法是将 $c$ 数组用反操作处理，选择最靠两段的数，把它往中间移动，最后合并的不能合为止。然后发现有 $m-1$ 个序列是一样的，找到特殊序列后，通过观察样例发现 $2$ 操作次数，就是合并后特殊序列进行多少次单独的移动得到非特殊序列，然后就通过了，做法猜的东西很多。</p>
<p>题解是这样的：</p>
<p>设每一位的权值为 $a_i\times i$。则非特殊序列的其中四个位置 $(i,i+1,j-1,j)$ 的权值为 $a_i\times i+a_{i+1}\times(i+1)+a_{j-1}\times(j-1)+a_j\times j$，进行 $(i+1,j-1)$ 操作 $1$ 后，仍然考虑这 $4$ 个位置的权值和，其它位置的权值不变。</p>
<p>$(a_i+1)\times i+(a_{i+1}-1)\times(i+1)+(a_{j-1}-1)\times(j-1)+(a_j+1)\times j$</p>
<p>$&#x3D;a_i\times i+a_{i+1}\times(i+1)+a_{j-1}\times(j-1)+a_j\times j+i-(i+1)-(j-1)+j$</p>
<p>$&#x3D;a_i\times i+a_{i+1}\times(i+1)+a_{j-1}\times(j-1)+a_j\times j$</p>
<p>所以在操作后总权值不变，这样求出 $\sum a_i\times i$ 就能找出特殊数组。</p>
<p>考虑进行一次操作 $2$ 权值的变化情况，考虑 $(i,i+1,j-2,j)$。</p>
<p>$(a_i+1)\times i+(a_{i+1}-1)\times(i+1)+(a_{j-2}-1)\times(j-2)+(a_j+1)\times j$</p>
<p>$&#x3D;a_i\times i+a_{i+1}\times(i+1)+a_{j-2}\times(j-2)+a_j\times j+i-(i+1)-(j-2)+j$</p>
<p>$&#x3D;a_i\times i+a_{i+1}\times(i+1)+a_{j-2}\times(j-2)+a_j\times j+1$</p>
<p>每次 $2$ 操作后，数组的总权值和加 $1$，这样我们用非特殊序列的权值和减特殊序列的权值和，即能得到 $2$ 操作次数。</p>
<p>这个方法完美的避开了具体的构造方案，对序列定义一个权值，使操作有了固定的性质，成为了一个充要条件。</p>
<p>时间复杂度 $\mathcal{O}(n)$。</p>
<h2 id="E-Count-Seconds"><a href="#E-Count-Seconds" class="headerlink" title="E. Count Seconds"></a><a href="https://codeforces.com/contest/1704/problem/E">E. Count Seconds</a></h2><p>$\text{Solution:}$</p>
<p>首先<strong>只有一个点没有出边</strong>，称其为汇点。</p>
<p>我们考虑先模拟前 $n$ 轮，目的是如果经过 $n$ 轮后，$a_u$ 仍然有值，那么 $u$ 到汇点整条上路径的点值都会大于 $0$，保证每个不为 $0$ 的位置能直接贡献到汇点。</p>
<p>然后还剩下的每一点权值都能多撑一个单位的时间，跑个拓扑排序计算总和即可，别忘了加上开始模拟的时间。</p>
<p>如果模拟不到 $n$ 轮就结束了，记得特判。</p>
<p>时间复杂度 $\mathcal{O}(n^2)$。</p>
<h2 id="F-Colouring-Game"><a href="#F-Colouring-Game" class="headerlink" title="F. Colouring Game"></a><a href="https://codeforces.com/contest/1704/problem/F">F. Colouring Game</a></h2><p>$\text{Solution:}$</p>
<p>一次操作最少可改变自己的 $1$ 个字符，如果 $\texttt{R}$ 和 $\texttt{B}$ 的个数不同，那么一定个数多的赢。</p>
<p>当 $\texttt{R}$ 和 $\texttt{B}$ 的个数相同时，记一段 $\texttt{RBRB}\cdots$  的长度为 $l$。那么每次每个人都会选择一段 $\texttt{RB}$ 或 $\texttt{BR}$ 消掉，两人可以同时操作且操作后局面相同，是公平博弈论，可以求 $SG$ 函数。</p>
<p>$SG_l&#x3D;\text{mex}(SG_{i-1}\oplus SG_{l-i-1})$</p>
<p>求出 $SG$ 后发现，当 $l\ge 69$ 时，有长度为 $34$ 的循环节，所以只用打表前 $34\times3&#x3D;102$ 位 $SG$ 就足够。</p>
<h1 id="Codeforces-Round-808-text-1707"><a href="#Codeforces-Round-808-text-1707" class="headerlink" title="Codeforces Round #808$\text{(1707)}$"></a>Codeforces Round #808$\text{(1707)}$</h1><table>
<thead>
<tr>
<th align="center">$\text{Score}$</th>
<th align="center">$\texttt{2A}$</th>
<th align="center">$\texttt{2B}$</th>
<th align="center">$\texttt{2C&#x2F;1A}$</th>
<th align="center">$\texttt{2D&#x2F;1B}$</th>
<th align="center">$\texttt{2E&#x2F;1C}$</th>
<th align="center">$\texttt{2F&#x2F;1D}$</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$1452$</td>
<td align="center">$\texttt{492}$</td>
<td align="center">$\texttt{960}$</td>
<td align="center">$\texttt{-3}$</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">$\text{00:04}$</td>
<td align="center">$\text{00:10}$</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">补题</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">.</td>
</tr>
</tbody></table>
<p>比赛时间：$\text{2022&#x2F;7&#x2F;16 22:35}$</p>
<h2 id="2A-Difference-Operations"><a href="#2A-Difference-Operations" class="headerlink" title="2A. Difference Operations"></a><a href="https://codeforces.com/contest/1708/problem/A">2A. Difference Operations</a></h2><p>$\text{Solution:}$</p>
<p>不妨从 $a_2$ 开始考虑，因为 $a_2$ 进行的操作只有减去 $a_1$，所以 $a_2$ 必须是 $a_1$ 的倍数，然后我们就可以将 $a_2$ 减去若干个 $a_1$ 后变成 $a_1$。</p>
<p>考虑 $a_3$ 及以后的数也是如此，所以序列满足条件当且仅当 $a_i$ 都是 $a_1$ 的倍数，其中 $2\le i\le n$。</p>
<h2 id="2B-Difference-of-GCDs"><a href="#2B-Difference-of-GCDs" class="headerlink" title="2B. Difference of GCDs"></a><a href="https://codeforces.com/contest/1708/problem/B">2B. Difference of GCDs</a></h2><p>$\text{Solution:}$</p>
<p>显然 $\gcd(i,a_i) \le \min(i,a_i)\le i$，又因为题目要求 $\forall 1\le i\le n$，$\gcd(i, a_i)$ 互不相等，所以 $\gcd(i,a_i)&#x3D;i$。</p>
<p>那么只需在 $l\sim r$ 看有没有 $i$ 的倍数即可，否则输出 <code>-1</code>。</p>
<h2 id="2C-x2F-1A-Doremy’s-IQ"><a href="#2C-x2F-1A-Doremy’s-IQ" class="headerlink" title="2C&#x2F;1A. Doremy’s IQ"></a><a href="https://codeforces.com/contest/1707/problem/A">2C&#x2F;1A. Doremy’s IQ</a></h2><p>$\text{Solution:}$</p>
<p>场上被骗的一道题目，如果正向考虑，肯定是希望做减智商的测试越晚越好，但不容易实现。</p>
<p>那就反向考虑，设初始智商为 $0$，倒向做测试，遇到做不动的智商 $+1$，智商最多加到 $q$，这样如果我们遇到一个做不动的测试，但智商还没加到 $q$，那么我们一定要去做，因为智商越高，后面更有可能完成更多测试。</p>
<p>时间复杂度 $\mathcal{O}(n)$。</p>
<h2 id="2D-x2F-1B-Difference-Array"><a href="#2D-x2F-1B-Difference-Array" class="headerlink" title="2D&#x2F;1B. Difference Array"></a><a href="https://codeforces.com/contest/1707/problem/B">2D&#x2F;1B. Difference Array</a></h2><p>$\text{Solution:}$</p>
<p>不妨来证明暴力做法复杂度的正确性。</p>
<p>我们设每次操作后并忽略 $0$ 的 $a$ 数组总和为 $S$，$S&#x3D;\sum\limits_{i&#x3D;1}^ma_i$，且根据题意有 $\forall1&lt;i\le m$，$a_{i+1}-a_{i}&gt;0$。</p>
<p>$S&#x3D;\sum\limits_{i&#x3D;1}^ma_i\ge m-1+a_m$</p>
<p>那么差分一次后的数组变为 $a_2-a_1,a_3-a_2,\cdots,a_m-a_{m-1}$，现在的总和 $S’&#x3D;a_m-a_1\le a_m$。</p>
<p>原本大于等于 $a_m+m-1$，现在小于等于 $a_m$，说明每次至少减少了 $m-1$，在第一次差分后，数组总和不超过 $a_n$，那么最坏情况的复杂度就为 $\mathcal{O}(A\log A)$，其中 $A&#x3D;\max(n,a_n)$。</p>
<h2 id="2E-x2F-1C-DFS-Trees"><a href="#2E-x2F-1C-DFS-Trees" class="headerlink" title="2E&#x2F;1C. DFS Trees"></a><a href="https://codeforces.com/contest/1707/problem/C">2E&#x2F;1C. DFS Trees</a></h2><p>$\text{Solution:}$</p>
<p>这题有个结论：如果 $\text{findMST(u)}$ 得到的生成树为最小生成树，那么图中没有交叉边。</p>
<p>关于交叉边的定义，我们可以用一个例子理解。</p>
<img src="https://s2.loli.net/2022/07/18/doOfyY3MSw2NZqb.jpg" alt="CF1707C-1.jpg" style="zoom:50%;" />

<p>白边为生成树边，则红边为交叉边，而蓝边不是交叉边，即交叉边的最近公共祖先不为边的端点。</p>
<p>至于上面的结论为什么成立，现在还不太知道，先硬记一下吧。</p>
<p>那么对于每条非树边，如果能作为以 $u$ 为根的生成树的交叉边，那么 $\text{findMST(u)}$ 就得不到最小生成树。</p>
<p>我们以 $1$ 为根节点，跑出最小生成树，对于一条非树边 $(u,v)$：</p>
<ul>
<li>$lca&#x3D;u$ 或 $lca&#x3D;v$，那么以 $u,v$ 这条路径中间的点（不包括 $u,v$）为根，$(u,v)$ 就会作为一条交叉边，这些点都得不到最小生成树。</li>
<li>否则，那么从 $1$ 到 $u$ 的父节点和 $1$ 到 $v$ 的父节点的路径就全部得不到最小生成树。</li>
</ul>
<p>最后统计答案即可，维护方法有很多，时间复杂度 $\mathcal{O}(n\log n)$。</p>
<h1 id="Codeforces-Round-809-Div-2-text-1706"><a href="#Codeforces-Round-809-Div-2-text-1706" class="headerlink" title="Codeforces Round #809 (Div. 2)$\text{(1706)}$"></a>Codeforces Round #809 (Div. 2)$\text{(1706)}$</h1><table>
<thead>
<tr>
<th align="center">$\text{Score}$</th>
<th align="center">$\texttt{A}$</th>
<th align="center">$\texttt{B}$</th>
<th align="center">$\texttt{C}$</th>
<th align="center">$\texttt{D1}$</th>
<th align="center">$\texttt{D2}$</th>
<th align="center">$\texttt{E}$</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$2214$</td>
<td align="center">$\texttt{494}$</td>
<td align="center">$\texttt{920}$</td>
<td align="center">$\texttt{800}$</td>
<td align="center">$\texttt{-1}$</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">$\text{00:03}$</td>
<td align="center">$\text{00:20}$</td>
<td align="center">$\text{01:00}$</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">补题</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
</tbody></table>
<p>比赛时间：$\text{2022&#x2F;7&#x2F;18 22:35}$</p>
<p>这打的是什么垃圾，策略有误而且能力还有欠缺。</p>
<h2 id="A-Another-String-Minimization-Problem"><a href="#A-Another-String-Minimization-Problem" class="headerlink" title="A. Another String Minimization Problem"></a><a href="https://codeforces.com/contest/1706/problem/A">A. Another String Minimization Problem</a></h2><p>$\text{Solution:}$</p>
<p>按题意模拟，注意要先改靠前的位置。</p>
<h2 id="B-Making-Towers"><a href="#B-Making-Towers" class="headerlink" title="B. Making Towers"></a><a href="https://codeforces.com/contest/1706/problem/B">B. Making Towers</a></h2><p>$\text{Solution:}$</p>
<p>考虑一个相同颜色的塔，由于必须得连着，只能先往右&#x2F;左走几次，到下一行后再往左&#x2F;有走几次，也就是说只有每两个之间相距偶数个才能放在同一列上。</p>
<p>随便写写就过了。</p>
<h2 id="C-Qpwoeirut-And-The-City"><a href="#C-Qpwoeirut-And-The-City" class="headerlink" title="C. Qpwoeirut And The City"></a><a href="https://codeforces.com/contest/1706/problem/C">C. Qpwoeirut And The City</a></h2><p>$\text{Solution:}$</p>
<p>这题开始以为需要 dp，但其实只需要模拟，因为偶数的情况看似复杂，实际上只有 $2$ 类：</p>
<ul>
<li>全都在奇数或偶数格；</li>
<li>有一对相距两格且<strong>前者必须在奇数格上</strong>，而其余<strong>位置固定</strong>。</li>
</ul>
<p>这样就很好写了，忘记前缀和优化还挂了一发，真是服了。</p>
<p>时间复杂度 $\mathcal{O}(n)$。</p>
<h2 id="D-Chopping-Carrots"><a href="#D-Chopping-Carrots" class="headerlink" title="D. Chopping Carrots"></a><a href="https://codeforces.com/contest/1706/problem/D2">D. Chopping Carrots</a></h2><p>$\text{Solution:}$</p>
<p>简单版做法很多，由于对于 $\lfloor \dfrac{a_i}{p_i}\rfloor$，不同的取值最多只有 $2\sqrt{a_i}$，直接将所有取值都记下来，按<a href="https://www.luogu.com.cn/problem/P7514">P7514 [省选联考 2021 A&#x2F;B 卷] 卡牌游戏</a>做即可。</p>
<p>复杂版无法支持我们存储所有取值，那么我们可以枚举 $\lfloor \dfrac{a_1}{p_1}\rfloor$ 的所有可能取值，记为 $b$，然后找到 $a_2\sim a_n$ 得到的小于等于 $b$ 的最大值和大于等于 $b$ 的最小值，再用双指针更新答案。时间复杂度 $\mathcal{O}(\sqrt{a_1}\times n\log n)$，自带大常数容易被卡常。</p>
<p>下面参考题解的 $\text{Solution 2}$，可以作为一个很好的 $\text{idea}$。</p>
<blockquote>
<p>假定 $v$ 为 $\lfloor \dfrac{a_i}{p_i}\rfloor$ 的最大值，则我们只需最大化 $\lfloor \dfrac{a_i}{p_i}\rfloor$ 的最小值。</p>
<p>考虑如果 $1\le a_i\le v$，则我们希望将 $p_i$ 取为 $1$，取 $2$ 及以上答案不优。</p>
<p>如果 $v+1\le a_i\le 2v$，则我们希望将 $p_i$ 取为 $2$，以此类推。</p>
<p>如果 $(u-1)\cdot v+1\le a_i \le u\cdot v$，则我们希望将 $p_i$ 取为 $u$。</p>
<p>但是我们如何对于满足 $(u-1)\cdot v+1\le a_i \le u\cdot v$ 的所有的 $a_i$ 计算最小值？不难发现，这些数的 $p_i$ 均取 $u$，所以我们只需求出这部分数的最小值即可。</p>
<p>记 $next_i$ 为所有 $a_i$ 中大于等于 $i$ 的最小值，这可以通过预处理轻松求出，这样，我们对于 $u&#x3D;1\sim k$，查询 $next_{(u-1)\cdot v+1}$ 就能得到。</p>
<p>两个重要的细节：</p>
<ol>
<li>如果存在 $a_i\ge(v+1)\cdot k$，那么 $v$ 就不可能作为最大值，直接跳过。</li>
<li>对于某个 $v$，我们只需要检查满足 $(u-1)\cdot v+1\le a_n$ 的 $u$，更大的没有意义。</li>
</ol>
<p>最后时间复杂度 $\mathcal{O}(\sum\limits_{i&#x3D;1}^{a_n}\dfrac{a_n}{a_i})&#x3D;\mathcal{O}(a_n \log a_n)$。</p>
</blockquote>
<p>这个复杂度居然连根号都不带，不得不说非常优秀。</p>
<h2 id="E-Qpwoeirut-and-Vertices"><a href="#E-Qpwoeirut-and-Vertices" class="headerlink" title="E. Qpwoeirut and Vertices"></a><a href="https://codeforces.com/contest/1706/problem/E">E. Qpwoeirut and Vertices</a></h2><p>$\text{Solution:}$</p>
<p>考虑将第 $i$ 条给定的边给定一个边权 $i$，然后跑一个最小生成树。通过最小生成树的性质，任意两点之间都有唯一路径，且涵盖的边权最大值尽可能小，正好符合我们的要求。</p>
<p>我们通过倍增求最近公共祖先，就能有两点之间的路径上的边权最大值，考虑如何拓展到 $[l,r]$ 区间任意两点。</p>
<p>由于我们只需对所有被经过的边取最大值，我们可以只去求相邻两点的最近公共祖先，就能涵盖到所有要求的路径。（想一想应该也可以理解）</p>
<p>最后用倍增就能得到答案。</p>
<p>时间复杂度 $\mathcal{O}(n\log n)$。</p>
<h1 id="Educational-Codeforces-Round-132-text-1709"><a href="#Educational-Codeforces-Round-132-text-1709" class="headerlink" title="Educational Codeforces Round 132$\text{(1709)}$"></a>Educational Codeforces Round 132$\text{(1709)}$</h1><p>比赛时间：$\text{2022&#x2F;7&#x2F;21 22:35}$</p>
<table>
<thead>
<tr>
<th align="center">$\text{Penalty}$</th>
<th align="center">$\texttt{A}$</th>
<th align="center">$\texttt{B}$</th>
<th align="center">$\texttt{C}$</th>
<th align="center">$\texttt{D}$</th>
<th align="center">$\texttt{E}$</th>
<th align="center">$\texttt{F}$</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$112$</td>
<td align="center">$\texttt{+}$</td>
<td align="center">$\texttt{+}$</td>
<td align="center">$\texttt{+}$</td>
<td align="center">$\texttt{+1}$</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">$\text{00:03}$</td>
<td align="center">$\text{00:16}$</td>
<td align="center">$\text{00:33}$</td>
<td align="center">$\text{00:50}$</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">补题</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center">√</td>
<td align="center">.</td>
</tr>
</tbody></table>
<h2 id="A-Three-Doors"><a href="#A-Three-Doors" class="headerlink" title="A. Three Doors"></a><a href="https://codeforces.com/contest/1709/problem/A">A. Three Doors</a></h2><p>$\text{Solution:}$</p>
<p><del>太难了，不会做。</del></p>
<h2 id="B-Also-Try-Minecraft"><a href="#B-Also-Try-Minecraft" class="headerlink" title="B. Also Try Minecraft"></a><a href="https://codeforces.com/contest/1709/problem/B">B. Also Try Minecraft</a></h2><p>$\text{Solution:}$</p>
<p>考虑记录一个前缀和后缀和表示到达某处的花费，然后就能 $O(1)$ 查询。</p>
<h2 id="C-Recover-an-RBS"><a href="#C-Recover-an-RBS" class="headerlink" title="C. Recover an RBS"></a><a href="https://codeforces.com/contest/1709/problem/C">C. Recover an RBS</a></h2><p>$\text{Solution;}$</p>
<p>考虑括号匹配的另一种理解：将左括号看作 <code>+1</code>，右括号看作 <code>-1</code>，保证所有前缀和大于等于 $0$，且总和为 $0$。</p>
<p>那么贪心地考虑，将左括号尽量地靠左，才能更有机会合法，那么我们找最优的两种即可。</p>
<h2 id="D-Rorororobot"><a href="#D-Rorororobot" class="headerlink" title="D. Rorororobot"></a><a href="https://codeforces.com/contest/1709/problem/D">D. Rorororobot</a></h2><p>$\text{Solution:}$</p>
<p>先跳到当前列的最高处，判断移动的列之间是否有被挡住的地方，即维护静态区间最大值，用了 st 表，时间复杂度 $\mathcal{O}{(n\log n)}$。</p>
<h2 id="E-XOR-Tree"><a href="#E-XOR-Tree" class="headerlink" title="E. XOR Tree"></a><a href="https://codeforces.com/contest/1709/problem/E">E. XOR Tree</a></h2><p>$\text{Solution:}$</p>
<p>记 $dist_u$ 表示 $1\sim u$ 路径异或和。</p>
<p>考虑 $(u,v)$ 之间路径的异或和 $dist_u\oplus dist_v\oplus a_{\text{lca(u,v)}}$。</p>
<p>可以证明如果只改变改变 $a_u$ 的取值，就能使以 $u$ 为根的子树<strong>不存在</strong>路径异或和为 $0$ 的点对。</p>
<p>我们可以对每一个节点开一个 set 表示以 $u$ 到 $u$ 子树内一点能表示出的所有的异或值，记为 $s_u$，然后对于 $u$ 的子节点 $v$，考虑是否有 $x\in s_u,y\in s_v,x\oplus y\oplus a_u&#x3D;0$，如果存在，说明我们必须修改 $a_u$，修改后清空 $s_u$；如果不存在，将 $s_v$ 合并入 $s_u$。</p>
<p>最后用 dsu on tree，将复杂度优化至 $\mathcal{O}(n\log^2 n)$。</p>
<p>$\text{Code: }$<a href="https://codeforces.com/contest/1709/submission/165254294">Submission #165254294 - Codeforces</a></p>
]]></content>
      <categories>
        <category>codeforces题解</category>
      </categories>
  </entry>
  <entry>
    <title>后缀数组(SA)/后缀自动机(SAM)</title>
    <url>/2021/12/13/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84-SA-%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA-SAM/</url>
    <content><![CDATA[<p>　<span id="more"></span></p>
<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><blockquote>
<p>读入一个长度为 $n$ 的由大小写英文字母或数字组成的字符串，请把这个字符串的所有非空后缀按字典序（用 ASCII 数值比较）从小到大排序，然后按顺序输出后缀的第一个字符在原串中的位置。位置编号为 $1$ 到 $n$。 $n\le10^6$</p>
</blockquote>
<p>暴力怎么做？<del>暴力是不是，加边，加边，加边，然后，并查集查询</del></p>
<p>不难想到用 $\text{sort}$ 进行排序，但比较两个串是 $O(n)$ 的啊，于是我们可以用哈希和二分优化，复杂度 $O(n\log^2n)$。</p>
<p>对于一般的题目，暴力与正解往往有所关联，但是…</p>
<p>好了，下面正式开始介绍算法。</p>
<h2 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h2><p>我们采用的是倍增思想，如需对字符串 $s&#x3D;\texttt{abcaabc}$ 排序。</p>
<p>首先我们先对每个后缀的前 $1$ 位进行比较，若相等则他们的排名一样。</p>
<p><img src="https://s2.loli.net/2021/12/13/iz5qtBnZSjh3uvf.png"></p>
<p>然后比较前 $2$ 位时，我们就可以用两个 $1$ 来凑出，这样每一位就有了一个二元组，然后我们用二元组排名。</p>
<p><img src="https://s2.loli.net/2021/12/13/b8Ylh4NQOUTAgic.png"></p>
<p>注意，如果没有完整的话就补 $0$。</p>
<p>然后继续比较前 $4$ 位。</p>
<p><img src="https://s2.loli.net/2021/12/13/gJkv4jeRusyX2O5.png"></p>
<p>这时你突然发现，好像所有位置的排名都不一样了！那么算法就结束了。</p>
<p>看起来十分容易理解，<del>但是这个算法充分体现了能不能理解和能不能实现是两回事。</del></p>
<p>实现的时候，我们需要 $SA_i,x_i,y_i,c_i$ 这四个数组实现。</p>
<p>$SA_i$ 表示的为排名第 $i$ 的是以 $SA_i$ 为起始的后缀。</p>
<p>$x_i$ 表示此时第 $i$ 位的第一关键字是什么，$y_i$ 存储了第二关键字从小到大的下标，$c_i$ 一会再说。</p>
<p>首先我们要按前 $1$ 位排序，为了方便我们直接用 $\text{Ascii}$ 码作为权值存入桶 $c$ 中，然后做一下 $c$ 的前缀和，这样我们就先给 $SA_i$ 赋了一个初值。</p>
<p>然后开始循环，枚举一个 $j$ 代表当前处理了前 $j$ 位，经过处理后变为 $2j$ 位。</p>
<p>这里由于每一个位置可以看作是 $x,y$ 的双关键字排序，所以用一下基数排序，大致思路为先将优先级小的存入桶中（也就是排序），然后再排大的。</p>
<p>不难发现，最后长度不到 $j$ 的第二关键字应都为 $0$，所以它们的第二关键字应该最小。</p>
<p>然后我们从前往后遍历 $SA_i$，如果它的其实点大于 $j$，那么说明它也可以直接进入第二关键字。</p>
<p>然后利用基数排序思想，打入 $c$ 数组，重新更新一遍 $SA_i$，这样这一轮的 $SA$ 就更新完。</p>
<p>最后就是更新 $x$ 了，我们只需要按照上面图片的思路，看是否有两个关键字一样，如果一样就用一样的编号，否则用更大的编号。</p>
<p>如果最后给 $x$ 的编号总数已经到达 $n$，算法结束，退出。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>如果上文介绍没有特别清晰，请读者一定要结合代码仔细分析和思考，看透算法的本质。</p>
<p>本代码可解决 <a href="https://www.luogu.com.cn/problem/P3809">$\text{Luogu P3809}$</a>。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">2000005</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> s<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> x<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> tmp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> top<span class="token punctuation">,</span> p<span class="token punctuation">;</span>
<span class="token keyword">int</span> SA<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> rk<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    n <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    n<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        c<span class="token punctuation">[</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SA<span class="token punctuation">[</span><span class="token operator">--</span>c<span class="token punctuation">[</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>j <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> j<span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            y<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>SA<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                y<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> SA<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> j<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            c<span class="token punctuation">[</span>x<span class="token punctuation">[</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            SA<span class="token punctuation">[</span><span class="token operator">--</span>c<span class="token punctuation">[</span>x<span class="token punctuation">[</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        p <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        x<span class="token punctuation">[</span>SA<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span>SA<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> tmp<span class="token punctuation">[</span>SA<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> tmp<span class="token punctuation">[</span>SA<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">==</span> tmp<span class="token punctuation">[</span>SA<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span> x<span class="token punctuation">[</span>SA<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> x<span class="token punctuation">[</span>SA<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">>=</span> n<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        m <span class="token operator">=</span> p<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    n<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> SA<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>省选</category>
        <category>NOI8级</category>
      </categories>
  </entry>
  <entry>
    <title>Manacher 算法</title>
    <url>/2021/12/08/Manacher-%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>马  拉  车</p>
<span id="more"></span>

<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><blockquote>
<p>给定一个字符串 $s$，求它的最长回文子串的长度。$|s|\le 10^7$</p>
</blockquote>
<p>我们需要找到一种线性解法，那就是 $\text{Manacher}$。</p>
<h2 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h2><p>首先回顾回文串的定义，即正序和倒序的字符串一模一样，如 $\texttt{abcba}$。</p>
<p>不难发现每个回文串都有一个对称中心，有时是一个确定的字符，有时对称位不在字符上（长度为偶数）。</p>
<p>因此为了方便，在每两个字符之间加一个相同的字符，这样对称位一定在字符上。</p>
<p>求解时要借助 $p[],mid,mx$，$p_i$ 表示以 $i$ 为中心的<strong>向一个方向的延伸的最长长度而不是整个回文串的长度</strong>，或者可理解为 $p_i&#x3D;\dfrac{len+1}{2}$。</p>
<p>不难发现最终的答案为 $\max(p_i)-1$，那么问题转化为求解 $p$。</p>
<p>那我们先继续说剩下两个：$mx$ 表示**当前的回文串中出现的最右端 $+1$**，$mid$ 表示 <strong>$mx$ 出现的最远的对称中心</strong> 。</p>
<p>然后我们枚举 $i$ 并分类讨论：</p>
<p>① 当 $i$ 在 $mid$ 和 $mx$ 之间，作出 $i$ 关于 $mid$ 的对称点 $j$。</p>
<p><img src="https://s2.loli.net/2021/12/09/P6p1eymH3NTBWGM.png"></p>
<p>假设以 $j$ 为对称中心的最长回文子串为红色部分，那么以 $i$ 为对称中心的最长回文子串一定为相应的紫色部分且不会更长，这个由对应的定义可以证明。</p>
<p><img src="https://s2.loli.net/2021/12/09/Lqo7hEmYpGrCnvb.png"></p>
<p>那如果出现这种情况？</p>
<p><img src="https://s2.loli.net/2021/12/09/xTzjWwgDY6eF5RK.png"></p>
<p>因为当前的只判断到 $mx$ 以前，超过的部分需要充重新判断，这块直接暴力比对即可。</p>
<p>② 当 $i$ 超过 $mx$ 时，重新从最小开始比较即可。</p>
<p>当当前判断到的位置超过 $mx$ 时，更新一下新的 $mx$ 和 $mid$ 即可。</p>
<h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>因为判断过的位置不会再重复判断，所以是线性的复杂度。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> n<span class="token punctuation">,</span> p<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> s<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">manacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> mx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'!'</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'|'</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        s<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> ss<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'|'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    s<span class="token punctuation">[</span>n <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'?'</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>mx <span class="token operator">></span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> mid <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">,</span> mx <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i <span class="token operator">+</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">+</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> mx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            mx <span class="token operator">=</span> i <span class="token operator">+</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> mid <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>省选</category>
        <category>NOI8级</category>
      </categories>
  </entry>
  <entry>
    <title>NOIP2021 游记</title>
    <url>/2021/11/21/NOIP2021-%E6%B8%B8%E8%AE%B0/</url>
    <content><![CDATA[<p>　<span id="more"></span></p>
<p>早上很早就到了 rdf，在大门前碰到了 $\text{smallfang}$，他说他打完 $\text{NOIP}$ 后就不能继续 OI 了，可能重心还是在中考，祝 Ta 中考 AK！</p>
<p><del>考前没说不让用键盘，好评</del></p>
<p>8:30 $T1$ 开题，<del>感觉是个不可做题</del>，$30$ 分钟后跑去看 $T2$。</p>
<p>$T2$ 乍一看没啥思路，但发现大的 $val$ 不会影响到小 $val$，把能想到的状态放在 $dp$ 状态里就有了一个空间 $O(n^3m)$，时间 $O(n^4m)$ 的 nb 做法，推了 $10$ 分钟式子 $+$ $20$ 分钟写代码 $+$ $10$ 分钟调代码就过了大样例。</p>
<p>此时再回头看 $T1$，发现预处理加二分查询貌似可行，看了下循环内层不超过 $5\times10^7$ 次。其实可以优化至 $2\times10^7$ 次以内，但反正能过，码了 $10$ 分钟，特判了 $10000001$ 并过了大样例，此时大约为 10:20。</p>
<p>感觉这场是个起飞场，去了个厕所后回来看 $T3$，$T3$ 一开始也在往奇怪 dp 想，想了 $30$ 分钟后也没有什么合适的状态和转移方程，于是立马开始打暴力，大概是 dfs 并用 map 判重复序列，然后打完这个后又打了一个思路差不多的暴力进行对拍，此时大约为 11:50。</p>
<p>然后去看 $T4$，几分钟后发现只会暴力，并且感觉这题细节很多，贼难写，于是上了个厕所开始全力冲。</p>
<p>一直冲到了 12:40，但仍没有过样例，于是我先去检查了前 $3$ 题，$T1$ 与 $T2$ 目测后感觉没错，$T3$ 拍了几千组没有拍挂，平均用时在 $0.5s$ 以内，于是把这 $3$ 题都交了，然后接着回来调。</p>
<p>遗憾的是，直到 12:55，我也没有调出来。于是我进行了最后的检查如看代码是否可以通过编译、数组是否开小、是否会爆 int，以及数组内存问题，再用仅存的时间调试 $T4$，希望能出现奇迹。</p>
<p>考试结束了，调出 $T4$ 的希望破灭了。</p>
<h2 id="赛后"><a href="#赛后" class="headerlink" title="赛后"></a>赛后</h2><p>考后校内 OIer 群就刷炸了，一如既往的潜水观察（</p>
<p>感觉大家都考的不是很好，我在同届都能 rk4 了。</p>
<p>预估得分 $100+100+?+0$</p>
<p>跑了个民间数据，全 BJ 我能卡进前 $50$，初中能排在十几名。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>今年联赛发挥的虽然没达到既定目标，但我认为这次发挥已经比平时训练要好了。</p>
<p>几个考试时的问题：</p>
<ol>
<li>$T1$ 耽误的时间相对较多，并没有迅速的估计出一个合理复杂度的算法。</li>
<li>$T3$ 并没有想出一些更优的做法（简单说就是算法的性价比较低），如可以尝试随机化算法，能用更少的时间同样获得不错的分数。</li>
<li>基本的搜索还是不够熟练，要不然是可以再拿到 $24$ 分的。</li>
<li><del>比赛时忘记吃巧克力了。</del></li>
</ol>
<p>那就这样吧，等官方成绩和排名出来后更新一波，最后祝各位都能取得理想的成绩！</p>
<h2 id="text-Update"><a href="#text-Update" class="headerlink" title="$\text{Update}$"></a>$\text{Update}$</h2><p>草，$100+100+20+0&#x3D;220$，萎的彻底。</p>
<p>人均分数高于民间数据，tmd</p>
]]></content>
      <categories>
        <category>比赛游记</category>
      </categories>
  </entry>
  <entry>
    <title>数位 dp</title>
    <url>/2021/06/06/%E6%95%B0%E4%BD%8D-dp/</url>
    <content><![CDATA[<p><del>感觉数位DP用记忆化搜索挺简单的。</del></p>
<span id="more"></span>

<h1 id="数位DP记忆化搜索模板"><a href="#数位DP记忆化搜索模板" class="headerlink" title="数位DP记忆化搜索模板"></a>数位DP记忆化搜索模板</h1><pre class=" language-cpp"><code class="language-cpp">ll n<span class="token punctuation">,</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//代表当前到了第 pos 位,某种状态 state 时的答案,state可以为多个状态。</span>

ll <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> state<span class="token punctuation">,</span> <span class="token keyword">bool</span> lead<span class="token punctuation">,</span> <span class="token keyword">bool</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//pos,state 同上,lead 代表是否有前导0,limit 代表是否可以取到原数。</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>pos <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//所有数位搜索完成</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>lead <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>state<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//记忆化</span>
    <span class="token keyword">int</span> up<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit<span class="token punctuation">)</span> up <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这一位可以取 0~9</span>
    <span class="token keyword">else</span> up <span class="token operator">=</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//否则不能超过要求数位</span>
    ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> up<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        特殊判断<span class="token punctuation">;</span>
        ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos<span class="token number">-1</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token punctuation">(</span>lead <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里的 state 是更新后的 state。</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

ll <span class="token function">solve</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
        x <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="P2657-SCOI2009-windy数"><a href="#P2657-SCOI2009-windy数" class="headerlink" title="P2657 [SCOI2009]windy数"></a><a href="https://www.luogu.com.cn/problem/P2657">P2657 [SCOI2009]windy数</a></h2><p>$dp[pos][state]$ 表示当前位为 $pos$,$pos+1$ 位选择 $state$,然后和当前位的选择判断即可。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>
ll a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

ll <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> state<span class="token punctuation">,</span> <span class="token keyword">bool</span> lead<span class="token punctuation">,</span> <span class="token keyword">bool</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pos <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>lead <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> up<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit<span class="token punctuation">)</span> up <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> up <span class="token operator">=</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
    ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> up<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>i <span class="token operator">-</span> state<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>	
        <span class="token keyword">if</span><span class="token punctuation">(</span>lead <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos<span class="token number">-1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos<span class="token number">-1</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>lead<span class="token punctuation">)</span>
        dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>state<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">solve</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
        x <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P4124-CQOI2016-手机号码"><a href="#P4124-CQOI2016-手机号码" class="headerlink" title="P4124 [CQOI2016]手机号码"></a><a href="https://www.luogu.com.cn/problem/P4124">P4124 [CQOI2016]手机号码</a></h2><p>$dp[pos][num1][num2][used4][used8][triple]$ 表示当前位为 $pos$,$pos+1$ 位为 $num1$,$pos+2$ 位为 $num2$,是否有$4$,是否有$8$,是否有三位连续的数。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
ll a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

ll <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">,</span> <span class="token keyword">bool</span> used4<span class="token punctuation">,</span> <span class="token keyword">bool</span> used8<span class="token punctuation">,</span> <span class="token keyword">bool</span> triple<span class="token punctuation">,</span> <span class="token keyword">bool</span> lead<span class="token punctuation">,</span> <span class="token keyword">bool</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pos <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> triple<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>lead <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>num1<span class="token punctuation">]</span><span class="token punctuation">[</span>num2<span class="token punctuation">]</span><span class="token punctuation">[</span>used4<span class="token punctuation">]</span><span class="token punctuation">[</span>used8<span class="token punctuation">]</span><span class="token punctuation">[</span>triple<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>num1<span class="token punctuation">]</span><span class="token punctuation">[</span>num2<span class="token punctuation">]</span><span class="token punctuation">[</span>used4<span class="token punctuation">]</span><span class="token punctuation">[</span>used8<span class="token punctuation">]</span><span class="token punctuation">[</span>triple<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> up<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit<span class="token punctuation">)</span> up <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> up <span class="token operator">=</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
    ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> up<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>used4 <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>used8 <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>lead <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> used4<span class="token punctuation">,</span> used8<span class="token punctuation">,</span> triple<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos<span class="token number">-1</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> num1<span class="token punctuation">,</span> <span class="token punctuation">(</span>used4 <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">||</span> i <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>used8 <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">||</span> i <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>triple <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">||</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> num1 <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>lead<span class="token punctuation">)</span>  
        dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>num1<span class="token punctuation">]</span><span class="token punctuation">[</span>num2<span class="token punctuation">]</span><span class="token punctuation">[</span>used4<span class="token punctuation">]</span><span class="token punctuation">[</span>used8<span class="token punctuation">]</span><span class="token punctuation">[</span>triple<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">solve</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
        x <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P2602-ZJOI2010-数字计数"><a href="#P2602-ZJOI2010-数字计数" class="headerlink" title="P2602 [ZJOI2010]数字计数"></a><a href="https://www.luogu.com.cn/problem/P2602">P2602 [ZJOI2010]数字计数</a></h2><p>本来我的状态为 $dp[pos]$ 表示当前位为 $pos$,含有查找数位的数量。</p>
<p>但是在记忆化时有一个问题</p>
<p>假设我要去找$1$的个数</p>
<p>例如$11110…$,$10234…$这两个数都已经搜了$5$位,则这两个数的状态都是一样的,但很明显前者$1$的数量要比后者的多,所以这个状态不对。</p>
<p>那么怎么才是对的呢?</p>
<p>发现 $11000…$,$12410…$这两个数当前$1$的个数一样,而最后总共$1$的个数应该也是一样的</p>
<p>那么状态定义 $dp[pos][cnt]$ 表示当前位 $pos$,含有 $cnt$ 个查找数位的数量。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>
ll a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

ll <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">,</span> ll cnt<span class="token punctuation">,</span> <span class="token keyword">bool</span> lead<span class="token punctuation">,</span> <span class="token keyword">bool</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pos <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>lead <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>limit <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> up<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit<span class="token punctuation">)</span> up <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> up <span class="token operator">=</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
    ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> up<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>lead <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos<span class="token number">-1</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos<span class="token number">-1</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> cnt <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> key<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>lead <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>limit<span class="token punctuation">)</span> 
        dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">solve</span><span class="token punctuation">(</span>ll x<span class="token punctuation">,</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
        x <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P3286-SCOI2014-方伯伯的商场之旅"><a href="#P3286-SCOI2014-方伯伯的商场之旅" class="headerlink" title="P3286 [SCOI2014]方伯伯的商场之旅"></a><a href="https://www.luogu.com.cn/problem/P3286">P3286 [SCOI2014]方伯伯的商场之旅</a></h2><p><del>梁伯伯</del></p>
<p>借用老师的题解:<br><img src="https://img-kysic-1258722770.file.myqcloud.com/d0b0e8e60ef66b503fa13f804bfb0b61/b1cec811ab3b8.PNG"><br><img src="https://img-kysic-1258722770.file.myqcloud.com/e48dab3ea9c3a8965bd693921a62478e/b7289476c6401.PNG"><br><img src="https://img-kysic-1258722770.file.myqcloud.com/87884a1b3b1ea5ed83a6c7a9b4f83c4a/f82dca87f180a.PNG"></p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxsum <span class="token operator">=</span> <span class="token number">4000</span><span class="token punctuation">;</span>
ll k<span class="token punctuation">,</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxsum<span class="token punctuation">]</span><span class="token punctuation">;</span>

ll <span class="token function">dfs1</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> ll sum<span class="token punctuation">,</span> <span class="token keyword">bool</span> lead<span class="token punctuation">,</span> <span class="token keyword">bool</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pos <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>lead <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>sum<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>sum<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> up<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit<span class="token punctuation">)</span> up <span class="token operator">=</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> up <span class="token operator">=</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
    ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> up<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>lead <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs1</span><span class="token punctuation">(</span>pos<span class="token number">-1</span><span class="token punctuation">,</span> sum<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs1</span><span class="token punctuation">(</span>pos<span class="token number">-1</span><span class="token punctuation">,</span> sum <span class="token operator">+</span> i <span class="token operator">*</span> <span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>lead<span class="token punctuation">)</span>
        dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>sum<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">dfs2</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> ll state<span class="token punctuation">,</span> <span class="token keyword">bool</span> lead<span class="token punctuation">,</span> <span class="token keyword">bool</span> limit<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>state <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pos <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> state<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>lead <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>state<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> up<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit<span class="token punctuation">)</span> up <span class="token operator">=</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> up <span class="token operator">=</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
    ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> up<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>lead <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs2</span><span class="token punctuation">(</span>pos<span class="token number">-1</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pos <span class="token operator">>=</span> key<span class="token punctuation">)</span> ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs2</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> state <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs2</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> state <span class="token operator">-</span> i<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>lead<span class="token punctuation">)</span>
        dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>state<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">solve</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> x <span class="token operator">%</span> k<span class="token punctuation">;</span>
        x <span class="token operator">/</span><span class="token operator">=</span> k<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ll ans <span class="token operator">=</span> <span class="token function">dfs1</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> top<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ans <span class="token operator">-</span><span class="token operator">=</span> <span class="token function">dfs2</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P4317-花神的数论题"><a href="#P4317-花神的数论题" class="headerlink" title="P4317 花神的数论题"></a><a href="https://www.luogu.com.cn/problem/P4317">P4317 花神的数论题</a></h2><p>双倍经验题。</p>
<p>状态同 P2602 [ZJOI2010]数字计数。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
ll a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

ll <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> ll cnt<span class="token punctuation">,</span> <span class="token keyword">bool</span> lead<span class="token punctuation">,</span> <span class="token keyword">bool</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pos <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>cnt<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>lead <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> up<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit<span class="token punctuation">)</span> up <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> up <span class="token operator">=</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
    ll ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> up<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>lead <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">*</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
        <span class="token keyword">else</span> ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">*</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> cnt <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>lead<span class="token punctuation">)</span>
        dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">solve</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">;</span>
        x <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P4999-烦人的数学作业"><a href="#P4999-烦人的数学作业" class="headerlink" title="P4999 烦人的数学作业"></a><a href="https://www.luogu.com.cn/problem/P4999">P4999 烦人的数学作业</a></h2><p>思路同 P2602 [ZJOI2010]数字计数。</p>
<p>设状态 $dp[pos][sum]$ 表示当前位为 $pos$,数字和为 $sum$ 的答案。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">20</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxsum <span class="token operator">=</span> <span class="token number">200</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>
ll a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxsum<span class="token punctuation">]</span><span class="token punctuation">;</span>

ll <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> sum<span class="token punctuation">,</span> <span class="token keyword">bool</span> lead<span class="token punctuation">,</span> <span class="token keyword">bool</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pos <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>lead <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>sum<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>sum<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> up<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit<span class="token punctuation">)</span> up <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> up <span class="token operator">=</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
    ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> up<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> sum <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span>lead <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>lead<span class="token punctuation">)</span>
        dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>sum<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">solve</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
        x <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="T180087-花式打牌"><a href="#T180087-花式打牌" class="headerlink" title="T180087 花式打牌"></a><a href="https://www.luogu.com.cn/problem/T180087">T180087 花式打牌</a></h2><p>这题我想吐槽一下,比赛的时候一直在想容斥,结果喜提$0$分qwq</p>
<p>但如果将每种牌选出的数量当做一个数位,发现可以用数位 dp</p>
<p>考虑分 $\text{op}$ 去写。</p>
<p>$\text{op}&#x3D;1$,状态 $dp[pos][rest][ok]$ 表示当前位为 $pos$,剩余 $rest$ 张,是否有炸弹。</p>
<p>$\text{op}&#x3D;2$,状态 $dp[pos][rest][last][ok]$ 表示当前位为 $pos$,剩余 $rest$ 张,$pos+1$ 位为 $last$,是否有飞机。</p>
<p>$\text{op}&#x3D;3$,发现用四维状态表示前四位的选择空间开销过大,但其实可以只用一维表示已经连续了几种牌。</p>
<p>$\text{op}&#x3D;4$ </p>
<p>若将状态定为 $dp[pos][rest][cnt][last][ok1][ok2][ok3]$ 表示当前位为 $pos$,剩余 $rest$ 张,已经连续了 $cnt$ 为,上一位为 $last$,是否有炸弹,是否有飞机,是否有顺子,则空间过大。</p>
<p>但由于最后选择中不能有飞机和顺子,所以只有出现了飞机和顺子,最后这种选择一定不符合要求。</p>
<p>故可省掉 $ok2$,$ok3$。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxk <span class="token operator">=</span> <span class="token number">1500</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>	
<span class="token keyword">int</span> dp1<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxk<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp2<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxk<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp3<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxk<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp4<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxk<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">dfs1</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> rest<span class="token punctuation">,</span> <span class="token keyword">bool</span> ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>rest <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> pos <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>rest <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ok<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>dp1<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>ok<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp1<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>ok<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span> <span class="token function">dfs1</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> rest <span class="token operator">-</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span>ok <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">||</span> i <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
    dp1<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>ok<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">dfs2</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> rest<span class="token punctuation">,</span> <span class="token keyword">int</span> last<span class="token punctuation">,</span> <span class="token keyword">bool</span> ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>rest <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> pos <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>rest <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">!</span>ok<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>dp2<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token punctuation">[</span>ok<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp2<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token punctuation">[</span>ok<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span> <span class="token function">dfs2</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> rest <span class="token operator">-</span> i<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span>ok <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">||</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> last <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
    dp2<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token punctuation">[</span>ok<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">dfs3</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> rest<span class="token punctuation">,</span> <span class="token keyword">int</span> cnt<span class="token punctuation">,</span> <span class="token keyword">bool</span> ok<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>rest <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> pos <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>rest <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">!</span>ok<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>dp3<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">[</span>ok<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp3<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">[</span>ok<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span>cnt<span class="token punctuation">;</span>
        ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span> <span class="token function">dfs3</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> rest <span class="token operator">-</span> i<span class="token punctuation">,</span> cnt <span class="token operator">+</span> k<span class="token punctuation">,</span> <span class="token punctuation">(</span>ok <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">||</span> cnt <span class="token operator">+</span> k <span class="token operator">>=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    dp3<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">[</span>ok<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">int</span> <span class="token function">dfs4</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> rest<span class="token punctuation">,</span> <span class="token keyword">int</span> cnt<span class="token punctuation">,</span> <span class="token keyword">int</span> last<span class="token punctuation">,</span> <span class="token keyword">bool</span> ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>rest <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> pos <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>rest <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ok<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>dp4<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token punctuation">[</span>ok<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp4<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token punctuation">[</span>ok<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span>cnt<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>cnt <span class="token operator">+</span> k <span class="token operator">>=</span> <span class="token number">5</span> <span class="token operator">||</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> last <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
            ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span> <span class="token function">dfs4</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> rest <span class="token operator">-</span> i<span class="token punctuation">,</span> cnt <span class="token operator">+</span> k<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span>ok <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">||</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    dp4<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token punctuation">[</span>ok<span class="token punctuation">]</span><span class="token operator">=</span>ans<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> opt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>opt <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">memset</span><span class="token punctuation">(</span>dp1<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token function">dfs1</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> x <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>opt <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">memset</span><span class="token punctuation">(</span>dp2<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token function">dfs2</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> x <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>opt <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">memset</span><span class="token punctuation">(</span>dp3<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token function">dfs3</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> x <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>opt <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">memset</span><span class="token punctuation">(</span>dp4<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token function">dfs4</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> x <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P3413-SAC-1-萌数"><a href="#P3413-SAC-1-萌数" class="headerlink" title="P3413 SAC#1 - 萌数"></a><a href="https://www.luogu.com.cn/problem/P3413">P3413 SAC#1 - 萌数</a></h2><p>可以用所有数减去不含回文子串的个数。</p>
<p>那么如何判断是否有回文子串?</p>
<p>因为一个回文串,必定中间的$2$位或$3$位回文,那么如果一个数的任意连续$3$位都不一样,则不是回文串。</p>
<p>定义状态为 $dp[pos][num1][num2]$ 表示当前位为 $pos$,$pos+1$ 位为 $num1$,$pos+2$ 位为 $num2$。</p>
<p>答案可能会很大,一些优化:</p>
<ul>
<li>一般最终答案都是 $solve(r)-solve(l-1)$,那么可以改为 $solve(r)-solve(l)+check(l)$<br> 即单独判断 $l$,不用去写处理 $l-1$。</li>
<li>数的总个数也很多,所以可以在读入的时候先对 $l$ 和 $r$ 进行取模。</li>
</ul>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1000</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> l<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> r<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
ll dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

ll <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">,</span> <span class="token keyword">bool</span> lead<span class="token punctuation">,</span> <span class="token keyword">bool</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pos <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>lead <span class="token operator">&amp;&amp;</span> num1 <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> num2 <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>num1<span class="token punctuation">]</span><span class="token punctuation">[</span>num2<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>num1<span class="token punctuation">]</span><span class="token punctuation">[</span>num2<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> up<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit<span class="token punctuation">)</span> up <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> up <span class="token operator">=</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
    ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> up<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>lead <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
            <span class="token keyword">else</span> ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">!=</span> num1 <span class="token operator">&amp;&amp;</span> i <span class="token operator">!=</span> num2<span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> num1<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>lead <span class="token operator">&amp;&amp;</span> num1 <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> num2 <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>num1<span class="token punctuation">]</span><span class="token punctuation">[</span>num2<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">char</span> num<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>len <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cin <span class="token operator">>></span> <span class="token punctuation">(</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token punctuation">(</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ll numl <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> numr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        numl <span class="token operator">=</span> <span class="token punctuation">(</span>numl <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        numr <span class="token operator">=</span> <span class="token punctuation">(</span>numr <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
    <span class="token keyword">bool</span> ok <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> l<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">||</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> l<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    len <span class="token operator">=</span> <span class="token punctuation">(</span>numr <span class="token operator">-</span> numl <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> Mod<span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>len <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token function">solve</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">solve</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span> <span class="token operator">+</span> ok<span class="token punctuation">)</span> <span class="token operator">+</span> Mod<span class="token punctuation">)</span> <span class="token operator">%</span> Mod <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="P3303-SDOI2013-淘金"><a href="#P3303-SDOI2013-淘金" class="headerlink" title="P3303 [SDOI2013]淘金"></a><a href="https://www.luogu.com.cn/problem/P3303">P3303 [SDOI2013]淘金</a></h2><p>黑题数位dp,<del>但其实还是比较简单的</del> <img src="https://啧.tk/jk"></p>
<p>由于 $f(x)$ 是 $x$ 的各位数字相乘,则我们可以统计每个数的$0\sim9$的个数,并且也能记忆化。</p>
<p>状态 $dp[pos][num1][num2][num3][num4][num5][num6][num7][num8][num9]$ 表示当前位为 $pos$,$1\sim9$ 各用了 $num_1 \sim num_9$ 次的数的个数。</p>
<p>由于 $f(x)&#x3D;0$ 不在坐标轴范围内,则在搜索时判断即可。</p>
<p>然后愉快的发现: $N \le 10^{12}$。明显爆炸。</p>
<p>有没有方法优化呢?</p>
<p>后来想到:</p>
<blockquote>
<ul>
<li>一个数位$9$等价于两个数位$3$</li>
<li>一个数位$8$等价于三个数位$2$</li>
<li>一个数位$6$等价于一个数位$2$和一个数位$3$</li>
<li>一个数位$4$等价于两个数位$2$</li>
<li>数位$1$不会对 $f(x)$ 做出贡献</li>
</ul>
</blockquote>
<p>那么我们就可以将 $num4$,$num6$,$num8$,$num9$ 转化为 $num2$ 与 $num3$。并将 $num1$ 删除。</p>
<p>状态转化为 $dp[pos][num2][num3][num5][num7]$</p>
<p>$13^{10} \rightarrow 13\times 39\times 26\times 13\times 13$</p>
<p>现在我们就有了最终所有的 $f(x)$,但答案是二维的,并且让你取前 $k$ 大的和。</p>
<p>二维可以直接用 $\sum\limits_{i&#x3D;1}^n \sum\limits_{j&#x3D;1}^n num_{f_i}\times num_{f_j}$ 得到,那么如何统计答案？</p>
<p>可以二分答案一个 $mid$,看有多少个值 $\ge mid$,最终找到恰好有 $k$ 个的情况即可。</p>
<p>注意:本题居然爆long long了,使用了一下__int128</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">inline</span> ll <span class="token function">min</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> a <span class="token operator">&lt;</span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token keyword">inline</span> ll <span class="token function">max</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> a <span class="token operator">></span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token keyword">inline</span> ll <span class="token function">abs</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> x <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> x <span class="token operator">:</span> <span class="token operator">-</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> Mod <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxlen <span class="token operator">=</span> <span class="token number">40</span> <span class="token operator">*</span> <span class="token number">27</span> <span class="token operator">*</span> <span class="token number">14</span> <span class="token operator">*</span> <span class="token number">14</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> top<span class="token punctuation">,</span> len<span class="token punctuation">;</span>
ll n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span> <span class="token operator">*</span> maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> maxnum<span class="token punctuation">;</span>
__int128 num<span class="token punctuation">[</span>maxlen<span class="token punctuation">]</span><span class="token punctuation">,</span> sum<span class="token punctuation">[</span>maxlen<span class="token punctuation">]</span><span class="token punctuation">;</span>

ll <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">,</span> <span class="token keyword">int</span> num3<span class="token punctuation">,</span> <span class="token keyword">int</span> num5<span class="token punctuation">,</span> <span class="token keyword">int</span> num7<span class="token punctuation">,</span> <span class="token keyword">bool</span> lead<span class="token punctuation">,</span> <span class="token keyword">bool</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pos <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>num2 <span class="token operator">+</span> num3 <span class="token operator">+</span> num5 <span class="token operator">+</span> num7 <span class="token operator">+</span> lead <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>lead <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>num2<span class="token punctuation">]</span><span class="token punctuation">[</span>num3<span class="token punctuation">]</span><span class="token punctuation">[</span>num5<span class="token punctuation">]</span><span class="token punctuation">[</span>num7<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>num2<span class="token punctuation">]</span><span class="token punctuation">[</span>num3<span class="token punctuation">]</span><span class="token punctuation">[</span>num5<span class="token punctuation">]</span><span class="token punctuation">[</span>num7<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> up<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit<span class="token punctuation">)</span> up <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> up <span class="token operator">=</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
    ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> up<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> lead <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num3<span class="token punctuation">,</span> num5<span class="token punctuation">,</span> num7<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num3<span class="token punctuation">,</span> num5<span class="token punctuation">,</span> num7<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> num2 <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> num2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> num3<span class="token punctuation">,</span> num5<span class="token punctuation">,</span> num7<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> num3 <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>num2<span class="token punctuation">,</span> num3 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> num5<span class="token punctuation">,</span> num7<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> num2 <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> num2 <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> num3<span class="token punctuation">,</span> num5<span class="token punctuation">,</span> num7<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> num5 <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num3<span class="token punctuation">,</span> num5 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> num7<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">6</span> <span class="token operator">&amp;&amp;</span> num2 <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> num3 <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> num2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> num3 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> num5<span class="token punctuation">,</span> num7<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">7</span> <span class="token operator">&amp;&amp;</span> num7 <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num3<span class="token punctuation">,</span> num5<span class="token punctuation">,</span> num7 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">8</span> <span class="token operator">&amp;&amp;</span> num2 <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">)</span> ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> num2 <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">,</span> num3<span class="token punctuation">,</span> num5<span class="token punctuation">,</span> num7<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">9</span> <span class="token operator">&amp;&amp;</span> num3 <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num3 <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> num5<span class="token punctuation">,</span> num7<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>limit <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> a<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>limit <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>lead<span class="token punctuation">)</span> 
        dp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span>num2<span class="token punctuation">]</span><span class="token punctuation">[</span>num3<span class="token punctuation">]</span><span class="token punctuation">[</span>num5<span class="token punctuation">]</span><span class="token punctuation">[</span>num7<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">int</span> num2<span class="token punctuation">,</span><span class="token keyword">int</span> num3<span class="token punctuation">,</span><span class="token keyword">int</span> num5<span class="token punctuation">,</span><span class="token keyword">int</span> num7<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ll ans <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num3<span class="token punctuation">,</span> num5<span class="token punctuation">,</span> num7<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    num<span class="token punctuation">[</span><span class="token operator">++</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">;</span>
    maxnum <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxnum<span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">split</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
        x <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span>__int128 x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>x<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x <span class="token operator">=</span> <span class="token operator">-</span>x<span class="token punctuation">;</span>
    <span class="token function">write</span><span class="token punctuation">(</span>x <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">putchar</span><span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span>__int128 x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len<span class="token punctuation">,</span> tag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> tag <span class="token operator">&lt;=</span> len<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>tag <span class="token operator">&lt;=</span> len <span class="token operator">&amp;&amp;</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> num<span class="token punctuation">[</span>tag<span class="token punctuation">]</span> <span class="token operator">&lt;</span> x<span class="token punctuation">)</span> tag<span class="token operator">++</span><span class="token punctuation">;</span>
        tot <span class="token operator">+</span><span class="token operator">=</span> len <span class="token operator">-</span> tag <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> tot <span class="token operator">&lt;</span> k<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">split</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>num2 <span class="token operator">&lt;=</span> <span class="token number">39</span><span class="token punctuation">;</span>num2<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>num3 <span class="token operator">&lt;=</span> <span class="token number">26</span><span class="token punctuation">;</span>num3<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>num5 <span class="token operator">&lt;=</span> <span class="token number">13</span><span class="token punctuation">;</span>num5<span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num7 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>num7 <span class="token operator">&lt;=</span> <span class="token number">13</span><span class="token punctuation">;</span>num7<span class="token operator">++</span><span class="token punctuation">)</span>	
                    <span class="token function">solve</span><span class="token punctuation">(</span>num2<span class="token punctuation">,</span> num3<span class="token punctuation">,</span> num5<span class="token punctuation">,</span> num7<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> num <span class="token operator">+</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    __int128 l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>r <span class="token operator">=</span> <span class="token function">__int128</span><span class="token punctuation">(</span>maxnum<span class="token punctuation">)</span> <span class="token operator">*</span> maxnum<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> val<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> r <span class="token operator">=</span> mid<span class="token punctuation">;</span>
        <span class="token keyword">else</span> l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    val <span class="token operator">=</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len<span class="token punctuation">;</span>i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>sum<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
    ll ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> num <span class="token operator">+</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">*</span> val <span class="token operator">/</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> num<span class="token punctuation">;</span>
        ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> Mod <span class="token operator">*</span> sum<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
        cnt <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>len <span class="token operator">-</span> id <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>cnt <span class="token operator">></span> k<span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ans <span class="token operator">-</span> val <span class="token operator">%</span> Mod <span class="token operator">*</span> <span class="token punctuation">(</span>cnt <span class="token operator">-</span> k<span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">)</span> <span class="token operator">+</span> Mod<span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre>
<h1 id="总结-amp-吐槽"><a href="#总结-amp-吐槽" class="headerlink" title="总结&amp;吐槽"></a>总结&amp;吐槽</h1><p>总的来说,数位dp可以直接套用记忆化模板,考虑好状态设计就行了,所以我认为还是一个简单的dp类型。</p>
<p>费了一下午的时间终于把坑给补上了,电脑都没电了qwq</p>
<p>还有两周就小中考和学校期末考试了,可能暑假之前就不能更新新的文章了,不过<a href="https://wyy-oier.github.io/2021/02/28/2021%E5%B9%B4%E7%9B%AE%E6%A0%87/">2021年目标</a>还是会更新的。</p>
<p>顺便安排一下接下来学习笔记的内容:</p>
<ol>
<li>树链剖分</li>
<li>可持久化系列</li>
</ol>
<p>大概就是这样了,最后祝大家的小中考能有一个完美的成绩~</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>省选</category>
        <category>NOI7级</category>
      </categories>
  </entry>
  <entry>
    <title>中国剩余定理(CRT)/扩展中国剩余定理(EXCRT)</title>
    <url>/2020/11/18/%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86-CRT-%E6%89%A9%E5%B1%95%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86-EXCRT/</url>
    <content><![CDATA[<p>一元线性同余方程组问题最早可见于中国南北朝时期（公元5世纪）的数学著作《孙子算经》卷下第二十六题，叫做“物不知数”问题，原文如下：</p>
<blockquote>
<p>$有物不知其数，三三数之剩二，五五数之剩三，七七数之剩二。问物几何？$</p>
</blockquote>
<p>即，一个整数除以三余二，除以五余三，除以七余二，求这个整数。《孙子算经》中首次提到了同余方程组问题，以及以上具体问题的解法，因此在中文数学文献中也会将中国剩余定理称为孙子定理。<br>                                        　　　　　　 　　　　　　　　　　　　　　　　　　　　  　　　　　———摘自教练的PPT</p>
<!--less-->

<h1 id="text-crt"><a href="#text-crt" class="headerlink" title="$\text{crt}$"></a>$\text{crt}$</h1><p>中国剩余定理(crt),即让你求解一个关于 $x$ 的同余方程：​</p>
<p>$x\equiv a_1 \pmod{m_1}$</p>
<p>$x\equiv a_2 \pmod{m_2}$</p>
<p>$…$</p>
<p>$x\equiv a_n \pmod{m_n}$</p>
<p>且保证 ${ m_1,m_2…m_n }$ <strong>两两互质</strong>。</p>
<hr>
<p>我们先考虑一个例子：</p>
<p>$x\equiv 2\pmod{3}$</p>
<p>$x\equiv 3\pmod{5}$</p>
<p>$x\equiv 4\pmod{7}$</p>
<p>如果用小奥方法，就是将 $x&#x3D;2$ 不断地加 $3$,发现当 $x&#x3D;8$ 时同时满足第二个式子,然后不停地加 $\operatorname{lcm}(3,5)$，当 $x&#x3D;53$ 时发现全部满足。</p>
<p>我们知道 $a,b,c…| \operatorname{lcm}(a,b,c…)$</p>
<p>所以我们定义 $M_1&#x3D;\operatorname{lcm}(5,7),M_2&#x3D;\operatorname{lcm}(3,7),M_3&#x3D;\operatorname{lcm}(3,5)$</p>
<p>对于第①个式子,我们只需要满足 $t_1M_1\equiv 2 \pmod{m_1}$ ；</p>
<p>对于第②个式子,我们只需要满足 $t_2M_2\equiv 3 \pmod{m_2}$ ；</p>
<p>对于第③个式子,我们只需要满足 $t_3M_3\equiv 4 \pmod{m_3}$ 。</p>
<p>发现可以用 $\operatorname{exgcd}$ 求关于 $t_i$ 的同余方程 $t_iM_i\equiv 1 \pmod{m_i}$ 的最小正整数解</p>
<hr>
<p>那么最终的答案公式应为:</p>
<p>$$(t_1M_1a_1+t_2M_2a_2+…+t_nM_na_n)%\operatorname{lcm(m_1,m_2,…,m_n)}$$</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span>
LL n<span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>m<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>M<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ans<span class="token punctuation">,</span>lcm<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
LL <span class="token function">exgcd</span><span class="token punctuation">(</span>LL a<span class="token punctuation">,</span>LL b<span class="token punctuation">,</span>LL <span class="token operator">&amp;</span>x<span class="token punctuation">,</span>LL <span class="token operator">&amp;</span>y<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> a<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    LL x1<span class="token punctuation">,</span>y1<span class="token punctuation">;</span>
    LL ans<span class="token operator">=</span><span class="token function">exgcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token operator">%</span>b<span class="token punctuation">,</span>x1<span class="token punctuation">,</span>y1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    x<span class="token operator">=</span>y1<span class="token punctuation">;</span>
    y<span class="token operator">=</span>x1<span class="token operator">-</span>a<span class="token operator">/</span>b<span class="token operator">*</span>y1<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>lcm<span class="token operator">*</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        LL x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>total<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>i<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
            total<span class="token operator">*</span><span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        M<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>total<span class="token punctuation">;</span>
        <span class="token function">exgcd</span><span class="token punctuation">(</span>M<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">%</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        ans<span class="token operator">=</span><span class="token punctuation">(</span>ans<span class="token operator">+</span>x<span class="token operator">*</span>M<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>lcm<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h1 id="text-excrt"><a href="#text-excrt" class="headerlink" title="$\text{excrt}$"></a>$\text{excrt}$</h1><p>$\text{excrt}$ 与 $\text{crt}$ 唯一的区别是 $m_i$ 是否两两互质。</p>
<p>考虑去解决其中的两个方程：</p>
<p>$$\begin{cases} x \equiv a_1 \pmod{m_1} \ x \equiv a_2 \pmod{m_2} \end{cases}$$</p>
<p>其中 $\gcd(m_1,m_2)$ 不一定为 $1$。</p>
<p>考虑转化，将式子改写为：</p>
<p>$$\begin{cases} x&#x3D;k_1m_1+a_1 \ x&#x3D;k_2m_2+a_2\end{cases}$$</p>
<p>$$\Rightarrow k_1m_1-k_2m_2&#x3D;a_2-a_1$$</p>
<p>这是二元一次方程基本形式，使用 $\text{exgcd}$ 解决，注意若 $a_2-a_1$ 不为 $\gcd(m_1,m_2)$ 的倍数时无解。</p>
<p>然后我们找到一个满足上述方程的解集中 $k_1$ 的最小非负整数解，然后代入至 $x&#x3D;k_1m_1+a_1$ 求出 $x$，此时 $x$ 对两个方程同时满足，记得出的值为 $x’$。</p>
<p>那么我们可以将这两个方程合并为一个方程：$x\equiv x’ \pmod{\operatorname{lcm}(m_1,m_2)}$。</p>
<p>以此类推合并完所有方程就可以求出最终的答案。</p>
<h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><p><a href="https://www.luogu.com.cn/problem/P4777">P4777 【模板】扩展中国剩余定理</a></p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">double</span> lf<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> Inf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ll Lnf <span class="token operator">=</span> <span class="token number">0x3f3f3f3f3f3f3fll</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> Mod <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">100005</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">;</span>
<span class="token keyword">bool</span> f <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

ll <span class="token function">exgcd</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">,</span> ll <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> ll <span class="token operator">&amp;</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> a<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ll d <span class="token operator">=</span> <span class="token function">exgcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ll z <span class="token operator">=</span> x<span class="token punctuation">;</span>
    x <span class="token operator">=</span> y<span class="token punctuation">,</span> y <span class="token operator">=</span> z <span class="token operator">-</span> y <span class="token operator">*</span> <span class="token punctuation">(</span>a <span class="token operator">/</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> d<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ll <span class="token function">mul</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">,</span> ll p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    a <span class="token operator">%</span><span class="token operator">=</span> p<span class="token punctuation">,</span> b <span class="token operator">%</span><span class="token operator">=</span> p<span class="token punctuation">;</span>
    ll c <span class="token operator">=</span> <span class="token punctuation">(</span>lf<span class="token punctuation">)</span>a <span class="token operator">*</span> b <span class="token operator">/</span> p<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">*</span> b <span class="token operator">-</span> c <span class="token operator">*</span> p <span class="token operator">+</span> p<span class="token punctuation">)</span> <span class="token operator">%</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span>ll <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> ll <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> ll tm<span class="token punctuation">,</span> ll ta<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ll k<span class="token punctuation">,</span> tk<span class="token punctuation">,</span> g <span class="token operator">=</span> <span class="token function">exgcd</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> tm<span class="token punctuation">,</span> k<span class="token punctuation">,</span> tk<span class="token punctuation">)</span><span class="token punctuation">,</span> lcm <span class="token operator">=</span> m <span class="token operator">/</span> g <span class="token operator">*</span> tm<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">-</span> ta<span class="token punctuation">)</span> <span class="token operator">%</span> g <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        f <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    k <span class="token operator">=</span> <span class="token function">mul</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token punctuation">(</span>ta <span class="token operator">-</span> a<span class="token punctuation">)</span> <span class="token operator">/</span> g<span class="token punctuation">,</span> tm <span class="token operator">/</span> g<span class="token punctuation">)</span><span class="token punctuation">;</span>
    a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">mul</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> m<span class="token punctuation">,</span> lcm<span class="token punctuation">)</span> <span class="token operator">+</span> a<span class="token punctuation">)</span> <span class="token operator">%</span> lcm<span class="token punctuation">;</span>
    m <span class="token operator">=</span> lcm<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a <span class="token operator">+</span><span class="token operator">=</span> m<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">excrt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ll a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> ta<span class="token punctuation">,</span> tm<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>tm<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ta<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">solve</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> a<span class="token punctuation">,</span> tm<span class="token punctuation">,</span> ta<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">excrt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>省选</category>
        <category>NOI7级</category>
      </categories>
  </entry>
  <entry>
    <title>NOIP2020 游记</title>
    <url>/2020/10/13/NOIP2020-%E6%B8%B8%E8%AE%B0/</url>
    <content><![CDATA[<p>　<span id="more"></span><br><del>看到初赛过了直接前来写游记。</del></p>
<h4 id="2020-10-01-2020-10-07"><a href="#2020-10-01-2020-10-07" class="headerlink" title="2020.10.01~2020.10.07"></a>2020.10.01~2020.10.07</h4><p>去了计蒜客上课。复习了一些学过的算法,对初赛帮助不太大。</p>
<p>所以我就去看了我们教练整理的初赛复习知识,又结合了信息学奥赛一本通,感觉提升了不少。</p>
<h4 id="2020-10-08"><a href="#2020-10-08" class="headerlink" title="2020.10.08"></a>2020.10.08</h4><p>和同学们参加洛谷举办的<a href="https://www.luogu.com.cn/problem/U134036">初赛模拟赛</a>得84分,感觉被大佬们dd了。</p>
<h4 id="2020-10-10"><a href="#2020-10-10" class="headerlink" title="2020.10.10"></a>2020.10.10</h4><p>晚上又在<strong>洛谷<del>(没)</del>有题</strong>中做了两套提高组试题,感觉状态还行。</p>
<h4 id="2020-10-11"><a href="#2020-10-11" class="headerlink" title="2020.10.11"></a>2020.10.11</h4><p>上午9:30开始考提高组。</p>
<p>选择题比往年善良多了，只错了香农那道题。阅读程序的最后一题和完善程序的最后一题还是很毒瘤的,部分都是直接瞎蒙的，应该也没对多少，剩下的用草稿纸慢慢推就行了。</p>
<p>考完回家吃了饭,<del>写了会学校作业</del>稍微歇了歇就去考普及。</p>
<p>普及也非常的良心,头一次出现阅读程序的两题我都做过。不过考试还有最后5分钟的时候,我成功睿智的把两道题给改错了。艹</p>
<p>等着发成绩吧。</p>
<h4 id="2020-10-13"><a href="#2020-10-13" class="headerlink" title="2020.10.13"></a>2020.10.13</h4><p>成绩这么快就发了,还好我都过了。<br><a href="http://www.student.gov.cn/art/2020/10/13/art_24163_469681.html">北京分数线</a><br>看起来北京好弱啊,提高分数线比去年低多了,不过我们信竞队还是有很强的大佬。</p>
<hr>
<center> $初赛告一段落,游记暂时停更。$ </center>

<hr>
<h4 id="2020-11-07"><a href="#2020-11-07" class="headerlink" title="2020.11.07"></a>2020.11.07</h4><p>终于到了CSP复赛的日子。</p>
<p>上午考普及。</p>
<p><del>T1比往年要难啊</del>,搞了$10$分钟才弄出来。</p>
<p>T2开始我想的是用过$sort$来排序,时间复杂度 $O(n^2logn)$。</p>
<p>一看就暴毙了啊,过了一会儿想到用插入排序将新来的数插入数组中,时间复杂度 $O(n^2)$。</p>
<p>很明显只有85分,但是当时我没有想到更好的方法,于是去搞T3。</p>
<p>然而T3搞了两个小时只打了$30$的暴力,我人没了。</p>
<p>做T4的时候只有10分钟了,打暴力也来不及了,于是输出样例骗分滚粗。</p>
<p>出来后发现,T2原来用桶维护就行了,复杂度 $O(600n)$。艹我没想出来</p>
<p>还有巨佬T2写了平衡树。。。CCCCCOrz</p>
<p>T4是个简单动态规划,早知道先做T4了。</p>
<p>预估:$100+85+30+0&#x3D;215$</p>
<p>下午考提高。</p>
<p>第一次考提高有点紧张,进考场前还碰到了 yxx 巨佬,$rp++$</p>
<p>T1是个大模拟,堪称全场最恶心的题,考试时调了$3$小时才过了大样例。中间电脑卡死了半小时艹</p>
<p>T2相对就简单多了,但是大样例没有过。最后没有时间打T3T4的暴力。</p>
<p>考后发现洛谷上一堆人问候T1的出题人,确实很缺德。</p>
<p>预估:$100+0+0+0&#x3D;100$</p>
<h4 id="2020-11-30"><a href="#2020-11-30" class="headerlink" title="2020.11.30"></a>2020.11.30</h4><p>普及:$100+85+30+0&#x3D;215$</p>
<p>提高:$80+40+0+0&#x3D;120$</p>
<p>提高居然比预测的高人傻了。。。</p>
<p>我们教练预测 1&#x3D; 分数线$140$, yxx $135$估计心态要崩了。</p>
<h4 id="2020-12-04"><a href="#2020-12-04" class="headerlink" title="2020.12.04"></a>2020.12.04</h4><p>最重要的 NOIP 终于要来了,狂刷模板(学过的):</p>
<p><img src="/test2.jpg"></p>
<p><del>貌似也没刷几道</del></p>
<h4 id="2020-12-05"><a href="#2020-12-05" class="headerlink" title="2020.12.05"></a>2020.12.05</h4><blockquote>
<p>终于到了,决战的日子。</p>
</blockquote>
<p><strong>8:30</strong> 开始考试。</p>
<p><strong>8:30 $\sim$ 9:20</strong></p>
<p>T1开题,一道图上的拓扑排序,主要处理好分数转化就行了,但我用的是dfs,我以为最后几个点可能会T,预计80$\sim$100pts。</p>
<p><strong>9:20 $\sim$ 10:10</strong> </p>
<p>T2开题,一道字符串匹配问题,貌似用KMP算法可以100,但我们教练没给我们讲,于是写了个32分的 $O(n^3)$ 。一直在想复杂度问题,浪费了很长时间。</p>
<p><strong>10:10 $\sim$ 10:20</strong></p>
<p>优化了桶数组,时间复杂度 $O(n^2)$,预计得分48。</p>
<p><strong>10:20 $\sim$ 10:55</strong></p>
<p>发现可以只用一种字符,可以用 $O(n \surd{n})$ 解决,预计得分56。</p>
<p><strong>10:55 $\sim$ 11:00</strong> 歇了会儿,去了个厕所。</p>
<p><strong>11:0011:40</strong> T3搞了40分钟,毫无头绪。</p>
<p><strong>11:40</strong></p>
<p>一人发了个面包和两个士力架 <strong>(CCF真良心?)</strong> 后来被收回去一个士力架 <strong>(“猿”形毕露)</strong><br>吃着面包看T4。</p>
<p><strong>11:40 $\sim$ 12:40</strong></p>
<p>cnm理解题意用了20分钟。有很多维度?</p>
<p>发现 $k\le 5$ 时暴力可做,于是开始肝,直接 $k&#x3D;1,2,3,4,5$ 暴力分支模拟,</p>
<p>预计得分30。</p>
<p><strong>12:40 $\sim$ 12:57</strong></p>
<p>其实最后20分钟都是检查,但我分成了两部分。</p>
<hr>
<hr>
<hr>
<p><strong>12:57~13:00</strong></p>
<p>我做了我这一次比赛最正确的决定。</p>
<p>我打开了提交网站,打开了T1,把<strong>网站上</strong>T1的代码复制到guide里,又把三组样例提交了一遍,惊奇的发现,第二组样例过不去!!!</p>
<p>我TM懵了,又试了第三组样例,还是不对,这时我的腿已经不由自主地抖动,不能因为一点失误导致了 $100\rightarrow 0$ 的惨案。</p>
<p>冷静下来后,我突然发现,这个错误跟我一开始调T1时的错误一样,这给了我调的希望,经过2分钟的浏览,我发现了错误,改正了之后又提交了回去,此时距离结束还有40多秒。</p>
<p>(不过为什么前面那段时间没检查出来。。。但是后面发生的事情充分说明了我前面17分钟的检查等于啥都没干)</p>
<p><strong>13:00</strong> 结束考试。</p>
<p><strong>赛后</strong></p>
<p>有人一直在讨论关于T1的题意,于是我对我的代码进行了回忆,经过 $n$ 次反复横跳,感觉还是没错…</p>
<p>但是T1貌似能卡高精度,我只开了long long,看来是躲不过去了。。。</p>
<p>预估:$80 \sim 100+56+0+30&#x3D;166\sim 186$</p>
<h4 id="2020-12-06"><a href="#2020-12-06" class="headerlink" title="2020.12.06"></a>2020.12.06</h4><p>BJ发代码了。。。</p>
<p>评测后发现,T4怎么才15分啊?</p>
<p>最后我发现,我TM T4忘在主函数中加入 $k&#x3D;5$的情况!!!</p>
<p>而数据是这样的:</p>
<table>
<thead>
<tr>
<th align="center">测试点编号</th>
<th align="center">$n\le$</th>
<th align="center">$k\le$</th>
<th align="center">$w_i\le$</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$1\sim 3$</td>
<td align="center">$5$</td>
<td align="center">$5$</td>
<td align="center">$3$</td>
</tr>
<tr>
<td align="center">$4\sim 6$</td>
<td align="center">$100$</td>
<td align="center">$3$</td>
<td align="center">$10$</td>
</tr>
<tr>
<td align="center">$7\sim 8$</td>
<td align="center">$10^5$</td>
<td align="center">$1$</td>
<td align="center">$10^5$</td>
</tr>
<tr>
<td align="center">$9\sim 12$</td>
<td align="center">$10^5$</td>
<td align="center">$2$</td>
<td align="center">$10^6$</td>
</tr>
<tr>
<td align="center">$13\sim 16$</td>
<td align="center">$5\times 10^5$</td>
<td align="center">$10$</td>
<td align="center">$10^6$</td>
</tr>
<tr>
<td align="center">$17\sim 20$</td>
<td align="center">$5\times 10^5$</td>
<td align="center">$3$</td>
<td align="center">$10^9$</td>
</tr>
</tbody></table>
<p>本来测试点$1\sim 6$我都可以过的,但如果前$3$个点都是 $k&#x3D;5$ 我就炸了。(我只有 $k&#x3D;1,2,3,4$)</p>
<center> ----------$\text{To be continued}...$ ----------</center>

<h4 id="The-End"><a href="#The-End" class="headerlink" title="The End?"></a>The End?</h4><p>终于发分了: 70+56+0+15&#x3D;141</p>
<p>BJ一等线140分，成功卡在最后一名（（</p>
<h4 id="几个月后。。。"><a href="#几个月后。。。" class="headerlink" title="几个月后。。。"></a>几个月后。。。</h4><p>没错，NOIP2020一等的同学们可以参加省选</p>
<p>BJOI2021见！</p>
<center> ----------$\text{The End}$----------</center>]]></content>
      <categories>
        <category>比赛游记</category>
      </categories>
  </entry>
</search>
